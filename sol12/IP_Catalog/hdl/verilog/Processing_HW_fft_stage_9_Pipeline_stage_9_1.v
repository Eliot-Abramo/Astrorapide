// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Processing_HW_fft_stage_9_Pipeline_stage_9_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        S9_din,
        S9_num_data_valid,
        S9_fifo_cap,
        S9_full_n,
        S9_write,
        In_re_address0,
        In_re_ce0,
        In_re_q0,
        In_im_address0,
        In_im_ce0,
        In_im_q0,
        In_re_1_address0,
        In_re_1_ce0,
        In_re_1_q0,
        In_im_1_address0,
        In_im_1_ce0,
        In_im_1_q0,
        OutBuff_re_address0,
        OutBuff_re_ce0,
        OutBuff_re_we0,
        OutBuff_re_d0,
        OutBuff_im_address0,
        OutBuff_im_ce0,
        OutBuff_im_we0,
        OutBuff_im_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] S9_din;
input  [10:0] S9_num_data_valid;
input  [10:0] S9_fifo_cap;
input   S9_full_n;
output   S9_write;
output  [7:0] In_re_address0;
output   In_re_ce0;
input  [31:0] In_re_q0;
output  [7:0] In_im_address0;
output   In_im_ce0;
input  [31:0] In_im_q0;
output  [7:0] In_re_1_address0;
output   In_re_1_ce0;
input  [31:0] In_re_1_q0;
output  [7:0] In_im_1_address0;
output   In_im_1_ce0;
input  [31:0] In_im_1_q0;
output  [7:0] OutBuff_re_address0;
output   OutBuff_re_ce0;
output   OutBuff_re_we0;
output  [31:0] OutBuff_re_d0;
output  [7:0] OutBuff_im_address0;
output   OutBuff_im_ce0;
output   OutBuff_im_we0;
output  [31:0] OutBuff_im_d0;

reg ap_idle;
reg S9_write;
reg In_re_ce0;
reg In_im_ce0;
reg In_re_1_ce0;
reg In_im_1_ce0;
reg OutBuff_re_ce0;
reg OutBuff_re_we0;
reg OutBuff_im_ce0;
reg OutBuff_im_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_state10_pp0_stage1_iter4;
wire    ap_block_state12_pp0_stage1_iter5;
wire    ap_block_state14_pp0_stage1_iter6;
wire    ap_block_state16_pp0_stage1_iter7;
reg    ap_block_state18_pp0_stage1_iter8;
reg    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln1027_reg_266;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] Twiddle_re9_address0;
reg    Twiddle_re9_ce0;
wire   [31:0] Twiddle_re9_q0;
wire   [7:0] Twiddle_im10_address0;
reg    Twiddle_im10_ce0;
wire   [31:0] Twiddle_im10_q0;
reg    S9_blk_n;
wire    ap_block_pp0_stage1;
wire   [31:0] grp_fu_185_p2;
reg   [31:0] reg_197;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
wire    ap_block_state15_pp0_stage0_iter7;
wire    ap_block_state17_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1027_fu_211_p2;
wire   [63:0] zext_ln1027_fu_223_p1;
reg   [63:0] zext_ln1027_reg_270;
reg   [63:0] zext_ln1027_reg_270_pp0_iter1_reg;
reg   [63:0] zext_ln1027_reg_270_pp0_iter2_reg;
reg   [63:0] zext_ln1027_reg_270_pp0_iter3_reg;
reg   [63:0] zext_ln1027_reg_270_pp0_iter4_reg;
reg   [63:0] zext_ln1027_reg_270_pp0_iter5_reg;
reg   [63:0] zext_ln1027_reg_270_pp0_iter6_reg;
reg   [63:0] zext_ln1027_reg_270_pp0_iter7_reg;
reg   [63:0] zext_ln1027_reg_270_pp0_iter8_reg;
reg   [31:0] tmp_re_reg_298;
reg   [31:0] tmp_im_reg_303;
reg   [31:0] this_re_load_reg_308;
reg   [31:0] this_im_load_reg_314;
wire   [31:0] grp_fu_189_p2;
reg   [31:0] tmp1_reg_320;
wire   [31:0] grp_fu_193_p2;
reg   [31:0] tmp2_reg_325;
reg   [31:0] tmp3_reg_330;
reg   [31:0] tmp4_reg_335;
reg   [31:0] a_re_reg_345;
wire   [31:0] grp_fu_177_p2;
reg   [31:0] tmp_re_3_reg_356;
reg   [31:0] a_im_reg_362;
reg   [31:0] tmp_im_3_reg_368;
wire   [31:0] grp_fu_181_p2;
reg   [31:0] tmp_re_1_reg_374;
reg   [31:0] tmp_im_1_reg_379;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln980_fu_233_p1;
wire    ap_block_pp0_stage0;
reg   [8:0] ii_V_fu_62;
wire   [8:0] add_ln840_fu_217_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_ii_V_2;
reg    ap_block_pp0_stage1_01001;
reg   [31:0] grp_fu_177_p0;
reg   [31:0] grp_fu_177_p1;
reg   [31:0] grp_fu_181_p0;
reg   [31:0] grp_fu_181_p1;
reg   [31:0] grp_fu_185_p0;
reg   [31:0] grp_fu_185_p1;
reg   [31:0] grp_fu_189_p1;
reg   [31:0] grp_fu_193_p1;
wire   [7:0] lhs_V_fu_229_p1;
wire   [31:0] bitcast_ln981_1_fu_247_p1;
wire   [31:0] bitcast_ln981_fu_244_p1;
reg   [1:0] grp_fu_177_opcode;
reg    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
reg    grp_fu_177_ce;
reg    grp_fu_181_ce;
reg    grp_fu_185_ce;
reg    grp_fu_189_ce;
reg    grp_fu_193_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to8;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

Processing_HW_fft_stage_9_Pipeline_stage_9_1_Twiddle_re9_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
Twiddle_re9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Twiddle_re9_address0),
    .ce0(Twiddle_re9_ce0),
    .q0(Twiddle_re9_q0)
);

Processing_HW_fft_stage_9_Pipeline_stage_9_1_Twiddle_im10_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
Twiddle_im10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Twiddle_im10_address0),
    .ce0(Twiddle_im10_ce0),
    .q0(Twiddle_im10_q0)
);

Processing_HW_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U312(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_177_p0),
    .din1(grp_fu_177_p1),
    .opcode(grp_fu_177_opcode),
    .ce(grp_fu_177_ce),
    .dout(grp_fu_177_p2)
);

Processing_HW_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U313(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_181_p0),
    .din1(grp_fu_181_p1),
    .ce(grp_fu_181_ce),
    .dout(grp_fu_181_p2)
);

Processing_HW_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U314(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_185_p0),
    .din1(grp_fu_185_p1),
    .ce(grp_fu_185_ce),
    .dout(grp_fu_185_p2)
);

Processing_HW_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U315(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_re_reg_298),
    .din1(grp_fu_189_p1),
    .ce(grp_fu_189_ce),
    .dout(grp_fu_189_p2)
);

Processing_HW_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U316(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_im_reg_303),
    .din1(grp_fu_193_p1),
    .ce(grp_fu_193_ce),
    .dout(grp_fu_193_p2)
);

Processing_HW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1027_fu_211_p2 == 1'd0))) begin
            ii_V_fu_62 <= add_ln840_fu_217_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ii_V_fu_62 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_im_reg_362 <= In_im_q0;
        a_re_reg_345 <= In_re_q0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1027_reg_266 <= icmp_ln1027_fu_211_p2;
        zext_ln1027_reg_270_pp0_iter1_reg[8 : 0] <= zext_ln1027_reg_270[8 : 0];
        zext_ln1027_reg_270_pp0_iter2_reg[8 : 0] <= zext_ln1027_reg_270_pp0_iter1_reg[8 : 0];
        zext_ln1027_reg_270_pp0_iter3_reg[8 : 0] <= zext_ln1027_reg_270_pp0_iter2_reg[8 : 0];
        zext_ln1027_reg_270_pp0_iter4_reg[8 : 0] <= zext_ln1027_reg_270_pp0_iter3_reg[8 : 0];
        zext_ln1027_reg_270_pp0_iter5_reg[8 : 0] <= zext_ln1027_reg_270_pp0_iter4_reg[8 : 0];
        zext_ln1027_reg_270_pp0_iter6_reg[8 : 0] <= zext_ln1027_reg_270_pp0_iter5_reg[8 : 0];
        zext_ln1027_reg_270_pp0_iter7_reg[8 : 0] <= zext_ln1027_reg_270_pp0_iter6_reg[8 : 0];
        zext_ln1027_reg_270_pp0_iter8_reg[8 : 0] <= zext_ln1027_reg_270_pp0_iter7_reg[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_197 <= grp_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_266 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        this_im_load_reg_314 <= Twiddle_im10_q0;
        this_re_load_reg_308 <= Twiddle_re9_q0;
        tmp_im_reg_303 <= In_im_1_q0;
        tmp_re_reg_298 <= In_re_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp1_reg_320 <= grp_fu_189_p2;
        tmp2_reg_325 <= grp_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp3_reg_330 <= grp_fu_189_p2;
        tmp4_reg_335 <= grp_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_im_1_reg_379 <= grp_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_im_3_reg_368 <= grp_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_re_1_reg_374 <= grp_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_re_3_reg_356 <= grp_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_fu_211_p2 == 1'd0))) begin
        zext_ln1027_reg_270[8 : 0] <= zext_ln1027_fu_223_p1[8 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_im_1_ce0 = 1'b1;
    end else begin
        In_im_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_im_ce0 = 1'b1;
    end else begin
        In_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_re_1_ce0 = 1'b1;
    end else begin
        In_re_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_re_ce0 = 1'b1;
    end else begin
        In_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        OutBuff_im_ce0 = 1'b1;
    end else begin
        OutBuff_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        OutBuff_im_we0 = 1'b1;
    end else begin
        OutBuff_im_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutBuff_re_ce0 = 1'b1;
    end else begin
        OutBuff_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutBuff_re_we0 = 1'b1;
    end else begin
        OutBuff_re_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        S9_blk_n = S9_full_n;
    end else begin
        S9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        S9_write = 1'b1;
    end else begin
        S9_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Twiddle_im10_ce0 = 1'b1;
    end else begin
        Twiddle_im10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Twiddle_re9_ce0 = 1'b1;
    end else begin
        Twiddle_re9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_266 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to8 = 1'b1;
    end else begin
        ap_idle_pp0_1to8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_ii_V_2 = 9'd0;
    end else begin
        ap_sig_allocacmp_ii_V_2 = ii_V_fu_62;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_177_ce = 1'b1;
    end else begin
        grp_fu_177_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage0_00001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_177_opcode = 2'd1;
        end else if (((1'b0 == ap_block_pp0_stage1_00001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_177_opcode = 2'd0;
        end else begin
            grp_fu_177_opcode = 'bx;
        end
    end else begin
        grp_fu_177_opcode = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_177_p0 = tmp3_reg_330;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_177_p0 = tmp1_reg_320;
        end else begin
            grp_fu_177_p0 = 'bx;
        end
    end else begin
        grp_fu_177_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_177_p1 = tmp4_reg_335;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_177_p1 = tmp2_reg_325;
        end else begin
            grp_fu_177_p1 = 'bx;
        end
    end else begin
        grp_fu_177_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_181_ce = 1'b1;
    end else begin
        grp_fu_181_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_181_p0 = a_im_reg_362;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_181_p0 = a_re_reg_345;
    end else begin
        grp_fu_181_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_181_p1 = tmp_im_3_reg_368;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_181_p1 = tmp_re_3_reg_356;
    end else begin
        grp_fu_181_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_185_ce = 1'b1;
    end else begin
        grp_fu_185_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_185_p0 = a_im_reg_362;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_185_p0 = a_re_reg_345;
    end else begin
        grp_fu_185_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_185_p1 = tmp_im_3_reg_368;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_185_p1 = tmp_re_3_reg_356;
    end else begin
        grp_fu_185_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_189_ce = 1'b1;
    end else begin
        grp_fu_189_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_189_p1 = this_im_load_reg_314;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_189_p1 = this_re_load_reg_308;
        end else begin
            grp_fu_189_p1 = 'bx;
        end
    end else begin
        grp_fu_189_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_193_ce = 1'b1;
    end else begin
        grp_fu_193_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_193_p1 = this_re_load_reg_308;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_193_p1 = this_im_load_reg_314;
        end else begin
            grp_fu_193_p1 = 'bx;
        end
    end else begin
        grp_fu_193_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to8 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign In_im_1_address0 = zext_ln980_fu_233_p1;

assign In_im_address0 = zext_ln1027_reg_270_pp0_iter4_reg;

assign In_re_1_address0 = zext_ln980_fu_233_p1;

assign In_re_address0 = zext_ln1027_reg_270_pp0_iter3_reg;

assign OutBuff_im_address0 = zext_ln1027_reg_270_pp0_iter8_reg;

assign OutBuff_im_d0 = reg_197;

assign OutBuff_re_address0 = zext_ln1027_reg_270_pp0_iter7_reg;

assign OutBuff_re_d0 = reg_197;

assign S9_din = {{bitcast_ln981_1_fu_247_p1}, {bitcast_ln981_fu_244_p1}};

assign Twiddle_im10_address0 = zext_ln1027_fu_223_p1;

assign Twiddle_re9_address0 = zext_ln1027_fu_223_p1;

assign add_ln840_fu_217_p2 = (ap_sig_allocacmp_ii_V_2 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_00001 = ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == S9_full_n));
end

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == S9_full_n));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == S9_full_n));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == S9_full_n));
end

assign ap_block_state10_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp0_stage1_iter8 = (1'b0 == S9_full_n);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign bitcast_ln981_1_fu_247_p1 = tmp_im_1_reg_379;

assign bitcast_ln981_fu_244_p1 = tmp_re_1_reg_374;

assign icmp_ln1027_fu_211_p2 = ((ap_sig_allocacmp_ii_V_2 == 9'd256) ? 1'b1 : 1'b0);

assign lhs_V_fu_229_p1 = ap_sig_allocacmp_ii_V_2[7:0];

assign zext_ln1027_fu_223_p1 = ap_sig_allocacmp_ii_V_2;

assign zext_ln980_fu_233_p1 = lhs_V_fu_229_p1;

always @ (posedge ap_clk) begin
    zext_ln1027_reg_270[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln1027_reg_270_pp0_iter1_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln1027_reg_270_pp0_iter2_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln1027_reg_270_pp0_iter3_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln1027_reg_270_pp0_iter4_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln1027_reg_270_pp0_iter5_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln1027_reg_270_pp0_iter6_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln1027_reg_270_pp0_iter7_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln1027_reg_270_pp0_iter8_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //Processing_HW_fft_stage_9_Pipeline_stage_9_1
