-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Processing_HW_Top_DataFlox is
port (
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    Spectrumoutput_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Spectrumoutput_ce0 : OUT STD_LOGIC;
    Spectrumoutput_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Spectrumoutput_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Spectrumoutput_we0 : OUT STD_LOGIC;
    Spectrumoutput_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Spectrumoutput_ce1 : OUT STD_LOGIC;
    Spectrumoutput_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Spectrumoutput_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Spectrumoutput_we1 : OUT STD_LOGIC;
    num : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff0_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff0_re_ce0 : OUT STD_LOGIC;
    Buff0_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff0_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff0_re_we0 : OUT STD_LOGIC;
    Buff0_re_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff0_re_ce1 : OUT STD_LOGIC;
    Buff0_re_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff0_re_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff0_re_we1 : OUT STD_LOGIC;
    Buff0_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff0_im_ce0 : OUT STD_LOGIC;
    Buff0_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff0_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff0_im_we0 : OUT STD_LOGIC;
    Buff0_im_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff0_im_ce1 : OUT STD_LOGIC;
    Buff0_im_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff0_im_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff0_im_we1 : OUT STD_LOGIC;
    Buff1_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff1_re_ce0 : OUT STD_LOGIC;
    Buff1_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff1_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff1_re_we0 : OUT STD_LOGIC;
    Buff1_re_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff1_re_ce1 : OUT STD_LOGIC;
    Buff1_re_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff1_re_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff1_re_we1 : OUT STD_LOGIC;
    Buff1_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff1_im_ce0 : OUT STD_LOGIC;
    Buff1_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff1_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff1_im_we0 : OUT STD_LOGIC;
    Buff1_im_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff1_im_ce1 : OUT STD_LOGIC;
    Buff1_im_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff1_im_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff1_im_we1 : OUT STD_LOGIC;
    Buff2_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff2_re_ce0 : OUT STD_LOGIC;
    Buff2_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff2_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff2_re_we0 : OUT STD_LOGIC;
    Buff2_re_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff2_re_ce1 : OUT STD_LOGIC;
    Buff2_re_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff2_re_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff2_re_we1 : OUT STD_LOGIC;
    Buff2_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff2_im_ce0 : OUT STD_LOGIC;
    Buff2_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff2_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff2_im_we0 : OUT STD_LOGIC;
    Buff2_im_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff2_im_ce1 : OUT STD_LOGIC;
    Buff2_im_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Buff2_im_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff2_im_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_r_ap_vld : IN STD_LOGIC;
    num_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of Processing_HW_Top_DataFlox is 
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal process_U0_ap_start : STD_LOGIC;
    signal process_U0_ap_done : STD_LOGIC;
    signal process_U0_ap_continue : STD_LOGIC;
    signal process_U0_ap_idle : STD_LOGIC;
    signal process_U0_ap_ready : STD_LOGIC;
    signal process_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal process_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal process_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal process_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal process_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal process_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal process_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal process_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal process_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal process_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal process_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal process_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal process_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal process_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal process_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal process_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal process_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal process_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal process_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal process_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal process_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal process_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal process_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal process_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal process_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal process_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal process_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal process_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal process_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal process_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal process_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal process_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal process_U0_D0_din : STD_LOGIC_VECTOR (63 downto 0);
    signal process_U0_D0_write : STD_LOGIC;
    signal process_U0_num_c47_din : STD_LOGIC_VECTOR (31 downto 0);
    signal process_U0_num_c47_write : STD_LOGIC;
    signal process2_U0_ap_start : STD_LOGIC;
    signal process2_U0_ap_done : STD_LOGIC;
    signal process2_U0_ap_continue : STD_LOGIC;
    signal process2_U0_ap_idle : STD_LOGIC;
    signal process2_U0_ap_ready : STD_LOGIC;
    signal process2_U0_start_out : STD_LOGIC;
    signal process2_U0_start_write : STD_LOGIC;
    signal process2_U0_D0_read : STD_LOGIC;
    signal process2_U0_D1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal process2_U0_D1_write : STD_LOGIC;
    signal process2_U0_num_read : STD_LOGIC;
    signal process2_U0_Buff0_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal process2_U0_Buff0_re_ce0 : STD_LOGIC;
    signal process2_U0_Buff0_re_we0 : STD_LOGIC;
    signal process2_U0_Buff0_re_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal process2_U0_Buff0_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal process2_U0_Buff0_im_ce0 : STD_LOGIC;
    signal process2_U0_Buff0_im_we0 : STD_LOGIC;
    signal process2_U0_Buff0_im_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal process2_U0_Buff1_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal process2_U0_Buff1_re_ce0 : STD_LOGIC;
    signal process2_U0_Buff1_re_we0 : STD_LOGIC;
    signal process2_U0_Buff1_re_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal process2_U0_Buff1_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal process2_U0_Buff1_im_ce0 : STD_LOGIC;
    signal process2_U0_Buff1_im_we0 : STD_LOGIC;
    signal process2_U0_Buff1_im_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal process2_U0_Buff2_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal process2_U0_Buff2_re_ce0 : STD_LOGIC;
    signal process2_U0_Buff2_re_we0 : STD_LOGIC;
    signal process2_U0_Buff2_re_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal process2_U0_Buff2_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal process2_U0_Buff2_im_ce0 : STD_LOGIC;
    signal process2_U0_Buff2_im_we0 : STD_LOGIC;
    signal process2_U0_Buff2_im_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal process2_U0_num_c46_din : STD_LOGIC_VECTOR (31 downto 0);
    signal process2_U0_num_c46_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal load_nfft_value_U0_ap_start : STD_LOGIC;
    signal load_nfft_value_U0_ap_done : STD_LOGIC;
    signal load_nfft_value_U0_ap_continue : STD_LOGIC;
    signal load_nfft_value_U0_ap_idle : STD_LOGIC;
    signal load_nfft_value_U0_ap_ready : STD_LOGIC;
    signal load_nfft_value_U0_start_out : STD_LOGIC;
    signal load_nfft_value_U0_start_write : STD_LOGIC;
    signal load_nfft_value_U0_D1_read : STD_LOGIC;
    signal load_nfft_value_U0_S0_din : STD_LOGIC_VECTOR (63 downto 0);
    signal load_nfft_value_U0_S0_write : STD_LOGIC;
    signal load_nfft_value_U0_numFFT_read : STD_LOGIC;
    signal load_nfft_value_U0_num_c45_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_nfft_value_U0_num_c45_write : STD_LOGIC;
    signal fft_stage_1_U0_ap_start : STD_LOGIC;
    signal fft_stage_1_U0_ap_done : STD_LOGIC;
    signal fft_stage_1_U0_ap_continue : STD_LOGIC;
    signal fft_stage_1_U0_ap_idle : STD_LOGIC;
    signal fft_stage_1_U0_ap_ready : STD_LOGIC;
    signal fft_stage_1_U0_start_out : STD_LOGIC;
    signal fft_stage_1_U0_start_write : STD_LOGIC;
    signal fft_stage_1_U0_S0_read : STD_LOGIC;
    signal fft_stage_1_U0_S1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_1_U0_S1_write : STD_LOGIC;
    signal fft_stage_1_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_1_U0_num_c44_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_1_U0_num_c44_write : STD_LOGIC;
    signal fft_stage_2_U0_ap_start : STD_LOGIC;
    signal fft_stage_2_U0_ap_done : STD_LOGIC;
    signal fft_stage_2_U0_ap_continue : STD_LOGIC;
    signal fft_stage_2_U0_ap_idle : STD_LOGIC;
    signal fft_stage_2_U0_ap_ready : STD_LOGIC;
    signal fft_stage_2_U0_start_out : STD_LOGIC;
    signal fft_stage_2_U0_start_write : STD_LOGIC;
    signal fft_stage_2_U0_S1_read : STD_LOGIC;
    signal fft_stage_2_U0_S2_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_2_U0_S2_write : STD_LOGIC;
    signal fft_stage_2_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_2_U0_num_c43_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_2_U0_num_c43_write : STD_LOGIC;
    signal fft_stage_3_U0_ap_start : STD_LOGIC;
    signal fft_stage_3_U0_ap_done : STD_LOGIC;
    signal fft_stage_3_U0_ap_continue : STD_LOGIC;
    signal fft_stage_3_U0_ap_idle : STD_LOGIC;
    signal fft_stage_3_U0_ap_ready : STD_LOGIC;
    signal fft_stage_3_U0_start_out : STD_LOGIC;
    signal fft_stage_3_U0_start_write : STD_LOGIC;
    signal fft_stage_3_U0_S2_read : STD_LOGIC;
    signal fft_stage_3_U0_S3_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_3_U0_S3_write : STD_LOGIC;
    signal fft_stage_3_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_3_U0_num_c42_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_3_U0_num_c42_write : STD_LOGIC;
    signal fft_stage_4_U0_ap_start : STD_LOGIC;
    signal fft_stage_4_U0_ap_done : STD_LOGIC;
    signal fft_stage_4_U0_ap_continue : STD_LOGIC;
    signal fft_stage_4_U0_ap_idle : STD_LOGIC;
    signal fft_stage_4_U0_ap_ready : STD_LOGIC;
    signal fft_stage_4_U0_start_out : STD_LOGIC;
    signal fft_stage_4_U0_start_write : STD_LOGIC;
    signal fft_stage_4_U0_S3_read : STD_LOGIC;
    signal fft_stage_4_U0_S4_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_4_U0_S4_write : STD_LOGIC;
    signal fft_stage_4_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_4_U0_num_c41_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_4_U0_num_c41_write : STD_LOGIC;
    signal fft_stage_5_U0_ap_start : STD_LOGIC;
    signal fft_stage_5_U0_ap_done : STD_LOGIC;
    signal fft_stage_5_U0_ap_continue : STD_LOGIC;
    signal fft_stage_5_U0_ap_idle : STD_LOGIC;
    signal fft_stage_5_U0_ap_ready : STD_LOGIC;
    signal fft_stage_5_U0_start_out : STD_LOGIC;
    signal fft_stage_5_U0_start_write : STD_LOGIC;
    signal fft_stage_5_U0_S4_read : STD_LOGIC;
    signal fft_stage_5_U0_S5_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_5_U0_S5_write : STD_LOGIC;
    signal fft_stage_5_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_5_U0_num_c40_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_5_U0_num_c40_write : STD_LOGIC;
    signal fft_stage_6_U0_ap_start : STD_LOGIC;
    signal fft_stage_6_U0_ap_done : STD_LOGIC;
    signal fft_stage_6_U0_ap_continue : STD_LOGIC;
    signal fft_stage_6_U0_ap_idle : STD_LOGIC;
    signal fft_stage_6_U0_ap_ready : STD_LOGIC;
    signal fft_stage_6_U0_start_out : STD_LOGIC;
    signal fft_stage_6_U0_start_write : STD_LOGIC;
    signal fft_stage_6_U0_S5_read : STD_LOGIC;
    signal fft_stage_6_U0_S6_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_6_U0_S6_write : STD_LOGIC;
    signal fft_stage_6_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_6_U0_num_c39_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_6_U0_num_c39_write : STD_LOGIC;
    signal fft_stage_7_U0_ap_start : STD_LOGIC;
    signal fft_stage_7_U0_ap_done : STD_LOGIC;
    signal fft_stage_7_U0_ap_continue : STD_LOGIC;
    signal fft_stage_7_U0_ap_idle : STD_LOGIC;
    signal fft_stage_7_U0_ap_ready : STD_LOGIC;
    signal fft_stage_7_U0_start_out : STD_LOGIC;
    signal fft_stage_7_U0_start_write : STD_LOGIC;
    signal fft_stage_7_U0_S6_read : STD_LOGIC;
    signal fft_stage_7_U0_S7_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_7_U0_S7_write : STD_LOGIC;
    signal fft_stage_7_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_7_U0_num_c38_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_7_U0_num_c38_write : STD_LOGIC;
    signal fft_stage_8_U0_ap_start : STD_LOGIC;
    signal fft_stage_8_U0_ap_done : STD_LOGIC;
    signal fft_stage_8_U0_ap_continue : STD_LOGIC;
    signal fft_stage_8_U0_ap_idle : STD_LOGIC;
    signal fft_stage_8_U0_ap_ready : STD_LOGIC;
    signal fft_stage_8_U0_start_out : STD_LOGIC;
    signal fft_stage_8_U0_start_write : STD_LOGIC;
    signal fft_stage_8_U0_S7_read : STD_LOGIC;
    signal fft_stage_8_U0_S8_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_8_U0_S8_write : STD_LOGIC;
    signal fft_stage_8_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_8_U0_num_c37_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_8_U0_num_c37_write : STD_LOGIC;
    signal fft_stage_9_U0_ap_start : STD_LOGIC;
    signal fft_stage_9_U0_ap_done : STD_LOGIC;
    signal fft_stage_9_U0_ap_continue : STD_LOGIC;
    signal fft_stage_9_U0_ap_idle : STD_LOGIC;
    signal fft_stage_9_U0_ap_ready : STD_LOGIC;
    signal fft_stage_9_U0_start_out : STD_LOGIC;
    signal fft_stage_9_U0_start_write : STD_LOGIC;
    signal fft_stage_9_U0_S8_read : STD_LOGIC;
    signal fft_stage_9_U0_S9_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_9_U0_S9_write : STD_LOGIC;
    signal fft_stage_9_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_9_U0_num_c36_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_9_U0_num_c36_write : STD_LOGIC;
    signal fft_stage_10_U0_ap_start : STD_LOGIC;
    signal fft_stage_10_U0_ap_done : STD_LOGIC;
    signal fft_stage_10_U0_ap_continue : STD_LOGIC;
    signal fft_stage_10_U0_ap_idle : STD_LOGIC;
    signal fft_stage_10_U0_ap_ready : STD_LOGIC;
    signal fft_stage_10_U0_S9_read : STD_LOGIC;
    signal fft_stage_10_U0_S10_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_10_U0_S10_write : STD_LOGIC;
    signal fft_stage_10_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_10_U0_num_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_10_U0_num_c_write : STD_LOGIC;
    signal normaling_U0_ap_start : STD_LOGIC;
    signal normaling_U0_ap_done : STD_LOGIC;
    signal normaling_U0_ap_continue : STD_LOGIC;
    signal normaling_U0_ap_idle : STD_LOGIC;
    signal normaling_U0_ap_ready : STD_LOGIC;
    signal normaling_U0_S10_read : STD_LOGIC;
    signal normaling_U0_Spectrumoutput_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal normaling_U0_Spectrumoutput_ce0 : STD_LOGIC;
    signal normaling_U0_Spectrumoutput_we0 : STD_LOGIC;
    signal normaling_U0_Spectrumoutput_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal normaling_U0_Spectrumoutput_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal normaling_U0_Spectrumoutput_ce1 : STD_LOGIC;
    signal normaling_U0_numFFT_read : STD_LOGIC;
    signal D0_full_n : STD_LOGIC;
    signal D0_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal D0_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal D0_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal D0_empty_n : STD_LOGIC;
    signal num_c47_full_n : STD_LOGIC;
    signal num_c47_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c47_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c47_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c47_empty_n : STD_LOGIC;
    signal D1_full_n : STD_LOGIC;
    signal D1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal D1_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal D1_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal D1_empty_n : STD_LOGIC;
    signal num_c46_full_n : STD_LOGIC;
    signal num_c46_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c46_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c46_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c46_empty_n : STD_LOGIC;
    signal S0_full_n : STD_LOGIC;
    signal S0_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S0_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S0_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S0_empty_n : STD_LOGIC;
    signal num_c45_full_n : STD_LOGIC;
    signal num_c45_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c45_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c45_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c45_empty_n : STD_LOGIC;
    signal S1_full_n : STD_LOGIC;
    signal S1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S1_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S1_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S1_empty_n : STD_LOGIC;
    signal num_c44_full_n : STD_LOGIC;
    signal num_c44_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c44_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c44_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c44_empty_n : STD_LOGIC;
    signal S2_full_n : STD_LOGIC;
    signal S2_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S2_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S2_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S2_empty_n : STD_LOGIC;
    signal num_c43_full_n : STD_LOGIC;
    signal num_c43_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c43_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c43_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c43_empty_n : STD_LOGIC;
    signal S3_full_n : STD_LOGIC;
    signal S3_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S3_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S3_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S3_empty_n : STD_LOGIC;
    signal num_c42_full_n : STD_LOGIC;
    signal num_c42_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c42_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c42_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c42_empty_n : STD_LOGIC;
    signal S4_full_n : STD_LOGIC;
    signal S4_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S4_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S4_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S4_empty_n : STD_LOGIC;
    signal num_c41_full_n : STD_LOGIC;
    signal num_c41_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c41_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c41_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c41_empty_n : STD_LOGIC;
    signal S5_full_n : STD_LOGIC;
    signal S5_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S5_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S5_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S5_empty_n : STD_LOGIC;
    signal num_c40_full_n : STD_LOGIC;
    signal num_c40_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c40_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c40_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c40_empty_n : STD_LOGIC;
    signal S6_full_n : STD_LOGIC;
    signal S6_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S6_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S6_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S6_empty_n : STD_LOGIC;
    signal num_c39_full_n : STD_LOGIC;
    signal num_c39_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c39_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c39_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c39_empty_n : STD_LOGIC;
    signal S7_full_n : STD_LOGIC;
    signal S7_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S7_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S7_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S7_empty_n : STD_LOGIC;
    signal num_c38_full_n : STD_LOGIC;
    signal num_c38_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c38_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c38_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c38_empty_n : STD_LOGIC;
    signal S8_full_n : STD_LOGIC;
    signal S8_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S8_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S8_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S8_empty_n : STD_LOGIC;
    signal num_c37_full_n : STD_LOGIC;
    signal num_c37_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c37_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c37_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c37_empty_n : STD_LOGIC;
    signal S9_full_n : STD_LOGIC;
    signal S9_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S9_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S9_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S9_empty_n : STD_LOGIC;
    signal num_c36_full_n : STD_LOGIC;
    signal num_c36_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c36_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c36_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c36_empty_n : STD_LOGIC;
    signal S10_full_n : STD_LOGIC;
    signal S10_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S10_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S10_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S10_empty_n : STD_LOGIC;
    signal num_c_full_n : STD_LOGIC;
    signal num_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_process_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_process_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_process2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_process2_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_normaling_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_normaling_U0_ap_ready : STD_LOGIC;
    signal start_for_load_nfft_value_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_load_nfft_value_U0_full_n : STD_LOGIC;
    signal start_for_load_nfft_value_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_load_nfft_value_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_1_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_1_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_2_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_2_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_3_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_3_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_4_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_4_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_5_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_5_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_5_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_5_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_6_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_6_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_6_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_6_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_7_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_7_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_7_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_7_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_8_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_8_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_8_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_8_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_9_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_9_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_9_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_9_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_10_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_10_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_10_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_10_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Processing_HW_process_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r : IN STD_LOGIC_VECTOR (63 downto 0);
        D0_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        D0_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        D0_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        D0_full_n : IN STD_LOGIC;
        D0_write : OUT STD_LOGIC;
        num : IN STD_LOGIC_VECTOR (31 downto 0);
        num_c47_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c47_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c47_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c47_full_n : IN STD_LOGIC;
        num_c47_write : OUT STD_LOGIC );
    end component;


    component Processing_HW_process2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        D0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        D0_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        D0_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        D0_empty_n : IN STD_LOGIC;
        D0_read : OUT STD_LOGIC;
        D1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        D1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        D1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        D1_full_n : IN STD_LOGIC;
        D1_write : OUT STD_LOGIC;
        num_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        num_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_empty_n : IN STD_LOGIC;
        num_read : OUT STD_LOGIC;
        Buff0_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff0_re_ce0 : OUT STD_LOGIC;
        Buff0_re_we0 : OUT STD_LOGIC;
        Buff0_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff0_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff0_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff0_im_ce0 : OUT STD_LOGIC;
        Buff0_im_we0 : OUT STD_LOGIC;
        Buff0_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff0_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff1_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff1_re_ce0 : OUT STD_LOGIC;
        Buff1_re_we0 : OUT STD_LOGIC;
        Buff1_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff1_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff1_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff1_im_ce0 : OUT STD_LOGIC;
        Buff1_im_we0 : OUT STD_LOGIC;
        Buff1_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff1_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff2_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff2_re_ce0 : OUT STD_LOGIC;
        Buff2_re_we0 : OUT STD_LOGIC;
        Buff2_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff2_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff2_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff2_im_ce0 : OUT STD_LOGIC;
        Buff2_im_we0 : OUT STD_LOGIC;
        Buff2_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff2_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        num_c46_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c46_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c46_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c46_full_n : IN STD_LOGIC;
        num_c46_write : OUT STD_LOGIC );
    end component;


    component Processing_HW_load_nfft_value IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        D1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        D1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        D1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        D1_empty_n : IN STD_LOGIC;
        D1_read : OUT STD_LOGIC;
        S0_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S0_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S0_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S0_full_n : IN STD_LOGIC;
        S0_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c45_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c45_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c45_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c45_full_n : IN STD_LOGIC;
        num_c45_write : OUT STD_LOGIC );
    end component;


    component Processing_HW_fft_stage_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S0_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S0_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S0_empty_n : IN STD_LOGIC;
        S0_read : OUT STD_LOGIC;
        S1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S1_full_n : IN STD_LOGIC;
        S1_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c44_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c44_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c44_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c44_full_n : IN STD_LOGIC;
        num_c44_write : OUT STD_LOGIC );
    end component;


    component Processing_HW_fft_stage_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S1_empty_n : IN STD_LOGIC;
        S1_read : OUT STD_LOGIC;
        S2_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S2_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S2_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S2_full_n : IN STD_LOGIC;
        S2_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c43_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c43_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c43_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c43_full_n : IN STD_LOGIC;
        num_c43_write : OUT STD_LOGIC );
    end component;


    component Processing_HW_fft_stage_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S2_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S2_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S2_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S2_empty_n : IN STD_LOGIC;
        S2_read : OUT STD_LOGIC;
        S3_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S3_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S3_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S3_full_n : IN STD_LOGIC;
        S3_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c42_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c42_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c42_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c42_full_n : IN STD_LOGIC;
        num_c42_write : OUT STD_LOGIC );
    end component;


    component Processing_HW_fft_stage_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S3_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S3_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S3_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S3_empty_n : IN STD_LOGIC;
        S3_read : OUT STD_LOGIC;
        S4_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S4_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S4_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S4_full_n : IN STD_LOGIC;
        S4_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c41_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c41_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c41_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c41_full_n : IN STD_LOGIC;
        num_c41_write : OUT STD_LOGIC );
    end component;


    component Processing_HW_fft_stage_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S4_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S4_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S4_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S4_empty_n : IN STD_LOGIC;
        S4_read : OUT STD_LOGIC;
        S5_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S5_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S5_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S5_full_n : IN STD_LOGIC;
        S5_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c40_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c40_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c40_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c40_full_n : IN STD_LOGIC;
        num_c40_write : OUT STD_LOGIC );
    end component;


    component Processing_HW_fft_stage_6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S5_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S5_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S5_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S5_empty_n : IN STD_LOGIC;
        S5_read : OUT STD_LOGIC;
        S6_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S6_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S6_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S6_full_n : IN STD_LOGIC;
        S6_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c39_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c39_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c39_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c39_full_n : IN STD_LOGIC;
        num_c39_write : OUT STD_LOGIC );
    end component;


    component Processing_HW_fft_stage_7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S6_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S6_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S6_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S6_empty_n : IN STD_LOGIC;
        S6_read : OUT STD_LOGIC;
        S7_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S7_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S7_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S7_full_n : IN STD_LOGIC;
        S7_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c38_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c38_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c38_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c38_full_n : IN STD_LOGIC;
        num_c38_write : OUT STD_LOGIC );
    end component;


    component Processing_HW_fft_stage_8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S7_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S7_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S7_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S7_empty_n : IN STD_LOGIC;
        S7_read : OUT STD_LOGIC;
        S8_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S8_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S8_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S8_full_n : IN STD_LOGIC;
        S8_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c37_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c37_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c37_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c37_full_n : IN STD_LOGIC;
        num_c37_write : OUT STD_LOGIC );
    end component;


    component Processing_HW_fft_stage_9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S8_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S8_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S8_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S8_empty_n : IN STD_LOGIC;
        S8_read : OUT STD_LOGIC;
        S9_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S9_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S9_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S9_full_n : IN STD_LOGIC;
        S9_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c36_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c36_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c36_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c36_full_n : IN STD_LOGIC;
        num_c36_write : OUT STD_LOGIC );
    end component;


    component Processing_HW_fft_stage_10 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        S9_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S9_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S9_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S9_empty_n : IN STD_LOGIC;
        S9_read : OUT STD_LOGIC;
        S10_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S10_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S10_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S10_full_n : IN STD_LOGIC;
        S10_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c_full_n : IN STD_LOGIC;
        num_c_write : OUT STD_LOGIC );
    end component;


    component Processing_HW_normaling IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        S10_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S10_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S10_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S10_empty_n : IN STD_LOGIC;
        S10_read : OUT STD_LOGIC;
        Spectrumoutput_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Spectrumoutput_ce0 : OUT STD_LOGIC;
        Spectrumoutput_we0 : OUT STD_LOGIC;
        Spectrumoutput_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Spectrumoutput_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Spectrumoutput_ce1 : OUT STD_LOGIC;
        Spectrumoutput_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC );
    end component;


    component Processing_HW_fifo_w64_d1024_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Processing_HW_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Processing_HW_start_for_load_nfft_value_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Processing_HW_start_for_fft_stage_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Processing_HW_start_for_fft_stage_2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Processing_HW_start_for_fft_stage_3_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Processing_HW_start_for_fft_stage_4_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Processing_HW_start_for_fft_stage_5_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Processing_HW_start_for_fft_stage_6_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Processing_HW_start_for_fft_stage_7_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Processing_HW_start_for_fft_stage_8_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Processing_HW_start_for_fft_stage_9_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Processing_HW_start_for_fft_stage_10_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    process_U0 : component Processing_HW_process_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => process_U0_ap_start,
        ap_done => process_U0_ap_done,
        ap_continue => process_U0_ap_continue,
        ap_idle => process_U0_ap_idle,
        ap_ready => process_U0_ap_ready,
        m_axi_gmem_AWVALID => process_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => process_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => process_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => process_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => process_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => process_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => process_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => process_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => process_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => process_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => process_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => process_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => process_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => process_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => process_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => process_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => process_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => process_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => process_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => process_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => process_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => process_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => process_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => process_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => process_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => process_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => process_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => process_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => process_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => process_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => process_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => process_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        in_r => in_r,
        D0_din => process_U0_D0_din,
        D0_num_data_valid => D0_num_data_valid,
        D0_fifo_cap => D0_fifo_cap,
        D0_full_n => D0_full_n,
        D0_write => process_U0_D0_write,
        num => num,
        num_c47_din => process_U0_num_c47_din,
        num_c47_num_data_valid => num_c47_num_data_valid,
        num_c47_fifo_cap => num_c47_fifo_cap,
        num_c47_full_n => num_c47_full_n,
        num_c47_write => process_U0_num_c47_write);

    process2_U0 : component Processing_HW_process2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => process2_U0_ap_start,
        start_full_n => start_for_load_nfft_value_U0_full_n,
        ap_done => process2_U0_ap_done,
        ap_continue => process2_U0_ap_continue,
        ap_idle => process2_U0_ap_idle,
        ap_ready => process2_U0_ap_ready,
        start_out => process2_U0_start_out,
        start_write => process2_U0_start_write,
        D0_dout => D0_dout,
        D0_num_data_valid => D0_num_data_valid,
        D0_fifo_cap => D0_fifo_cap,
        D0_empty_n => D0_empty_n,
        D0_read => process2_U0_D0_read,
        D1_din => process2_U0_D1_din,
        D1_num_data_valid => D1_num_data_valid,
        D1_fifo_cap => D1_fifo_cap,
        D1_full_n => D1_full_n,
        D1_write => process2_U0_D1_write,
        num_dout => num_c47_dout,
        num_num_data_valid => num_c47_num_data_valid,
        num_fifo_cap => num_c47_fifo_cap,
        num_empty_n => num_c47_empty_n,
        num_read => process2_U0_num_read,
        Buff0_re_address0 => process2_U0_Buff0_re_address0,
        Buff0_re_ce0 => process2_U0_Buff0_re_ce0,
        Buff0_re_we0 => process2_U0_Buff0_re_we0,
        Buff0_re_d0 => process2_U0_Buff0_re_d0,
        Buff0_re_q0 => Buff0_re_q0,
        Buff0_im_address0 => process2_U0_Buff0_im_address0,
        Buff0_im_ce0 => process2_U0_Buff0_im_ce0,
        Buff0_im_we0 => process2_U0_Buff0_im_we0,
        Buff0_im_d0 => process2_U0_Buff0_im_d0,
        Buff0_im_q0 => Buff0_im_q0,
        Buff1_re_address0 => process2_U0_Buff1_re_address0,
        Buff1_re_ce0 => process2_U0_Buff1_re_ce0,
        Buff1_re_we0 => process2_U0_Buff1_re_we0,
        Buff1_re_d0 => process2_U0_Buff1_re_d0,
        Buff1_re_q0 => Buff1_re_q0,
        Buff1_im_address0 => process2_U0_Buff1_im_address0,
        Buff1_im_ce0 => process2_U0_Buff1_im_ce0,
        Buff1_im_we0 => process2_U0_Buff1_im_we0,
        Buff1_im_d0 => process2_U0_Buff1_im_d0,
        Buff1_im_q0 => Buff1_im_q0,
        Buff2_re_address0 => process2_U0_Buff2_re_address0,
        Buff2_re_ce0 => process2_U0_Buff2_re_ce0,
        Buff2_re_we0 => process2_U0_Buff2_re_we0,
        Buff2_re_d0 => process2_U0_Buff2_re_d0,
        Buff2_re_q0 => Buff2_re_q0,
        Buff2_im_address0 => process2_U0_Buff2_im_address0,
        Buff2_im_ce0 => process2_U0_Buff2_im_ce0,
        Buff2_im_we0 => process2_U0_Buff2_im_we0,
        Buff2_im_d0 => process2_U0_Buff2_im_d0,
        Buff2_im_q0 => Buff2_im_q0,
        num_c46_din => process2_U0_num_c46_din,
        num_c46_num_data_valid => num_c46_num_data_valid,
        num_c46_fifo_cap => num_c46_fifo_cap,
        num_c46_full_n => num_c46_full_n,
        num_c46_write => process2_U0_num_c46_write);

    load_nfft_value_U0 : component Processing_HW_load_nfft_value
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load_nfft_value_U0_ap_start,
        start_full_n => start_for_fft_stage_1_U0_full_n,
        ap_done => load_nfft_value_U0_ap_done,
        ap_continue => load_nfft_value_U0_ap_continue,
        ap_idle => load_nfft_value_U0_ap_idle,
        ap_ready => load_nfft_value_U0_ap_ready,
        start_out => load_nfft_value_U0_start_out,
        start_write => load_nfft_value_U0_start_write,
        D1_dout => D1_dout,
        D1_num_data_valid => D1_num_data_valid,
        D1_fifo_cap => D1_fifo_cap,
        D1_empty_n => D1_empty_n,
        D1_read => load_nfft_value_U0_D1_read,
        S0_din => load_nfft_value_U0_S0_din,
        S0_num_data_valid => S0_num_data_valid,
        S0_fifo_cap => S0_fifo_cap,
        S0_full_n => S0_full_n,
        S0_write => load_nfft_value_U0_S0_write,
        numFFT_dout => num_c46_dout,
        numFFT_num_data_valid => num_c46_num_data_valid,
        numFFT_fifo_cap => num_c46_fifo_cap,
        numFFT_empty_n => num_c46_empty_n,
        numFFT_read => load_nfft_value_U0_numFFT_read,
        num_c45_din => load_nfft_value_U0_num_c45_din,
        num_c45_num_data_valid => num_c45_num_data_valid,
        num_c45_fifo_cap => num_c45_fifo_cap,
        num_c45_full_n => num_c45_full_n,
        num_c45_write => load_nfft_value_U0_num_c45_write);

    fft_stage_1_U0 : component Processing_HW_fft_stage_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_1_U0_ap_start,
        start_full_n => start_for_fft_stage_2_U0_full_n,
        ap_done => fft_stage_1_U0_ap_done,
        ap_continue => fft_stage_1_U0_ap_continue,
        ap_idle => fft_stage_1_U0_ap_idle,
        ap_ready => fft_stage_1_U0_ap_ready,
        start_out => fft_stage_1_U0_start_out,
        start_write => fft_stage_1_U0_start_write,
        S0_dout => S0_dout,
        S0_num_data_valid => S0_num_data_valid,
        S0_fifo_cap => S0_fifo_cap,
        S0_empty_n => S0_empty_n,
        S0_read => fft_stage_1_U0_S0_read,
        S1_din => fft_stage_1_U0_S1_din,
        S1_num_data_valid => S1_num_data_valid,
        S1_fifo_cap => S1_fifo_cap,
        S1_full_n => S1_full_n,
        S1_write => fft_stage_1_U0_S1_write,
        numFFT_dout => num_c45_dout,
        numFFT_num_data_valid => num_c45_num_data_valid,
        numFFT_fifo_cap => num_c45_fifo_cap,
        numFFT_empty_n => num_c45_empty_n,
        numFFT_read => fft_stage_1_U0_numFFT_read,
        num_c44_din => fft_stage_1_U0_num_c44_din,
        num_c44_num_data_valid => num_c44_num_data_valid,
        num_c44_fifo_cap => num_c44_fifo_cap,
        num_c44_full_n => num_c44_full_n,
        num_c44_write => fft_stage_1_U0_num_c44_write);

    fft_stage_2_U0 : component Processing_HW_fft_stage_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_2_U0_ap_start,
        start_full_n => start_for_fft_stage_3_U0_full_n,
        ap_done => fft_stage_2_U0_ap_done,
        ap_continue => fft_stage_2_U0_ap_continue,
        ap_idle => fft_stage_2_U0_ap_idle,
        ap_ready => fft_stage_2_U0_ap_ready,
        start_out => fft_stage_2_U0_start_out,
        start_write => fft_stage_2_U0_start_write,
        S1_dout => S1_dout,
        S1_num_data_valid => S1_num_data_valid,
        S1_fifo_cap => S1_fifo_cap,
        S1_empty_n => S1_empty_n,
        S1_read => fft_stage_2_U0_S1_read,
        S2_din => fft_stage_2_U0_S2_din,
        S2_num_data_valid => S2_num_data_valid,
        S2_fifo_cap => S2_fifo_cap,
        S2_full_n => S2_full_n,
        S2_write => fft_stage_2_U0_S2_write,
        numFFT_dout => num_c44_dout,
        numFFT_num_data_valid => num_c44_num_data_valid,
        numFFT_fifo_cap => num_c44_fifo_cap,
        numFFT_empty_n => num_c44_empty_n,
        numFFT_read => fft_stage_2_U0_numFFT_read,
        num_c43_din => fft_stage_2_U0_num_c43_din,
        num_c43_num_data_valid => num_c43_num_data_valid,
        num_c43_fifo_cap => num_c43_fifo_cap,
        num_c43_full_n => num_c43_full_n,
        num_c43_write => fft_stage_2_U0_num_c43_write);

    fft_stage_3_U0 : component Processing_HW_fft_stage_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_3_U0_ap_start,
        start_full_n => start_for_fft_stage_4_U0_full_n,
        ap_done => fft_stage_3_U0_ap_done,
        ap_continue => fft_stage_3_U0_ap_continue,
        ap_idle => fft_stage_3_U0_ap_idle,
        ap_ready => fft_stage_3_U0_ap_ready,
        start_out => fft_stage_3_U0_start_out,
        start_write => fft_stage_3_U0_start_write,
        S2_dout => S2_dout,
        S2_num_data_valid => S2_num_data_valid,
        S2_fifo_cap => S2_fifo_cap,
        S2_empty_n => S2_empty_n,
        S2_read => fft_stage_3_U0_S2_read,
        S3_din => fft_stage_3_U0_S3_din,
        S3_num_data_valid => S3_num_data_valid,
        S3_fifo_cap => S3_fifo_cap,
        S3_full_n => S3_full_n,
        S3_write => fft_stage_3_U0_S3_write,
        numFFT_dout => num_c43_dout,
        numFFT_num_data_valid => num_c43_num_data_valid,
        numFFT_fifo_cap => num_c43_fifo_cap,
        numFFT_empty_n => num_c43_empty_n,
        numFFT_read => fft_stage_3_U0_numFFT_read,
        num_c42_din => fft_stage_3_U0_num_c42_din,
        num_c42_num_data_valid => num_c42_num_data_valid,
        num_c42_fifo_cap => num_c42_fifo_cap,
        num_c42_full_n => num_c42_full_n,
        num_c42_write => fft_stage_3_U0_num_c42_write);

    fft_stage_4_U0 : component Processing_HW_fft_stage_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_4_U0_ap_start,
        start_full_n => start_for_fft_stage_5_U0_full_n,
        ap_done => fft_stage_4_U0_ap_done,
        ap_continue => fft_stage_4_U0_ap_continue,
        ap_idle => fft_stage_4_U0_ap_idle,
        ap_ready => fft_stage_4_U0_ap_ready,
        start_out => fft_stage_4_U0_start_out,
        start_write => fft_stage_4_U0_start_write,
        S3_dout => S3_dout,
        S3_num_data_valid => S3_num_data_valid,
        S3_fifo_cap => S3_fifo_cap,
        S3_empty_n => S3_empty_n,
        S3_read => fft_stage_4_U0_S3_read,
        S4_din => fft_stage_4_U0_S4_din,
        S4_num_data_valid => S4_num_data_valid,
        S4_fifo_cap => S4_fifo_cap,
        S4_full_n => S4_full_n,
        S4_write => fft_stage_4_U0_S4_write,
        numFFT_dout => num_c42_dout,
        numFFT_num_data_valid => num_c42_num_data_valid,
        numFFT_fifo_cap => num_c42_fifo_cap,
        numFFT_empty_n => num_c42_empty_n,
        numFFT_read => fft_stage_4_U0_numFFT_read,
        num_c41_din => fft_stage_4_U0_num_c41_din,
        num_c41_num_data_valid => num_c41_num_data_valid,
        num_c41_fifo_cap => num_c41_fifo_cap,
        num_c41_full_n => num_c41_full_n,
        num_c41_write => fft_stage_4_U0_num_c41_write);

    fft_stage_5_U0 : component Processing_HW_fft_stage_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_5_U0_ap_start,
        start_full_n => start_for_fft_stage_6_U0_full_n,
        ap_done => fft_stage_5_U0_ap_done,
        ap_continue => fft_stage_5_U0_ap_continue,
        ap_idle => fft_stage_5_U0_ap_idle,
        ap_ready => fft_stage_5_U0_ap_ready,
        start_out => fft_stage_5_U0_start_out,
        start_write => fft_stage_5_U0_start_write,
        S4_dout => S4_dout,
        S4_num_data_valid => S4_num_data_valid,
        S4_fifo_cap => S4_fifo_cap,
        S4_empty_n => S4_empty_n,
        S4_read => fft_stage_5_U0_S4_read,
        S5_din => fft_stage_5_U0_S5_din,
        S5_num_data_valid => S5_num_data_valid,
        S5_fifo_cap => S5_fifo_cap,
        S5_full_n => S5_full_n,
        S5_write => fft_stage_5_U0_S5_write,
        numFFT_dout => num_c41_dout,
        numFFT_num_data_valid => num_c41_num_data_valid,
        numFFT_fifo_cap => num_c41_fifo_cap,
        numFFT_empty_n => num_c41_empty_n,
        numFFT_read => fft_stage_5_U0_numFFT_read,
        num_c40_din => fft_stage_5_U0_num_c40_din,
        num_c40_num_data_valid => num_c40_num_data_valid,
        num_c40_fifo_cap => num_c40_fifo_cap,
        num_c40_full_n => num_c40_full_n,
        num_c40_write => fft_stage_5_U0_num_c40_write);

    fft_stage_6_U0 : component Processing_HW_fft_stage_6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_6_U0_ap_start,
        start_full_n => start_for_fft_stage_7_U0_full_n,
        ap_done => fft_stage_6_U0_ap_done,
        ap_continue => fft_stage_6_U0_ap_continue,
        ap_idle => fft_stage_6_U0_ap_idle,
        ap_ready => fft_stage_6_U0_ap_ready,
        start_out => fft_stage_6_U0_start_out,
        start_write => fft_stage_6_U0_start_write,
        S5_dout => S5_dout,
        S5_num_data_valid => S5_num_data_valid,
        S5_fifo_cap => S5_fifo_cap,
        S5_empty_n => S5_empty_n,
        S5_read => fft_stage_6_U0_S5_read,
        S6_din => fft_stage_6_U0_S6_din,
        S6_num_data_valid => S6_num_data_valid,
        S6_fifo_cap => S6_fifo_cap,
        S6_full_n => S6_full_n,
        S6_write => fft_stage_6_U0_S6_write,
        numFFT_dout => num_c40_dout,
        numFFT_num_data_valid => num_c40_num_data_valid,
        numFFT_fifo_cap => num_c40_fifo_cap,
        numFFT_empty_n => num_c40_empty_n,
        numFFT_read => fft_stage_6_U0_numFFT_read,
        num_c39_din => fft_stage_6_U0_num_c39_din,
        num_c39_num_data_valid => num_c39_num_data_valid,
        num_c39_fifo_cap => num_c39_fifo_cap,
        num_c39_full_n => num_c39_full_n,
        num_c39_write => fft_stage_6_U0_num_c39_write);

    fft_stage_7_U0 : component Processing_HW_fft_stage_7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_7_U0_ap_start,
        start_full_n => start_for_fft_stage_8_U0_full_n,
        ap_done => fft_stage_7_U0_ap_done,
        ap_continue => fft_stage_7_U0_ap_continue,
        ap_idle => fft_stage_7_U0_ap_idle,
        ap_ready => fft_stage_7_U0_ap_ready,
        start_out => fft_stage_7_U0_start_out,
        start_write => fft_stage_7_U0_start_write,
        S6_dout => S6_dout,
        S6_num_data_valid => S6_num_data_valid,
        S6_fifo_cap => S6_fifo_cap,
        S6_empty_n => S6_empty_n,
        S6_read => fft_stage_7_U0_S6_read,
        S7_din => fft_stage_7_U0_S7_din,
        S7_num_data_valid => S7_num_data_valid,
        S7_fifo_cap => S7_fifo_cap,
        S7_full_n => S7_full_n,
        S7_write => fft_stage_7_U0_S7_write,
        numFFT_dout => num_c39_dout,
        numFFT_num_data_valid => num_c39_num_data_valid,
        numFFT_fifo_cap => num_c39_fifo_cap,
        numFFT_empty_n => num_c39_empty_n,
        numFFT_read => fft_stage_7_U0_numFFT_read,
        num_c38_din => fft_stage_7_U0_num_c38_din,
        num_c38_num_data_valid => num_c38_num_data_valid,
        num_c38_fifo_cap => num_c38_fifo_cap,
        num_c38_full_n => num_c38_full_n,
        num_c38_write => fft_stage_7_U0_num_c38_write);

    fft_stage_8_U0 : component Processing_HW_fft_stage_8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_8_U0_ap_start,
        start_full_n => start_for_fft_stage_9_U0_full_n,
        ap_done => fft_stage_8_U0_ap_done,
        ap_continue => fft_stage_8_U0_ap_continue,
        ap_idle => fft_stage_8_U0_ap_idle,
        ap_ready => fft_stage_8_U0_ap_ready,
        start_out => fft_stage_8_U0_start_out,
        start_write => fft_stage_8_U0_start_write,
        S7_dout => S7_dout,
        S7_num_data_valid => S7_num_data_valid,
        S7_fifo_cap => S7_fifo_cap,
        S7_empty_n => S7_empty_n,
        S7_read => fft_stage_8_U0_S7_read,
        S8_din => fft_stage_8_U0_S8_din,
        S8_num_data_valid => S8_num_data_valid,
        S8_fifo_cap => S8_fifo_cap,
        S8_full_n => S8_full_n,
        S8_write => fft_stage_8_U0_S8_write,
        numFFT_dout => num_c38_dout,
        numFFT_num_data_valid => num_c38_num_data_valid,
        numFFT_fifo_cap => num_c38_fifo_cap,
        numFFT_empty_n => num_c38_empty_n,
        numFFT_read => fft_stage_8_U0_numFFT_read,
        num_c37_din => fft_stage_8_U0_num_c37_din,
        num_c37_num_data_valid => num_c37_num_data_valid,
        num_c37_fifo_cap => num_c37_fifo_cap,
        num_c37_full_n => num_c37_full_n,
        num_c37_write => fft_stage_8_U0_num_c37_write);

    fft_stage_9_U0 : component Processing_HW_fft_stage_9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_9_U0_ap_start,
        start_full_n => start_for_fft_stage_10_U0_full_n,
        ap_done => fft_stage_9_U0_ap_done,
        ap_continue => fft_stage_9_U0_ap_continue,
        ap_idle => fft_stage_9_U0_ap_idle,
        ap_ready => fft_stage_9_U0_ap_ready,
        start_out => fft_stage_9_U0_start_out,
        start_write => fft_stage_9_U0_start_write,
        S8_dout => S8_dout,
        S8_num_data_valid => S8_num_data_valid,
        S8_fifo_cap => S8_fifo_cap,
        S8_empty_n => S8_empty_n,
        S8_read => fft_stage_9_U0_S8_read,
        S9_din => fft_stage_9_U0_S9_din,
        S9_num_data_valid => S9_num_data_valid,
        S9_fifo_cap => S9_fifo_cap,
        S9_full_n => S9_full_n,
        S9_write => fft_stage_9_U0_S9_write,
        numFFT_dout => num_c37_dout,
        numFFT_num_data_valid => num_c37_num_data_valid,
        numFFT_fifo_cap => num_c37_fifo_cap,
        numFFT_empty_n => num_c37_empty_n,
        numFFT_read => fft_stage_9_U0_numFFT_read,
        num_c36_din => fft_stage_9_U0_num_c36_din,
        num_c36_num_data_valid => num_c36_num_data_valid,
        num_c36_fifo_cap => num_c36_fifo_cap,
        num_c36_full_n => num_c36_full_n,
        num_c36_write => fft_stage_9_U0_num_c36_write);

    fft_stage_10_U0 : component Processing_HW_fft_stage_10
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_10_U0_ap_start,
        ap_done => fft_stage_10_U0_ap_done,
        ap_continue => fft_stage_10_U0_ap_continue,
        ap_idle => fft_stage_10_U0_ap_idle,
        ap_ready => fft_stage_10_U0_ap_ready,
        S9_dout => S9_dout,
        S9_num_data_valid => S9_num_data_valid,
        S9_fifo_cap => S9_fifo_cap,
        S9_empty_n => S9_empty_n,
        S9_read => fft_stage_10_U0_S9_read,
        S10_din => fft_stage_10_U0_S10_din,
        S10_num_data_valid => S10_num_data_valid,
        S10_fifo_cap => S10_fifo_cap,
        S10_full_n => S10_full_n,
        S10_write => fft_stage_10_U0_S10_write,
        numFFT_dout => num_c36_dout,
        numFFT_num_data_valid => num_c36_num_data_valid,
        numFFT_fifo_cap => num_c36_fifo_cap,
        numFFT_empty_n => num_c36_empty_n,
        numFFT_read => fft_stage_10_U0_numFFT_read,
        num_c_din => fft_stage_10_U0_num_c_din,
        num_c_num_data_valid => num_c_num_data_valid,
        num_c_fifo_cap => num_c_fifo_cap,
        num_c_full_n => num_c_full_n,
        num_c_write => fft_stage_10_U0_num_c_write);

    normaling_U0 : component Processing_HW_normaling
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => normaling_U0_ap_start,
        ap_done => normaling_U0_ap_done,
        ap_continue => normaling_U0_ap_continue,
        ap_idle => normaling_U0_ap_idle,
        ap_ready => normaling_U0_ap_ready,
        S10_dout => S10_dout,
        S10_num_data_valid => S10_num_data_valid,
        S10_fifo_cap => S10_fifo_cap,
        S10_empty_n => S10_empty_n,
        S10_read => normaling_U0_S10_read,
        Spectrumoutput_address0 => normaling_U0_Spectrumoutput_address0,
        Spectrumoutput_ce0 => normaling_U0_Spectrumoutput_ce0,
        Spectrumoutput_we0 => normaling_U0_Spectrumoutput_we0,
        Spectrumoutput_d0 => normaling_U0_Spectrumoutput_d0,
        Spectrumoutput_address1 => normaling_U0_Spectrumoutput_address1,
        Spectrumoutput_ce1 => normaling_U0_Spectrumoutput_ce1,
        Spectrumoutput_q1 => Spectrumoutput_q1,
        numFFT_dout => num_c_dout,
        numFFT_num_data_valid => num_c_num_data_valid,
        numFFT_fifo_cap => num_c_fifo_cap,
        numFFT_empty_n => num_c_empty_n,
        numFFT_read => normaling_U0_numFFT_read);

    D0_U : component Processing_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => process_U0_D0_din,
        if_full_n => D0_full_n,
        if_write => process_U0_D0_write,
        if_dout => D0_dout,
        if_num_data_valid => D0_num_data_valid,
        if_fifo_cap => D0_fifo_cap,
        if_empty_n => D0_empty_n,
        if_read => process2_U0_D0_read);

    num_c47_U : component Processing_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => process_U0_num_c47_din,
        if_full_n => num_c47_full_n,
        if_write => process_U0_num_c47_write,
        if_dout => num_c47_dout,
        if_num_data_valid => num_c47_num_data_valid,
        if_fifo_cap => num_c47_fifo_cap,
        if_empty_n => num_c47_empty_n,
        if_read => process2_U0_num_read);

    D1_U : component Processing_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => process2_U0_D1_din,
        if_full_n => D1_full_n,
        if_write => process2_U0_D1_write,
        if_dout => D1_dout,
        if_num_data_valid => D1_num_data_valid,
        if_fifo_cap => D1_fifo_cap,
        if_empty_n => D1_empty_n,
        if_read => load_nfft_value_U0_D1_read);

    num_c46_U : component Processing_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => process2_U0_num_c46_din,
        if_full_n => num_c46_full_n,
        if_write => process2_U0_num_c46_write,
        if_dout => num_c46_dout,
        if_num_data_valid => num_c46_num_data_valid,
        if_fifo_cap => num_c46_fifo_cap,
        if_empty_n => num_c46_empty_n,
        if_read => load_nfft_value_U0_numFFT_read);

    S0_U : component Processing_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_nfft_value_U0_S0_din,
        if_full_n => S0_full_n,
        if_write => load_nfft_value_U0_S0_write,
        if_dout => S0_dout,
        if_num_data_valid => S0_num_data_valid,
        if_fifo_cap => S0_fifo_cap,
        if_empty_n => S0_empty_n,
        if_read => fft_stage_1_U0_S0_read);

    num_c45_U : component Processing_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_nfft_value_U0_num_c45_din,
        if_full_n => num_c45_full_n,
        if_write => load_nfft_value_U0_num_c45_write,
        if_dout => num_c45_dout,
        if_num_data_valid => num_c45_num_data_valid,
        if_fifo_cap => num_c45_fifo_cap,
        if_empty_n => num_c45_empty_n,
        if_read => fft_stage_1_U0_numFFT_read);

    S1_U : component Processing_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_1_U0_S1_din,
        if_full_n => S1_full_n,
        if_write => fft_stage_1_U0_S1_write,
        if_dout => S1_dout,
        if_num_data_valid => S1_num_data_valid,
        if_fifo_cap => S1_fifo_cap,
        if_empty_n => S1_empty_n,
        if_read => fft_stage_2_U0_S1_read);

    num_c44_U : component Processing_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_1_U0_num_c44_din,
        if_full_n => num_c44_full_n,
        if_write => fft_stage_1_U0_num_c44_write,
        if_dout => num_c44_dout,
        if_num_data_valid => num_c44_num_data_valid,
        if_fifo_cap => num_c44_fifo_cap,
        if_empty_n => num_c44_empty_n,
        if_read => fft_stage_2_U0_numFFT_read);

    S2_U : component Processing_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_2_U0_S2_din,
        if_full_n => S2_full_n,
        if_write => fft_stage_2_U0_S2_write,
        if_dout => S2_dout,
        if_num_data_valid => S2_num_data_valid,
        if_fifo_cap => S2_fifo_cap,
        if_empty_n => S2_empty_n,
        if_read => fft_stage_3_U0_S2_read);

    num_c43_U : component Processing_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_2_U0_num_c43_din,
        if_full_n => num_c43_full_n,
        if_write => fft_stage_2_U0_num_c43_write,
        if_dout => num_c43_dout,
        if_num_data_valid => num_c43_num_data_valid,
        if_fifo_cap => num_c43_fifo_cap,
        if_empty_n => num_c43_empty_n,
        if_read => fft_stage_3_U0_numFFT_read);

    S3_U : component Processing_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_3_U0_S3_din,
        if_full_n => S3_full_n,
        if_write => fft_stage_3_U0_S3_write,
        if_dout => S3_dout,
        if_num_data_valid => S3_num_data_valid,
        if_fifo_cap => S3_fifo_cap,
        if_empty_n => S3_empty_n,
        if_read => fft_stage_4_U0_S3_read);

    num_c42_U : component Processing_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_3_U0_num_c42_din,
        if_full_n => num_c42_full_n,
        if_write => fft_stage_3_U0_num_c42_write,
        if_dout => num_c42_dout,
        if_num_data_valid => num_c42_num_data_valid,
        if_fifo_cap => num_c42_fifo_cap,
        if_empty_n => num_c42_empty_n,
        if_read => fft_stage_4_U0_numFFT_read);

    S4_U : component Processing_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_4_U0_S4_din,
        if_full_n => S4_full_n,
        if_write => fft_stage_4_U0_S4_write,
        if_dout => S4_dout,
        if_num_data_valid => S4_num_data_valid,
        if_fifo_cap => S4_fifo_cap,
        if_empty_n => S4_empty_n,
        if_read => fft_stage_5_U0_S4_read);

    num_c41_U : component Processing_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_4_U0_num_c41_din,
        if_full_n => num_c41_full_n,
        if_write => fft_stage_4_U0_num_c41_write,
        if_dout => num_c41_dout,
        if_num_data_valid => num_c41_num_data_valid,
        if_fifo_cap => num_c41_fifo_cap,
        if_empty_n => num_c41_empty_n,
        if_read => fft_stage_5_U0_numFFT_read);

    S5_U : component Processing_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_5_U0_S5_din,
        if_full_n => S5_full_n,
        if_write => fft_stage_5_U0_S5_write,
        if_dout => S5_dout,
        if_num_data_valid => S5_num_data_valid,
        if_fifo_cap => S5_fifo_cap,
        if_empty_n => S5_empty_n,
        if_read => fft_stage_6_U0_S5_read);

    num_c40_U : component Processing_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_5_U0_num_c40_din,
        if_full_n => num_c40_full_n,
        if_write => fft_stage_5_U0_num_c40_write,
        if_dout => num_c40_dout,
        if_num_data_valid => num_c40_num_data_valid,
        if_fifo_cap => num_c40_fifo_cap,
        if_empty_n => num_c40_empty_n,
        if_read => fft_stage_6_U0_numFFT_read);

    S6_U : component Processing_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_6_U0_S6_din,
        if_full_n => S6_full_n,
        if_write => fft_stage_6_U0_S6_write,
        if_dout => S6_dout,
        if_num_data_valid => S6_num_data_valid,
        if_fifo_cap => S6_fifo_cap,
        if_empty_n => S6_empty_n,
        if_read => fft_stage_7_U0_S6_read);

    num_c39_U : component Processing_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_6_U0_num_c39_din,
        if_full_n => num_c39_full_n,
        if_write => fft_stage_6_U0_num_c39_write,
        if_dout => num_c39_dout,
        if_num_data_valid => num_c39_num_data_valid,
        if_fifo_cap => num_c39_fifo_cap,
        if_empty_n => num_c39_empty_n,
        if_read => fft_stage_7_U0_numFFT_read);

    S7_U : component Processing_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_7_U0_S7_din,
        if_full_n => S7_full_n,
        if_write => fft_stage_7_U0_S7_write,
        if_dout => S7_dout,
        if_num_data_valid => S7_num_data_valid,
        if_fifo_cap => S7_fifo_cap,
        if_empty_n => S7_empty_n,
        if_read => fft_stage_8_U0_S7_read);

    num_c38_U : component Processing_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_7_U0_num_c38_din,
        if_full_n => num_c38_full_n,
        if_write => fft_stage_7_U0_num_c38_write,
        if_dout => num_c38_dout,
        if_num_data_valid => num_c38_num_data_valid,
        if_fifo_cap => num_c38_fifo_cap,
        if_empty_n => num_c38_empty_n,
        if_read => fft_stage_8_U0_numFFT_read);

    S8_U : component Processing_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_8_U0_S8_din,
        if_full_n => S8_full_n,
        if_write => fft_stage_8_U0_S8_write,
        if_dout => S8_dout,
        if_num_data_valid => S8_num_data_valid,
        if_fifo_cap => S8_fifo_cap,
        if_empty_n => S8_empty_n,
        if_read => fft_stage_9_U0_S8_read);

    num_c37_U : component Processing_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_8_U0_num_c37_din,
        if_full_n => num_c37_full_n,
        if_write => fft_stage_8_U0_num_c37_write,
        if_dout => num_c37_dout,
        if_num_data_valid => num_c37_num_data_valid,
        if_fifo_cap => num_c37_fifo_cap,
        if_empty_n => num_c37_empty_n,
        if_read => fft_stage_9_U0_numFFT_read);

    S9_U : component Processing_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_9_U0_S9_din,
        if_full_n => S9_full_n,
        if_write => fft_stage_9_U0_S9_write,
        if_dout => S9_dout,
        if_num_data_valid => S9_num_data_valid,
        if_fifo_cap => S9_fifo_cap,
        if_empty_n => S9_empty_n,
        if_read => fft_stage_10_U0_S9_read);

    num_c36_U : component Processing_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_9_U0_num_c36_din,
        if_full_n => num_c36_full_n,
        if_write => fft_stage_9_U0_num_c36_write,
        if_dout => num_c36_dout,
        if_num_data_valid => num_c36_num_data_valid,
        if_fifo_cap => num_c36_fifo_cap,
        if_empty_n => num_c36_empty_n,
        if_read => fft_stage_10_U0_numFFT_read);

    S10_U : component Processing_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_10_U0_S10_din,
        if_full_n => S10_full_n,
        if_write => fft_stage_10_U0_S10_write,
        if_dout => S10_dout,
        if_num_data_valid => S10_num_data_valid,
        if_fifo_cap => S10_fifo_cap,
        if_empty_n => S10_empty_n,
        if_read => normaling_U0_S10_read);

    num_c_U : component Processing_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_10_U0_num_c_din,
        if_full_n => num_c_full_n,
        if_write => fft_stage_10_U0_num_c_write,
        if_dout => num_c_dout,
        if_num_data_valid => num_c_num_data_valid,
        if_fifo_cap => num_c_fifo_cap,
        if_empty_n => num_c_empty_n,
        if_read => normaling_U0_numFFT_read);

    start_for_load_nfft_value_U0_U : component Processing_HW_start_for_load_nfft_value_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_load_nfft_value_U0_din,
        if_full_n => start_for_load_nfft_value_U0_full_n,
        if_write => process2_U0_start_write,
        if_dout => start_for_load_nfft_value_U0_dout,
        if_empty_n => start_for_load_nfft_value_U0_empty_n,
        if_read => load_nfft_value_U0_ap_ready);

    start_for_fft_stage_1_U0_U : component Processing_HW_start_for_fft_stage_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_1_U0_din,
        if_full_n => start_for_fft_stage_1_U0_full_n,
        if_write => load_nfft_value_U0_start_write,
        if_dout => start_for_fft_stage_1_U0_dout,
        if_empty_n => start_for_fft_stage_1_U0_empty_n,
        if_read => fft_stage_1_U0_ap_ready);

    start_for_fft_stage_2_U0_U : component Processing_HW_start_for_fft_stage_2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_2_U0_din,
        if_full_n => start_for_fft_stage_2_U0_full_n,
        if_write => fft_stage_1_U0_start_write,
        if_dout => start_for_fft_stage_2_U0_dout,
        if_empty_n => start_for_fft_stage_2_U0_empty_n,
        if_read => fft_stage_2_U0_ap_ready);

    start_for_fft_stage_3_U0_U : component Processing_HW_start_for_fft_stage_3_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_3_U0_din,
        if_full_n => start_for_fft_stage_3_U0_full_n,
        if_write => fft_stage_2_U0_start_write,
        if_dout => start_for_fft_stage_3_U0_dout,
        if_empty_n => start_for_fft_stage_3_U0_empty_n,
        if_read => fft_stage_3_U0_ap_ready);

    start_for_fft_stage_4_U0_U : component Processing_HW_start_for_fft_stage_4_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_4_U0_din,
        if_full_n => start_for_fft_stage_4_U0_full_n,
        if_write => fft_stage_3_U0_start_write,
        if_dout => start_for_fft_stage_4_U0_dout,
        if_empty_n => start_for_fft_stage_4_U0_empty_n,
        if_read => fft_stage_4_U0_ap_ready);

    start_for_fft_stage_5_U0_U : component Processing_HW_start_for_fft_stage_5_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_5_U0_din,
        if_full_n => start_for_fft_stage_5_U0_full_n,
        if_write => fft_stage_4_U0_start_write,
        if_dout => start_for_fft_stage_5_U0_dout,
        if_empty_n => start_for_fft_stage_5_U0_empty_n,
        if_read => fft_stage_5_U0_ap_ready);

    start_for_fft_stage_6_U0_U : component Processing_HW_start_for_fft_stage_6_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_6_U0_din,
        if_full_n => start_for_fft_stage_6_U0_full_n,
        if_write => fft_stage_5_U0_start_write,
        if_dout => start_for_fft_stage_6_U0_dout,
        if_empty_n => start_for_fft_stage_6_U0_empty_n,
        if_read => fft_stage_6_U0_ap_ready);

    start_for_fft_stage_7_U0_U : component Processing_HW_start_for_fft_stage_7_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_7_U0_din,
        if_full_n => start_for_fft_stage_7_U0_full_n,
        if_write => fft_stage_6_U0_start_write,
        if_dout => start_for_fft_stage_7_U0_dout,
        if_empty_n => start_for_fft_stage_7_U0_empty_n,
        if_read => fft_stage_7_U0_ap_ready);

    start_for_fft_stage_8_U0_U : component Processing_HW_start_for_fft_stage_8_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_8_U0_din,
        if_full_n => start_for_fft_stage_8_U0_full_n,
        if_write => fft_stage_7_U0_start_write,
        if_dout => start_for_fft_stage_8_U0_dout,
        if_empty_n => start_for_fft_stage_8_U0_empty_n,
        if_read => fft_stage_8_U0_ap_ready);

    start_for_fft_stage_9_U0_U : component Processing_HW_start_for_fft_stage_9_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_9_U0_din,
        if_full_n => start_for_fft_stage_9_U0_full_n,
        if_write => fft_stage_8_U0_start_write,
        if_dout => start_for_fft_stage_9_U0_dout,
        if_empty_n => start_for_fft_stage_9_U0_empty_n,
        if_read => fft_stage_9_U0_ap_ready);

    start_for_fft_stage_10_U0_U : component Processing_HW_start_for_fft_stage_10_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_10_U0_din,
        if_full_n => start_for_fft_stage_10_U0_full_n,
        if_write => fft_stage_9_U0_start_write,
        if_dout => start_for_fft_stage_10_U0_dout,
        if_empty_n => start_for_fft_stage_10_U0_empty_n,
        if_read => fft_stage_10_U0_ap_ready);





    ap_sync_reg_normaling_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_normaling_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_normaling_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_normaling_U0_ap_ready <= ap_sync_normaling_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_process2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_process2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_process2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_process2_U0_ap_ready <= ap_sync_process2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_process_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_process_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_process_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_process_U0_ap_ready <= ap_sync_process_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Buff0_im_address0 <= process2_U0_Buff0_im_address0;
    Buff0_im_address1 <= ap_const_lv10_0;
    Buff0_im_ce0 <= process2_U0_Buff0_im_ce0;
    Buff0_im_ce1 <= ap_const_logic_0;
    Buff0_im_d0 <= process2_U0_Buff0_im_d0;
    Buff0_im_d1 <= ap_const_lv32_0;
    Buff0_im_we0 <= process2_U0_Buff0_im_we0;
    Buff0_im_we1 <= ap_const_logic_0;
    Buff0_re_address0 <= process2_U0_Buff0_re_address0;
    Buff0_re_address1 <= ap_const_lv10_0;
    Buff0_re_ce0 <= process2_U0_Buff0_re_ce0;
    Buff0_re_ce1 <= ap_const_logic_0;
    Buff0_re_d0 <= process2_U0_Buff0_re_d0;
    Buff0_re_d1 <= ap_const_lv32_0;
    Buff0_re_we0 <= process2_U0_Buff0_re_we0;
    Buff0_re_we1 <= ap_const_logic_0;
    Buff1_im_address0 <= process2_U0_Buff1_im_address0;
    Buff1_im_address1 <= ap_const_lv10_0;
    Buff1_im_ce0 <= process2_U0_Buff1_im_ce0;
    Buff1_im_ce1 <= ap_const_logic_0;
    Buff1_im_d0 <= process2_U0_Buff1_im_d0;
    Buff1_im_d1 <= ap_const_lv32_0;
    Buff1_im_we0 <= process2_U0_Buff1_im_we0;
    Buff1_im_we1 <= ap_const_logic_0;
    Buff1_re_address0 <= process2_U0_Buff1_re_address0;
    Buff1_re_address1 <= ap_const_lv10_0;
    Buff1_re_ce0 <= process2_U0_Buff1_re_ce0;
    Buff1_re_ce1 <= ap_const_logic_0;
    Buff1_re_d0 <= process2_U0_Buff1_re_d0;
    Buff1_re_d1 <= ap_const_lv32_0;
    Buff1_re_we0 <= process2_U0_Buff1_re_we0;
    Buff1_re_we1 <= ap_const_logic_0;
    Buff2_im_address0 <= process2_U0_Buff2_im_address0;
    Buff2_im_address1 <= ap_const_lv10_0;
    Buff2_im_ce0 <= process2_U0_Buff2_im_ce0;
    Buff2_im_ce1 <= ap_const_logic_0;
    Buff2_im_d0 <= process2_U0_Buff2_im_d0;
    Buff2_im_d1 <= ap_const_lv32_0;
    Buff2_im_we0 <= process2_U0_Buff2_im_we0;
    Buff2_im_we1 <= ap_const_logic_0;
    Buff2_re_address0 <= process2_U0_Buff2_re_address0;
    Buff2_re_address1 <= ap_const_lv10_0;
    Buff2_re_ce0 <= process2_U0_Buff2_re_ce0;
    Buff2_re_ce1 <= ap_const_logic_0;
    Buff2_re_d0 <= process2_U0_Buff2_re_d0;
    Buff2_re_d1 <= ap_const_lv32_0;
    Buff2_re_we0 <= process2_U0_Buff2_re_we0;
    Buff2_re_we1 <= ap_const_logic_0;
    Spectrumoutput_address0 <= normaling_U0_Spectrumoutput_address0;
    Spectrumoutput_address1 <= normaling_U0_Spectrumoutput_address1;
    Spectrumoutput_ce0 <= normaling_U0_Spectrumoutput_ce0;
    Spectrumoutput_ce1 <= normaling_U0_Spectrumoutput_ce1;
    Spectrumoutput_d0 <= normaling_U0_Spectrumoutput_d0;
    Spectrumoutput_d1 <= ap_const_lv32_0;
    Spectrumoutput_we0 <= normaling_U0_Spectrumoutput_we0;
    Spectrumoutput_we1 <= ap_const_logic_0;
    ap_done <= ap_sync_done;
    ap_idle <= (process_U0_ap_idle and process2_U0_ap_idle and normaling_U0_ap_idle and load_nfft_value_U0_ap_idle and fft_stage_9_U0_ap_idle and fft_stage_8_U0_ap_idle and fft_stage_7_U0_ap_idle and fft_stage_6_U0_ap_idle and fft_stage_5_U0_ap_idle and fft_stage_4_U0_ap_idle and fft_stage_3_U0_ap_idle and fft_stage_2_U0_ap_idle and fft_stage_1_U0_ap_idle and fft_stage_10_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (process2_U0_ap_done and normaling_U0_ap_done);
    ap_sync_normaling_U0_ap_ready <= (normaling_U0_ap_ready or ap_sync_reg_normaling_U0_ap_ready);
    ap_sync_process2_U0_ap_ready <= (process2_U0_ap_ready or ap_sync_reg_process2_U0_ap_ready);
    ap_sync_process_U0_ap_ready <= (process_U0_ap_ready or ap_sync_reg_process_U0_ap_ready);
    ap_sync_ready <= (ap_sync_process_U0_ap_ready and ap_sync_process2_U0_ap_ready and ap_sync_normaling_U0_ap_ready);
    fft_stage_10_U0_ap_continue <= ap_const_logic_1;
    fft_stage_10_U0_ap_start <= start_for_fft_stage_10_U0_empty_n;
    fft_stage_1_U0_ap_continue <= ap_const_logic_1;
    fft_stage_1_U0_ap_start <= start_for_fft_stage_1_U0_empty_n;
    fft_stage_2_U0_ap_continue <= ap_const_logic_1;
    fft_stage_2_U0_ap_start <= start_for_fft_stage_2_U0_empty_n;
    fft_stage_3_U0_ap_continue <= ap_const_logic_1;
    fft_stage_3_U0_ap_start <= start_for_fft_stage_3_U0_empty_n;
    fft_stage_4_U0_ap_continue <= ap_const_logic_1;
    fft_stage_4_U0_ap_start <= start_for_fft_stage_4_U0_empty_n;
    fft_stage_5_U0_ap_continue <= ap_const_logic_1;
    fft_stage_5_U0_ap_start <= start_for_fft_stage_5_U0_empty_n;
    fft_stage_6_U0_ap_continue <= ap_const_logic_1;
    fft_stage_6_U0_ap_start <= start_for_fft_stage_6_U0_empty_n;
    fft_stage_7_U0_ap_continue <= ap_const_logic_1;
    fft_stage_7_U0_ap_start <= start_for_fft_stage_7_U0_empty_n;
    fft_stage_8_U0_ap_continue <= ap_const_logic_1;
    fft_stage_8_U0_ap_start <= start_for_fft_stage_8_U0_empty_n;
    fft_stage_9_U0_ap_continue <= ap_const_logic_1;
    fft_stage_9_U0_ap_start <= start_for_fft_stage_9_U0_empty_n;
    load_nfft_value_U0_ap_continue <= ap_const_logic_1;
    load_nfft_value_U0_ap_start <= start_for_load_nfft_value_U0_empty_n;
    m_axi_gmem_ARADDR <= process_U0_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= process_U0_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= process_U0_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= process_U0_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= process_U0_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= process_U0_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= process_U0_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= process_U0_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= process_U0_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= process_U0_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= process_U0_m_axi_gmem_ARUSER;
    m_axi_gmem_ARVALID <= process_U0_m_axi_gmem_ARVALID;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;
    m_axi_gmem_RREADY <= process_U0_m_axi_gmem_RREADY;
    m_axi_gmem_WDATA <= ap_const_lv64_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv8_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    normaling_U0_ap_continue <= ap_sync_continue;
    normaling_U0_ap_start <= ((ap_sync_reg_normaling_U0_ap_ready xor ap_const_logic_1) and ap_start);
    process2_U0_ap_continue <= ap_sync_continue;
    process2_U0_ap_start <= ((ap_sync_reg_process2_U0_ap_ready xor ap_const_logic_1) and ap_start);
    process_U0_ap_continue <= ap_const_logic_1;
    process_U0_ap_start <= ((ap_sync_reg_process_U0_ap_ready xor ap_const_logic_1) and ap_start);
    start_for_fft_stage_10_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_5_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_6_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_7_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_8_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_9_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_load_nfft_value_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
