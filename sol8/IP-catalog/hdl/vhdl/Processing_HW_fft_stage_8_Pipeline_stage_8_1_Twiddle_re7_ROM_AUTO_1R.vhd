-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Processing_HW_fft_stage_8_Pipeline_stage_8_1_Twiddle_re7_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of Processing_HW_fft_stage_8_Pipeline_stage_8_1_Twiddle_re7_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111111100000000000000000000000", 1 => "00111111011111111110110001000011", 2 => "00111111011111111011000100001111", 3 => "00111111011111110100111001101101", 
    4 => "00111111011111101100010001101101", 5 => "00111111011111100001001100100100", 6 => "00111111011111010011101010101100", 7 => "00111111011111000011101100101000", 
    8 => "00111111011110110001010010111110", 9 => "00111111011110011100011110011101", 10 => "00111111011110000101001111111000", 11 => "00111111011101101011101000000111", 
    12 => "00111111011101001111101000001011", 13 => "00111111011100110001010001000111", 14 => "00111111011100010000100100001000", 15 => "00111111011011101101100010011110", 
    16 => "00111111011011001000001101011110", 17 => "00111111011010100000100110100110", 18 => "00111111011001110110101111011000", 19 => "00111111011001001010101001011001", 
    20 => "00111111011000011100010110010111", 21 => "00111111010111101011111000000101", 22 => "00111111010110111001010000011010", 23 => "00111111010110000100100001010011", 
    24 => "00111111010101001101101100110001", 25 => "00111111010100010100110100111101", 26 => "00111111010011011001111100000010", 27 => "00111111010010011101000100010010", 
    28 => "00111111010001011110010000000011", 29 => "00111111010000011101100001110000", 30 => "00111111001111011010111011111001", 31 => "00111111001110010110100001000010", 
    32 => "00111111001101010000010011110011", 33 => "00111111001100001000010110111010", 34 => "00111111001010111110101101001001", 35 => "00111111001001110011011001010101", 
    36 => "00111111001000100110011110011001", 37 => "00111111000111010111111111010001", 38 => "00111111000110000111111111000000", 39 => "00111111000100110110100000101010", 
    40 => "00111111000011100011100111011001", 41 => "00111111000010001111010110011011", 42 => "00111111000000111001110000111100", 43 => "00111110111111000101110100100110", 
    44 => "00111110111100010101101011100111", 45 => "00111110111001100011001101110100", 46 => "00111110110110101110100010000001", 47 => "00111110110011110111101111001001", 
    48 => "00111110110000111110111100010101", 49 => "00111110101110000100010000100111", 50 => "00111110101011000111110011010011", 51 => "00111110101000001001101011100010", 
    52 => "00111110100101001010000000110000", 53 => "00111110100010001000111010010011", 54 => "00111110011110001100111111001000", 55 => "00111110011000000101110000010011", 
    56 => "00111110010001111100010110111100", 57 => "00111110001011110001000010100000", 58 => "00111110000101100100000010000101", 59 => "00111101111110101011001001101100", 
    60 => "00111101110010001011110100110101", 61 => "00111101100101101010100011111011", 62 => "00111101010010001111101100101001", 63 => "00111100110010010000101001111110", 
    64 => "10110011001110111011110100101110", 65 => "10111100110010010000101010101101", 66 => "10111101010010001111101101000001", 67 => "10111101100101101010100100000110", 
    68 => "10111101110010001011110101000001", 69 => "10111101111110101011001001110111", 70 => "10111110000101100100000010001010", 71 => "10111110001011110001000010100110", 
    72 => "10111110010001111100010111000010", 73 => "10111110011000000101110000011000", 74 => "10111110011110001100111111001101", 75 => "10111110100010001000111010010110", 
    76 => "10111110100101001010000000110011", 77 => "10111110101000001001101011100100", 78 => "10111110101011000111110011010110", 79 => "10111110101110000100010000101010", 
    80 => "10111110110000111110111100011000", 81 => "10111110110011110111101111001011", 82 => "10111110110110101110100010000000", 83 => "10111110111001100011001101110110", 
    84 => "10111110111100010101101011101101", 85 => "10111110111111000101110100100110", 86 => "10111111000000111001110000111101", 87 => "10111111000010001111010110011100", 
    88 => "10111111000011100011100111011100", 89 => "10111111000100110110100000101010", 90 => "10111111000110000111111111000001", 91 => "10111111000111010111111111010011", 
    92 => "10111111001000100110011110011001", 93 => "10111111001001110011011001010110", 94 => "10111111001010111110101101001011", 95 => "10111111001100001000010110111101", 
    96 => "10111111001101010000010011110011", 97 => "10111111001110010110100001000011", 98 => "10111111001111011010111011111011", 99 => "10111111010000011101100001110000", 
    100 => "10111111010001011110010000000100", 101 => "10111111010010011101000100010011", 102 => "10111111010011011001111100000100", 103 => "10111111010100010100110100111101", 
    104 => "10111111010101001101101100110010", 105 => "10111111010110000100100001010100", 106 => "10111111010110111001010000011010", 107 => "10111111010111101011111000000110", 
    108 => "10111111011000011100010110011001", 109 => "10111111011001001010101001011001", 110 => "10111111011001110110101111011000", 111 => "10111111011010100000100110100111", 
    112 => "10111111011011001000001101100000", 113 => "10111111011011101101100010011110", 114 => "10111111011100010000100100001001", 115 => "10111111011100110001010001001000", 
    116 => "10111111011101001111101000001011", 117 => "10111111011101101011101000000111", 118 => "10111111011110000101001111111000", 119 => "10111111011110011100011110011110", 
    120 => "10111111011110110001010010111111", 121 => "10111111011111000011101100101000", 122 => "10111111011111010011101010101100", 123 => "10111111011111100001001100100011", 
    124 => "10111111011111101100010001101101", 125 => "10111111011111110100111001101110", 126 => "10111111011111111011000100001111", 127 => "10111111011111111110110001000011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

