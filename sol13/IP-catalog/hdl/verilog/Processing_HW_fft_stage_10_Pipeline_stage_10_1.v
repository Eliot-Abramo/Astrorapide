// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Processing_HW_fft_stage_10_Pipeline_stage_10_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        In_re_V_address0,
        In_re_V_ce0,
        In_re_V_q0,
        In_im_V_address0,
        In_im_V_ce0,
        In_im_V_q0,
        In_re_V_3_address0,
        In_re_V_3_ce0,
        In_re_V_3_q0,
        In_im_V_3_address0,
        In_im_V_3_ce0,
        In_im_V_3_q0,
        S10_din,
        S10_num_data_valid,
        S10_fifo_cap,
        S10_full_n,
        S10_write,
        OutBuff_re_V_address0,
        OutBuff_re_V_ce0,
        OutBuff_re_V_we0,
        OutBuff_re_V_d0,
        OutBuff_im_V_address0,
        OutBuff_im_V_ce0,
        OutBuff_im_V_we0,
        OutBuff_im_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] In_re_V_address0;
output   In_re_V_ce0;
input  [31:0] In_re_V_q0;
output  [8:0] In_im_V_address0;
output   In_im_V_ce0;
input  [31:0] In_im_V_q0;
output  [8:0] In_re_V_3_address0;
output   In_re_V_3_ce0;
input  [31:0] In_re_V_3_q0;
output  [8:0] In_im_V_3_address0;
output   In_im_V_3_ce0;
input  [31:0] In_im_V_3_q0;
output  [63:0] S10_din;
input  [11:0] S10_num_data_valid;
input  [11:0] S10_fifo_cap;
input   S10_full_n;
output   S10_write;
output  [8:0] OutBuff_re_V_address0;
output   OutBuff_re_V_ce0;
output   OutBuff_re_V_we0;
output  [31:0] OutBuff_re_V_d0;
output  [8:0] OutBuff_im_V_address0;
output   OutBuff_im_V_ce0;
output   OutBuff_im_V_we0;
output  [31:0] OutBuff_im_V_d0;

reg ap_idle;
reg In_re_V_ce0;
reg In_im_V_ce0;
reg In_re_V_3_ce0;
reg In_im_V_3_ce0;
reg S10_write;
reg OutBuff_re_V_ce0;
reg OutBuff_re_V_we0;
reg OutBuff_im_V_ce0;
reg OutBuff_im_V_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln1027_reg_337;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [8:0] Twiddle_re11_address0;
reg    Twiddle_re11_ce0;
wire   [23:0] Twiddle_re11_q0;
wire   [8:0] Twiddle_im12_address0;
reg    Twiddle_im12_ce0;
wire   [22:0] Twiddle_im12_q0;
reg    S10_blk_n;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln1027_fu_191_p2;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1027_reg_337_pp0_iter1_reg;
wire   [63:0] zext_ln1027_fu_203_p1;
reg   [63:0] zext_ln1027_reg_341;
reg   [63:0] zext_ln1027_reg_341_pp0_iter1_reg;
reg   [63:0] zext_ln1027_reg_341_pp0_iter2_reg;
reg  signed [31:0] tmp_re_V_reg_369;
wire    ap_block_pp0_stage1_11001;
reg  signed [31:0] tmp_im_V_reg_374;
reg  signed [23:0] this_re_V_load_reg_379;
reg  signed [22:0] this_im_V_load_reg_384;
wire  signed [53:0] sext_ln1270_fu_224_p1;
reg  signed [53:0] sext_ln1270_reg_394;
wire  signed [53:0] sext_ln1273_fu_227_p1;
reg  signed [53:0] sext_ln1273_reg_400;
wire  signed [53:0] sext_ln1270_10_fu_236_p1;
reg  signed [53:0] sext_ln1270_10_reg_406;
wire  signed [53:0] sext_ln1273_10_fu_239_p1;
reg  signed [53:0] sext_ln1273_10_reg_412;
reg   [31:0] a_re_V_reg_418;
reg   [31:0] tmp1_V_reg_424;
reg   [31:0] tmp2_V_reg_429;
reg   [31:0] tmp3_V_reg_439;
reg   [31:0] tmp4_V_reg_444;
wire   [31:0] tmp_re_V_32_fu_296_p2;
reg   [31:0] tmp_re_V_32_reg_449;
reg   [31:0] a_im_V_reg_455;
wire   [31:0] tmp_im_V_32_fu_300_p2;
reg   [31:0] tmp_im_V_32_reg_461;
wire   [31:0] tmp_re_V_30_fu_304_p2;
reg   [31:0] tmp_re_V_30_reg_467;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln1510_fu_213_p1;
wire    ap_block_pp0_stage1;
reg   [9:0] ii_V_fu_68;
wire   [9:0] add_ln840_fu_197_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_ii_V_11;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] lhs_V_fu_209_p1;
wire   [53:0] grp_fu_230_p2;
wire   [53:0] grp_fu_242_p2;
wire  signed [31:0] grp_fu_268_p0;
wire  signed [22:0] grp_fu_268_p1;
wire  signed [31:0] grp_fu_272_p0;
wire  signed [23:0] grp_fu_272_p1;
wire   [53:0] grp_fu_268_p2;
wire   [53:0] grp_fu_272_p2;
wire   [31:0] tmp_im_V_30_fu_313_p2;
reg    grp_fu_230_ce;
reg    grp_fu_242_ce;
reg    grp_fu_268_ce;
reg    grp_fu_272_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

Processing_HW_fft_stage_10_Pipeline_stage_10_1_Twiddle_re11_ROM_AUTO_1R #(
    .DataWidth( 24 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
Twiddle_re11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Twiddle_re11_address0),
    .ce0(Twiddle_re11_ce0),
    .q0(Twiddle_re11_q0)
);

Processing_HW_fft_stage_10_Pipeline_stage_10_1_Twiddle_im12_ROM_AUTO_1R #(
    .DataWidth( 23 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
Twiddle_im12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Twiddle_im12_address0),
    .ce0(Twiddle_im12_ce0),
    .q0(Twiddle_im12_q0)
);

Processing_HW_mul_32s_24s_54_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 54 ))
mul_32s_24s_54_2_1_U317(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_re_V_reg_369),
    .din1(this_re_V_load_reg_379),
    .ce(grp_fu_230_ce),
    .dout(grp_fu_230_p2)
);

Processing_HW_mul_32s_23s_54_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 23 ),
    .dout_WIDTH( 54 ))
mul_32s_23s_54_2_1_U318(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_im_V_reg_374),
    .din1(this_im_V_load_reg_384),
    .ce(grp_fu_242_ce),
    .dout(grp_fu_242_p2)
);

Processing_HW_mul_32s_23s_54_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 23 ),
    .dout_WIDTH( 54 ))
mul_32s_23s_54_2_1_U319(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_268_p0),
    .din1(grp_fu_268_p1),
    .ce(grp_fu_268_ce),
    .dout(grp_fu_268_p2)
);

Processing_HW_mul_32s_24s_54_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 54 ))
mul_32s_24s_54_2_1_U320(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_272_p0),
    .din1(grp_fu_272_p1),
    .ce(grp_fu_272_ce),
    .dout(grp_fu_272_p2)
);

Processing_HW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1027_fu_191_p2 == 1'd0))) begin
            ii_V_fu_68 <= add_ln840_fu_197_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ii_V_fu_68 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_im_V_reg_455 <= In_im_V_q0;
        a_re_V_reg_418 <= In_re_V_q0;
        tmp1_V_reg_424 <= {{grp_fu_230_p2[53:22]}};
        tmp2_V_reg_429 <= {{grp_fu_242_p2[53:22]}};
        tmp_im_V_32_reg_461 <= tmp_im_V_32_fu_300_p2;
        tmp_re_V_30_reg_467 <= tmp_re_V_30_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1027_reg_337 <= icmp_ln1027_fu_191_p2;
        icmp_ln1027_reg_337_pp0_iter1_reg <= icmp_ln1027_reg_337;
        sext_ln1270_10_reg_406 <= sext_ln1270_10_fu_236_p1;
        sext_ln1270_reg_394 <= sext_ln1270_fu_224_p1;
        sext_ln1273_10_reg_412 <= sext_ln1273_10_fu_239_p1;
        sext_ln1273_reg_400 <= sext_ln1273_fu_227_p1;
        tmp3_V_reg_439 <= {{grp_fu_268_p2[53:22]}};
        tmp4_V_reg_444 <= {{grp_fu_272_p2[53:22]}};
        tmp_re_V_32_reg_449 <= tmp_re_V_32_fu_296_p2;
        zext_ln1027_reg_341_pp0_iter1_reg[9 : 0] <= zext_ln1027_reg_341[9 : 0];
        zext_ln1027_reg_341_pp0_iter2_reg[9 : 0] <= zext_ln1027_reg_341_pp0_iter1_reg[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_337 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        this_im_V_load_reg_384 <= Twiddle_im12_q0;
        this_re_V_load_reg_379 <= Twiddle_re11_q0;
        tmp_im_V_reg_374 <= In_im_V_3_q0;
        tmp_re_V_reg_369 <= In_re_V_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_fu_191_p2 == 1'd0))) begin
        zext_ln1027_reg_341[9 : 0] <= zext_ln1027_fu_203_p1[9 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_im_V_3_ce0 = 1'b1;
    end else begin
        In_im_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_im_V_ce0 = 1'b1;
    end else begin
        In_im_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_re_V_3_ce0 = 1'b1;
    end else begin
        In_re_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_re_V_ce0 = 1'b1;
    end else begin
        In_re_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutBuff_im_V_ce0 = 1'b1;
    end else begin
        OutBuff_im_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutBuff_im_V_we0 = 1'b1;
    end else begin
        OutBuff_im_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        OutBuff_re_V_ce0 = 1'b1;
    end else begin
        OutBuff_re_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        OutBuff_re_V_we0 = 1'b1;
    end else begin
        OutBuff_re_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        S10_blk_n = S10_full_n;
    end else begin
        S10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        S10_write = 1'b1;
    end else begin
        S10_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Twiddle_im12_ce0 = 1'b1;
    end else begin
        Twiddle_im12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Twiddle_re11_ce0 = 1'b1;
    end else begin
        Twiddle_re11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_337 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_reg_337_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_ii_V_11 = 10'd0;
    end else begin
        ap_sig_allocacmp_ii_V_11 = ii_V_fu_68;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_230_ce = 1'b1;
    end else begin
        grp_fu_230_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_242_ce = 1'b1;
    end else begin
        grp_fu_242_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_268_ce = 1'b1;
    end else begin
        grp_fu_268_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_272_ce = 1'b1;
    end else begin
        grp_fu_272_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign In_im_V_3_address0 = zext_ln1510_fu_213_p1;

assign In_im_V_address0 = zext_ln1027_reg_341_pp0_iter1_reg;

assign In_re_V_3_address0 = zext_ln1510_fu_213_p1;

assign In_re_V_address0 = zext_ln1027_reg_341;

assign OutBuff_im_V_address0 = zext_ln1027_reg_341_pp0_iter2_reg;

assign OutBuff_im_V_d0 = (a_im_V_reg_455 - tmp_im_V_32_reg_461);

assign OutBuff_re_V_address0 = zext_ln1027_reg_341_pp0_iter2_reg;

assign OutBuff_re_V_d0 = (a_re_V_reg_418 - tmp_re_V_32_reg_449);

assign S10_din = {{tmp_im_V_30_fu_313_p2}, {tmp_re_V_30_reg_467}};

assign Twiddle_im12_address0 = zext_ln1027_fu_203_p1;

assign Twiddle_re11_address0 = zext_ln1027_fu_203_p1;

assign add_ln840_fu_197_p2 = (ap_sig_allocacmp_ii_V_11 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == S10_full_n) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == S10_full_n) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == S10_full_n) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter3 = (1'b0 == S10_full_n);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_268_p0 = sext_ln1270_reg_394;

assign grp_fu_268_p1 = sext_ln1273_10_reg_412;

assign grp_fu_272_p0 = sext_ln1270_10_reg_406;

assign grp_fu_272_p1 = sext_ln1273_reg_400;

assign icmp_ln1027_fu_191_p2 = ((ap_sig_allocacmp_ii_V_11 == 10'd512) ? 1'b1 : 1'b0);

assign lhs_V_fu_209_p1 = ap_sig_allocacmp_ii_V_11[8:0];

assign sext_ln1270_10_fu_236_p1 = tmp_im_V_reg_374;

assign sext_ln1270_fu_224_p1 = tmp_re_V_reg_369;

assign sext_ln1273_10_fu_239_p1 = this_im_V_load_reg_384;

assign sext_ln1273_fu_227_p1 = this_re_V_load_reg_379;

assign tmp_im_V_30_fu_313_p2 = (a_im_V_reg_455 + tmp_im_V_32_reg_461);

assign tmp_im_V_32_fu_300_p2 = (tmp3_V_reg_439 + tmp4_V_reg_444);

assign tmp_re_V_30_fu_304_p2 = (a_re_V_reg_418 + tmp_re_V_32_reg_449);

assign tmp_re_V_32_fu_296_p2 = (tmp1_V_reg_424 - tmp2_V_reg_429);

assign zext_ln1027_fu_203_p1 = ap_sig_allocacmp_ii_V_11;

assign zext_ln1510_fu_213_p1 = lhs_V_fu_209_p1;

always @ (posedge ap_clk) begin
    zext_ln1027_reg_341[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln1027_reg_341_pp0_iter1_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln1027_reg_341_pp0_iter2_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //Processing_HW_fft_stage_10_Pipeline_stage_10_1
