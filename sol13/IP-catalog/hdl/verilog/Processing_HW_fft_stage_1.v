// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Processing_HW_fft_stage_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        S0_dout,
        S0_num_data_valid,
        S0_fifo_cap,
        S0_empty_n,
        S0_read,
        S1_din,
        S1_num_data_valid,
        S1_fifo_cap,
        S1_full_n,
        S1_write,
        numFFT_dout,
        numFFT_num_data_valid,
        numFFT_fifo_cap,
        numFFT_empty_n,
        numFFT_read,
        num_c42_din,
        num_c42_num_data_valid,
        num_c42_fifo_cap,
        num_c42_full_n,
        num_c42_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] S0_dout;
input  [11:0] S0_num_data_valid;
input  [11:0] S0_fifo_cap;
input   S0_empty_n;
output   S0_read;
output  [63:0] S1_din;
input  [11:0] S1_num_data_valid;
input  [11:0] S1_fifo_cap;
input   S1_full_n;
output   S1_write;
input  [9:0] numFFT_dout;
input  [1:0] numFFT_num_data_valid;
input  [1:0] numFFT_fifo_cap;
input   numFFT_empty_n;
output   numFFT_read;
output  [9:0] num_c42_din;
input  [1:0] num_c42_num_data_valid;
input  [1:0] num_c42_fifo_cap;
input   num_c42_full_n;
output   num_c42_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg S0_read;
reg S1_write;
reg numFFT_read;
reg num_c42_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    numFFT_blk_n;
reg    num_c42_blk_n;
reg   [9:0] numFFT_read_reg_83;
wire   [20:0] tmp_fu_74_p3;
reg   [20:0] tmp_reg_88;
wire    ap_CS_fsm_state2;
wire    grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start;
wire    grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done;
wire    grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_idle;
wire    grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_ready;
wire    grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S0_read;
wire   [63:0] grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S1_din;
wire    grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S1_write;
reg    grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
wire   [10:0] numFFT_cast1_fu_65_p1;
wire   [10:0] sub_i_i_fu_68_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start_reg = 1'b0;
end

Processing_HW_fft_stage_1_Pipeline_stage_1_counter_stage_1_total grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start),
    .ap_done(grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done),
    .ap_idle(grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_idle),
    .ap_ready(grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_ready),
    .S0_dout(S0_dout),
    .S0_num_data_valid(12'd0),
    .S0_fifo_cap(12'd0),
    .S0_empty_n(S0_empty_n),
    .S0_read(grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S0_read),
    .S1_din(grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S1_din),
    .S1_num_data_valid(12'd0),
    .S1_fifo_cap(12'd0),
    .S1_full_n(S1_full_n),
    .S1_write(grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S1_write),
    .bound(tmp_reg_88)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start_reg <= 1'b1;
        end else if ((grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_ready == 1'b1)) begin
            grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        numFFT_read_reg_83 <= numFFT_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_reg_88[20 : 10] <= tmp_fu_74_p3[20 : 10];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        S0_read = grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S0_read;
    end else begin
        S0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        S1_write = grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S1_write;
    end else begin
        S1_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (num_c42_full_n == 1'b0) | (numFFT_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numFFT_blk_n = numFFT_empty_n;
    end else begin
        numFFT_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (num_c42_full_n == 1'b0) | (numFFT_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numFFT_read = 1'b1;
    end else begin
        numFFT_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_c42_blk_n = num_c42_full_n;
    end else begin
        num_c42_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (num_c42_full_n == 1'b0) | (numFFT_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_c42_write = 1'b1;
    end else begin
        num_c42_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (num_c42_full_n == 1'b0) | (numFFT_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign S1_din = grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S1_din;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (num_c42_full_n == 1'b0) | (numFFT_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start = grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start_reg;

assign numFFT_cast1_fu_65_p1 = numFFT_read_reg_83;

assign num_c42_din = numFFT_dout;

assign start_out = real_start;

assign sub_i_i_fu_68_p2 = ($signed(numFFT_cast1_fu_65_p1) + $signed(11'd2045));

assign tmp_fu_74_p3 = {{sub_i_i_fu_68_p2}, {10'd0}};

always @ (posedge ap_clk) begin
    tmp_reg_88[9:0] <= 10'b0000000000;
end

endmodule //Processing_HW_fft_stage_1
