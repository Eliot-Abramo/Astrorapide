// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Processing_HW_load_nfft_value_Pipeline_VITIS_LOOP_206_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        S0_din,
        S0_num_data_valid,
        S0_fifo_cap,
        S0_full_n,
        S0_write,
        BufferIN_re_V_address0,
        BufferIN_re_V_ce0,
        BufferIN_re_V_q0,
        BufferIN_re_V_1_address0,
        BufferIN_re_V_1_ce0,
        BufferIN_re_V_1_q0,
        BufferIN_im_V_address0,
        BufferIN_im_V_ce0,
        BufferIN_im_V_q0,
        BufferIN_im_V_1_address0,
        BufferIN_im_V_1_ce0,
        BufferIN_im_V_1_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] S0_din;
input  [11:0] S0_num_data_valid;
input  [11:0] S0_fifo_cap;
input   S0_full_n;
output   S0_write;
output  [9:0] BufferIN_re_V_address0;
output   BufferIN_re_V_ce0;
input  [31:0] BufferIN_re_V_q0;
output  [9:0] BufferIN_re_V_1_address0;
output   BufferIN_re_V_1_ce0;
input  [31:0] BufferIN_re_V_1_q0;
output  [9:0] BufferIN_im_V_address0;
output   BufferIN_im_V_ce0;
input  [31:0] BufferIN_im_V_q0;
output  [9:0] BufferIN_im_V_1_address0;
output   BufferIN_im_V_1_ce0;
input  [31:0] BufferIN_im_V_1_q0;

reg ap_idle;
reg S0_write;
reg BufferIN_re_V_ce0;
reg BufferIN_re_V_1_ce0;
reg BufferIN_im_V_ce0;
reg BufferIN_im_V_1_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_125_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    S0_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_224;
wire   [31:0] tmp_7_fu_168_p4;
reg   [31:0] tmp_7_reg_230;
wire   [31:0] tmp_8_fu_177_p4;
reg   [31:0] tmp_8_reg_235;
wire   [63:0] zext_ln209_fu_147_p1;
reg   [11:0] input_V_fu_54;
wire   [11:0] i_V_fu_131_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_i_V_3;
reg    ap_block_pp0_stage0_01001;
reg   [9:0] or_ln_fu_137_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Processing_HW_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U98(
    .din0(BufferIN_re_V_q0),
    .din1(BufferIN_re_V_1_q0),
    .din2(tmp_reg_224),
    .dout(tmp_7_fu_168_p4)
);

Processing_HW_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U99(
    .din0(BufferIN_im_V_q0),
    .din1(BufferIN_im_V_1_q0),
    .din2(tmp_reg_224),
    .dout(tmp_8_fu_177_p4)
);

Processing_HW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1027_fu_125_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            input_V_fu_54 <= i_V_fu_131_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            input_V_fu_54 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        tmp_7_reg_230 <= tmp_7_fu_168_p4;
        tmp_8_reg_235 <= tmp_8_fu_177_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_125_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_224 <= ap_sig_allocacmp_i_V_3[32'd10];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BufferIN_im_V_1_ce0 = 1'b1;
    end else begin
        BufferIN_im_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BufferIN_im_V_ce0 = 1'b1;
    end else begin
        BufferIN_im_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BufferIN_re_V_1_ce0 = 1'b1;
    end else begin
        BufferIN_re_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BufferIN_re_V_ce0 = 1'b1;
    end else begin
        BufferIN_re_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        S0_blk_n = S0_full_n;
    end else begin
        S0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        S0_write = 1'b1;
    end else begin
        S0_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_125_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_V_3 = 12'd0;
    end else begin
        ap_sig_allocacmp_i_V_3 = input_V_fu_54;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BufferIN_im_V_1_address0 = zext_ln209_fu_147_p1;

assign BufferIN_im_V_address0 = zext_ln209_fu_147_p1;

assign BufferIN_re_V_1_address0 = zext_ln209_fu_147_p1;

assign BufferIN_re_V_address0 = zext_ln209_fu_147_p1;

assign S0_din = {{tmp_8_reg_235}, {tmp_7_reg_230}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == S0_full_n) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == S0_full_n) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == S0_full_n) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (1'b0 == S0_full_n);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_V_fu_131_p2 = (ap_sig_allocacmp_i_V_3 + 12'd1);

assign icmp_ln1027_fu_125_p2 = ((ap_sig_allocacmp_i_V_3 == 12'd2048) ? 1'b1 : 1'b0);

integer ap_tvar_int_0;

always @ (ap_sig_allocacmp_i_V_3) begin
    for (ap_tvar_int_0 = 10 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 9 - 0) begin
            or_ln_fu_137_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            or_ln_fu_137_p4[ap_tvar_int_0] = ap_sig_allocacmp_i_V_3[9 - ap_tvar_int_0];
        end
    end
end

assign zext_ln209_fu_147_p1 = or_ln_fu_137_p4;

endmodule //Processing_HW_load_nfft_value_Pipeline_VITIS_LOOP_206_3
