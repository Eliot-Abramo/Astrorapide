-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Processing_HW_fft_stage_8_Pipeline_stage_8_1_Twiddle_re7_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 24; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of Processing_HW_fft_stage_8_Pipeline_stage_8_1_Twiddle_re7_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "010000000000000000000000", 1 => "001111111111101100010000", 2 => "001111111110110001000011", 3 => "001111111101001110011011", 
    4 => "001111111011000100011011", 5 => "001111111000010011001001", 6 => "001111110100111010101011", 7 => "001111110000111011001010", 
    8 => "001111101100010100101111", 9 => "001111100111000111100111", 10 => "001111100001010011111101", 11 => "001111011010111010000001", 
    12 => "001111010011111010000010", 13 => "001111001100010100010001", 14 => "001111000100001001000010", 15 => "001110111011011000100111", 
    16 => "001110110010000011010111", 17 => "001110101000001001101001", 18 => "001110011101101011110101", 19 => "001110010010101010010110", 
    20 => "001110000111000101100101", 21 => "001101111010111110000001", 22 => "001101101110010100000110", 23 => "001101100001001000010100", 
    24 => "001101010011011011001100", 25 => "001101000101001101001111", 26 => "001100110110011111000000", 27 => "001100100111010001000100", 
    28 => "001100010111100100000000", 29 => "001100000111011000011011", 30 => "001011110110101110111110", 31 => "001011100101101000010000", 
    32 => "001011010100000100111100", 33 => "001011000010000101101110", 34 => "001010101111101011010010", 35 => "001010011100110110010101", 
    36 => "001010001001100111100110", 37 => "001001110101111111110100", 38 => "001001100001111111101111", 39 => "001001001101101000001010", 
    40 => "001000111000111001110110", 41 => "001000100011110101100110", 42 => "001000001110011100001110", 43 => "000111111000101110100100", 
    44 => "000111100010101101011100", 45 => "000111001100011001101110", 46 => "000110110101110100010000", 47 => "000110011110111101111001", 
    48 => "000110000111110111100010", 49 => "000101110000100010000100", 50 => "000101011000111110011010", 51 => "000101000001001101011100", 
    52 => "000100101001010000000110", 53 => "000100010001000111010010", 54 => "000011111000110011111100", 55 => "000011100000010111000001", 
    56 => "000011000111110001011011", 57 => "000010101111000100001010", 58 => "000010010110010000001000", 59 => "000001111101010110010011", 
    60 => "000001100100010111101001", 61 => "000001001011010101000111", 62 => "000000110010001111101100", 63 => "000000011001001000010100", 
    64 => "111111111111111111111111", 65 => "111111100110110111101010", 66 => "111111001101110000010010", 67 => "111110110100101010110111", 
    68 => "111110011011101000010101", 69 => "111110000010101001101100", 70 => "111101101001101111110111", 71 => "111101010000111011110101", 
    72 => "111100111000001110100011", 73 => "111100011111101000111110", 74 => "111100000111001100000011", 75 => "111011101110111000101101", 
    76 => "111011010110101111111001", 77 => "111010111110110010100011", 78 => "111010100111000001100101", 79 => "111010001111011101111010", 
    80 => "111001111000001000011100", 81 => "111001100001000010000110", 82 => "111001001010001011110000", 83 => "111000110011100110010001", 
    84 => "111000011101010010100010", 85 => "111000000111010001011011", 86 => "110111110001100011110000", 87 => "110111011100001010011000", 
    88 => "110111000111000110001000", 89 => "110110110010010111110101", 90 => "110110011110000000001111", 91 => "110110001010000000001011", 
    92 => "110101110110011000011001", 93 => "110101100011001001101010", 94 => "110101010000010100101101", 95 => "110100111101111010010000", 
    96 => "110100101011111011000011", 97 => "110100011010010111101111", 98 => "110100001001010001000001", 99 => "110011111000100111100100", 
    100 => "110011101000011011111111", 101 => "110011011000101110111011", 102 => "110011001001100000111110", 103 => "110010111010110010110000", 
    104 => "110010101100100100110011", 105 => "110010011110110111101010", 106 => "110010010001101011111001", 107 => "110010000101000001111110", 
    108 => "110001111000111010011001", 109 => "110001101101010101101001", 110 => "110001100010010100001010", 111 => "110001010111110110010110", 
    112 => "110001001101111100101000", 113 => "110001000100100111011000", 114 => "110000111011110110111101", 115 => "110000110011101011101110", 
    116 => "110000101100000101111101", 117 => "110000100101000101111110", 118 => "110000011110101100000010", 119 => "110000011000111000011000", 
    120 => "110000010011101011010000", 121 => "110000001111000100110101", 122 => "110000001011000101010100", 123 => "110000000111101100110111", 
    124 => "110000000100111011100100", 125 => "110000000010110001100100", 126 => "110000000001001110111100", 127 => "110000000000010011101111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

