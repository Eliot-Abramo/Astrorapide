-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Processing_HW_fft_stage_7_Pipeline_stage_7_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    In_re_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    In_re_V_ce0 : OUT STD_LOGIC;
    In_re_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    In_re_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    In_re_V_ce1 : OUT STD_LOGIC;
    In_re_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    In_im_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    In_im_V_ce0 : OUT STD_LOGIC;
    In_im_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    In_im_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    In_im_V_ce1 : OUT STD_LOGIC;
    In_im_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    S7_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    S7_num_data_valid : IN STD_LOGIC_VECTOR (11 downto 0);
    S7_fifo_cap : IN STD_LOGIC_VECTOR (11 downto 0);
    S7_full_n : IN STD_LOGIC;
    S7_write : OUT STD_LOGIC;
    OutBuff_re_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutBuff_re_V_ce0 : OUT STD_LOGIC;
    OutBuff_re_V_we0 : OUT STD_LOGIC;
    OutBuff_re_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OutBuff_im_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutBuff_im_V_ce0 : OUT STD_LOGIC;
    OutBuff_im_V_we0 : OUT STD_LOGIC;
    OutBuff_im_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Processing_HW_fft_stage_7_Pipeline_stage_7_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln1027_reg_335 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Twiddle_re5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Twiddle_re5_ce0 : STD_LOGIC;
    signal Twiddle_re5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal Twiddle_im6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Twiddle_im6_ce0 : STD_LOGIC;
    signal Twiddle_im6_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal S7_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1027_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1027_reg_335_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1027_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_reg_339 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_reg_339_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_reg_339_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_re_V_reg_367 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_im_V_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_re_V_1_load_reg_377 : STD_LOGIC_VECTOR (23 downto 0);
    signal this_im_V_1_load_reg_382 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1270_fu_222_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln1270_reg_392 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln1273_fu_225_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln1273_reg_398 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln1270_3_fu_234_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln1270_3_reg_404 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln1273_3_fu_237_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln1273_3_reg_410 : STD_LOGIC_VECTOR (53 downto 0);
    signal a_re_V_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_V_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_V_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_V_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_V_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_V_9_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_V_9_reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_im_V_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_V_9_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_V_9_reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_V_7_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_V_7_reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln541_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ii_V_fu_60 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln840_fu_187_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_ii_V_4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal lhs_V_fu_199_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_fu_203_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal grp_fu_266_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_270_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_im_V_7_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_228_ce : STD_LOGIC;
    signal grp_fu_240_ce : STD_LOGIC;
    signal grp_fu_266_ce : STD_LOGIC;
    signal grp_fu_270_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Processing_HW_mul_32s_24s_54_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (53 downto 0) );
    end component;


    component Processing_HW_mul_32s_23s_54_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (53 downto 0) );
    end component;


    component Processing_HW_fft_stage_7_Pipeline_stage_7_1_Twiddle_re5_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component Processing_HW_fft_stage_7_Pipeline_stage_7_1_Twiddle_im6_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component Processing_HW_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    Twiddle_re5_U : component Processing_HW_fft_stage_7_Pipeline_stage_7_1_Twiddle_re5_ROM_AUTO_1R
    generic map (
        DataWidth => 24,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Twiddle_re5_address0,
        ce0 => Twiddle_re5_ce0,
        q0 => Twiddle_re5_q0);

    Twiddle_im6_U : component Processing_HW_fft_stage_7_Pipeline_stage_7_1_Twiddle_im6_ROM_AUTO_1R
    generic map (
        DataWidth => 23,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Twiddle_im6_address0,
        ce0 => Twiddle_im6_ce0,
        q0 => Twiddle_im6_q0);

    mul_32s_24s_54_2_1_U238 : component Processing_HW_mul_32s_24s_54_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 54)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_V_reg_367,
        din1 => this_re_V_1_load_reg_377,
        ce => grp_fu_228_ce,
        dout => grp_fu_228_p2);

    mul_32s_23s_54_2_1_U239 : component Processing_HW_mul_32s_23s_54_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 23,
        dout_WIDTH => 54)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_V_reg_372,
        din1 => this_im_V_1_load_reg_382,
        ce => grp_fu_240_ce,
        dout => grp_fu_240_p2);

    mul_32s_23s_54_2_1_U240 : component Processing_HW_mul_32s_23s_54_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 23,
        dout_WIDTH => 54)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_266_p0,
        din1 => grp_fu_266_p1,
        ce => grp_fu_266_ce,
        dout => grp_fu_266_p2);

    mul_32s_24s_54_2_1_U241 : component Processing_HW_mul_32s_24s_54_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 54)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_270_p0,
        din1 => grp_fu_270_p1,
        ce => grp_fu_270_ce,
        dout => grp_fu_270_p2);

    flow_control_loop_pipe_sequential_init_U : component Processing_HW_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ii_V_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1027_fu_181_p2 = ap_const_lv1_0))) then 
                    ii_V_fu_60 <= add_ln840_fu_187_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ii_V_fu_60 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                a_im_V_reg_453 <= In_im_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                a_re_V_reg_416 <= In_re_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1027_reg_335 <= icmp_ln1027_fu_181_p2;
                icmp_ln1027_reg_335_pp0_iter1_reg <= icmp_ln1027_reg_335;
                sext_ln1270_3_reg_404 <= sext_ln1270_3_fu_234_p1;
                sext_ln1270_reg_392 <= sext_ln1270_fu_222_p1;
                sext_ln1273_3_reg_410 <= sext_ln1273_3_fu_237_p1;
                sext_ln1273_reg_398 <= sext_ln1273_fu_225_p1;
                tmp3_V_reg_437 <= grp_fu_266_p2(53 downto 22);
                tmp4_V_reg_442 <= grp_fu_270_p2(53 downto 22);
                tmp_re_V_9_reg_447 <= tmp_re_V_9_fu_294_p2;
                    zext_ln1027_reg_339_pp0_iter1_reg(6 downto 0) <= zext_ln1027_reg_339(6 downto 0);
                    zext_ln1027_reg_339_pp0_iter2_reg(6 downto 0) <= zext_ln1027_reg_339_pp0_iter1_reg(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                this_im_V_1_load_reg_382 <= Twiddle_im6_q0;
                this_re_V_1_load_reg_377 <= Twiddle_re5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp1_V_reg_422 <= grp_fu_228_p2(53 downto 22);
                tmp2_V_reg_427 <= grp_fu_240_p2(53 downto 22);
                tmp_im_V_9_reg_459 <= tmp_im_V_9_fu_298_p2;
                tmp_re_V_7_reg_465 <= tmp_re_V_7_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_im_V_reg_372 <= In_im_V_q1;
                tmp_re_V_reg_367 <= In_re_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_181_p2 = ap_const_lv1_0))) then
                    zext_ln1027_reg_339(6 downto 0) <= zext_ln1027_fu_193_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln1027_reg_339(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln1027_reg_339_pp0_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln1027_reg_339_pp0_iter2_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter2_stage0, ap_idle_pp0_0to1, ap_idle_pp0_1to3, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    In_im_V_address0 <= zext_ln1027_reg_339_pp0_iter1_reg(7 - 1 downto 0);
    In_im_V_address1 <= zext_ln541_fu_211_p1(7 - 1 downto 0);

    In_im_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            In_im_V_ce0 <= ap_const_logic_1;
        else 
            In_im_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    In_im_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            In_im_V_ce1 <= ap_const_logic_1;
        else 
            In_im_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    In_re_V_address0 <= zext_ln1027_reg_339(7 - 1 downto 0);
    In_re_V_address1 <= zext_ln541_fu_211_p1(7 - 1 downto 0);

    In_re_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            In_re_V_ce0 <= ap_const_logic_1;
        else 
            In_re_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    In_re_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            In_re_V_ce1 <= ap_const_logic_1;
        else 
            In_re_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OutBuff_im_V_address0 <= zext_ln1027_reg_339_pp0_iter2_reg(6 - 1 downto 0);

    OutBuff_im_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutBuff_im_V_ce0 <= ap_const_logic_1;
        else 
            OutBuff_im_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OutBuff_im_V_d0 <= std_logic_vector(unsigned(a_im_V_reg_453) - unsigned(tmp_im_V_9_reg_459));

    OutBuff_im_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutBuff_im_V_we0 <= ap_const_logic_1;
        else 
            OutBuff_im_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    OutBuff_re_V_address0 <= zext_ln1027_reg_339_pp0_iter2_reg(6 - 1 downto 0);

    OutBuff_re_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            OutBuff_re_V_ce0 <= ap_const_logic_1;
        else 
            OutBuff_re_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OutBuff_re_V_d0 <= std_logic_vector(unsigned(a_re_V_reg_416) - unsigned(tmp_re_V_9_reg_447));

    OutBuff_re_V_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            OutBuff_re_V_we0 <= ap_const_logic_1;
        else 
            OutBuff_re_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S7_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, S7_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            S7_blk_n <= S7_full_n;
        else 
            S7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    S7_din <= (tmp_im_V_7_fu_311_p2 & tmp_re_V_7_reg_465);

    S7_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            S7_write <= ap_const_logic_1;
        else 
            S7_write <= ap_const_logic_0;
        end if; 
    end process;

    Twiddle_im6_address0 <= zext_ln1027_fu_193_p1(6 - 1 downto 0);

    Twiddle_im6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Twiddle_im6_ce0 <= ap_const_logic_1;
        else 
            Twiddle_im6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Twiddle_re5_address0 <= zext_ln1027_fu_193_p1(6 - 1 downto 0);

    Twiddle_re5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Twiddle_re5_ce0 <= ap_const_logic_1;
        else 
            Twiddle_re5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln840_fu_187_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ii_V_4) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, S7_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_0 = S7_full_n) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, S7_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = S7_full_n) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, S7_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = S7_full_n) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter3_assign_proc : process(S7_full_n)
    begin
                ap_block_state7_pp0_stage0_iter3 <= (ap_const_logic_0 = S7_full_n);
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1027_reg_335)
    begin
        if (((icmp_ln1027_reg_335 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1027_reg_335_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_reg_335_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ii_V_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ii_V_fu_60, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_ii_V_4 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_ii_V_4 <= ii_V_fu_60;
        end if; 
    end process;


    grp_fu_228_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_228_ce <= ap_const_logic_1;
        else 
            grp_fu_228_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_240_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_240_ce <= ap_const_logic_1;
        else 
            grp_fu_240_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_266_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_266_ce <= ap_const_logic_1;
        else 
            grp_fu_266_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_266_p0 <= sext_ln1270_reg_392(32 - 1 downto 0);
    grp_fu_266_p1 <= sext_ln1273_3_reg_410(23 - 1 downto 0);

    grp_fu_270_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_270_ce <= ap_const_logic_1;
        else 
            grp_fu_270_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_270_p0 <= sext_ln1270_3_reg_404(32 - 1 downto 0);
    grp_fu_270_p1 <= sext_ln1273_reg_398(24 - 1 downto 0);
    icmp_ln1027_fu_181_p2 <= "1" when (ap_sig_allocacmp_ii_V_4 = ap_const_lv7_40) else "0";
    lhs_V_fu_199_p1 <= ap_sig_allocacmp_ii_V_4(6 - 1 downto 0);
    ret_V_fu_203_p3 <= (ap_const_lv1_1 & lhs_V_fu_199_p1);
        sext_ln1270_3_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_im_V_reg_372),54));

        sext_ln1270_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_re_V_reg_367),54));

        sext_ln1273_3_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(this_im_V_1_load_reg_382),54));

        sext_ln1273_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(this_re_V_1_load_reg_377),54));

    tmp_im_V_7_fu_311_p2 <= std_logic_vector(unsigned(a_im_V_reg_453) + unsigned(tmp_im_V_9_reg_459));
    tmp_im_V_9_fu_298_p2 <= std_logic_vector(unsigned(tmp3_V_reg_437) + unsigned(tmp4_V_reg_442));
    tmp_re_V_7_fu_302_p2 <= std_logic_vector(unsigned(a_re_V_reg_416) + unsigned(tmp_re_V_9_reg_447));
    tmp_re_V_9_fu_294_p2 <= std_logic_vector(unsigned(tmp1_V_reg_422) - unsigned(tmp2_V_reg_427));
    zext_ln1027_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_ii_V_4),64));
    zext_ln541_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_203_p3),64));
end behav;
