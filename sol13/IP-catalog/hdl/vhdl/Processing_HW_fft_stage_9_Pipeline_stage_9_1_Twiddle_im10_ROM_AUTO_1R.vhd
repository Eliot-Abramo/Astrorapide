-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Processing_HW_fft_stage_9_Pipeline_stage_9_1_Twiddle_im10_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 23; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 256
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of Processing_HW_fft_stage_9_Pipeline_stage_9_1_Twiddle_im10_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00000000000000000000000", 1 => "11111110011011011110001", 2 => "11111100110110111101010", 3 => "11111011010010011110011", 
    4 => "11111001101110000010011", 5 => "11111000001001101010010", 6 => "11110110100101010110111", 7 => "11110101000001001001011", 
    8 => "11110011011101000010110", 9 => "11110001111001000011110", 10 => "11110000010101001101100", 11 => "11101110110001100000111", 
    12 => "11101101001101111110111", 13 => "11101011101010101000100", 14 => "11101010000111011110101", 15 => "11101000100100100010011", 
    16 => "11100111000001110100011", 17 => "11100101011111010101111", 18 => "11100011111101000111110", 19 => "11100010011011001010111", 
    20 => "11100000111001100000011", 21 => "11011111011000001000111", 22 => "11011101110111000101101", 23 => "11011100010110010111011", 
    24 => "11011010110101111111001", 25 => "11011001010101111101111", 26 => "11010111110110010100011", 27 => "11010110010111000011101", 
    28 => "11010100111000001100101", 29 => "11010011011001110000010", 30 => "11010001111011101111010", 31 => "11010000011110001010110", 
    32 => "11001111000001000011101", 33 => "11001101100100011010101", 34 => "11001100001000010000110", 35 => "11001010101100100110111", 
    36 => "11001001010001011110000", 37 => "11000111110110110110110", 38 => "11000110011100110010001", 39 => "11000101000011010001000", 
    40 => "11000011101010010100010", 41 => "11000010010001111100110", 42 => "11000000111010001011010", 43 => "10111111100011000000111", 
    44 => "10111110001100011110000", 45 => "10111100110110100011111", 46 => "10111011100001010011001", 47 => "10111010001100101100101", 
    48 => "10111000111000110001001", 49 => "10110111100101100001100", 50 => "10110110010010111110101", 51 => "10110101000001001001001", 
    52 => "10110011110000000010000", 53 => "10110010011111101001110", 54 => "10110001010000000001011", 55 => "10110000000001001001101", 
    56 => "10101110110011000011001", 57 => "10101101100101101110110", 58 => "10101100011001001101010", 59 => "10101011001101011111010", 
    60 => "10101010000010100101101", 61 => "10101000111000100001000", 62 => "10100111101111010010001", 63 => "10100110100110111001101", 
    64 => "10100101011111011000011", 65 => "10100100011000101110111", 66 => "10100011010010111101111", 67 => "10100010001110000110001", 
    68 => "10100001001010001000001", 69 => "10100000000111000100110", 70 => "10011111000100111100011", 71 => "10011110000011101111111", 
    72 => "10011101000011011111111", 73 => "10011100000100001100110", 74 => "10011011000101110111011", 75 => "10011010001000100000001", 
    76 => "10011001001100000111111", 77 => "10011000010000101111000", 78 => "10010111010110010110000", 79 => "10010110011100111101101", 
    80 => "10010101100100100110011", 81 => "10010100101101010000110", 82 => "10010011110110111101011", 83 => "10010011000001101100101", 
    84 => "10010010001101011111001", 85 => "10010001011010010101011", 86 => "10010000101000001111110", 87 => "10001111110111001110111", 
    88 => "10001111000111010011010", 89 => "10001110011000011101001", 90 => "10001101101010101101001", 91 => "10001100111110000011110", 
    92 => "10001100010010100001010", 93 => "10001011101000000110000", 94 => "10001010111110110010110", 95 => "10001010010110100111101", 
    96 => "10001001101111100101000", 97 => "10001001001001101011011", 98 => "10001000100100111011000", 99 => "10001000000001010100011", 
    100 => "10000111011110110111101", 101 => "10000110111101100101011", 102 => "10000110011101011101110", 103 => "10000101111110100001000", 
    104 => "10000101100000101111101", 105 => "10000101000100001001110", 106 => "10000100101000101111110", 107 => "10000100001110100001110", 
    108 => "10000011110101100000010", 109 => "10000011011101101011010", 110 => "10000011000111000011000", 111 => "10000010110001100111111", 
    112 => "10000010011101011010000", 113 => "10000010001010011001100", 114 => "10000001111000100110101", 115 => "10000001101000000001101", 
    116 => "10000001011000101010100", 117 => "10000001001010100001101", 118 => "10000000111101100110110", 119 => "10000000110001111010011", 
    120 => "10000000100111011100100", 121 => "10000000011110001101010", 122 => "10000000010110001100100", 123 => "10000000001111011010101", 
    124 => "10000000001001110111100", 125 => "10000000000101100011010", 126 => "10000000000010011101111", 127 => "10000000000000100111011", 
    128 => "10000000000000000000000", 129 => "10000000000000100111011", 130 => "10000000000010011101111", 131 => "10000000000101100011010", 
    132 => "10000000001001110111100", 133 => "10000000001111011010101", 134 => "10000000010110001100100", 135 => "10000000011110001101010", 
    136 => "10000000100111011100100", 137 => "10000000110001111010011", 138 => "10000000111101100110111", 139 => "10000001001010100001101", 
    140 => "10000001011000101010100", 141 => "10000001101000000001101", 142 => "10000001111000100110101", 143 => "10000010001010011001100", 
    144 => "10000010011101011010000", 145 => "10000010110001100111111", 146 => "10000011000111000011000", 147 => "10000011011101101011010", 
    148 => "10000011110101100000010", 149 => "10000100001110100001110", 150 => "10000100101000101111110", 151 => "10000101000100001001110", 
    152 => "10000101100000101111101", 153 => "10000101111110100001000", 154 => "10000110011101011101110", 155 => "10000110111101100101011", 
    156 => "10000111011110110111101", 157 => "10001000000001010100011", 158 => "10001000100100111011000", 159 => "10001001001001101011011", 
    160 => "10001001101111100101000", 161 => "10001010010110100111101", 162 => "10001010111110110010110", 163 => "10001011101000000110000", 
    164 => "10001100010010100001010", 165 => "10001100111110000011110", 166 => "10001101101010101101001", 167 => "10001110011000011101001", 
    168 => "10001111000111010011010", 169 => "10001111110111001110111", 170 => "10010000101000001111110", 171 => "10010001011010010101011", 
    172 => "10010010001101011111001", 173 => "10010011000001101100101", 174 => "10010011110110111101011", 175 => "10010100101101010000111", 
    176 => "10010101100100100110011", 177 => "10010110011100111101101", 178 => "10010111010110010110000", 179 => "10011000010000101111000", 
    180 => "10011001001100000111111", 181 => "10011010001000100000010", 182 => "10011011000101110111011", 183 => "10011100000100001100111", 
    184 => "10011101000011011111111", 185 => "10011110000011110000000", 186 => "10011111000100111100100", 187 => "10100000000111000100110", 
    188 => "10100001001010001000010", 189 => "10100010001110000110001", 190 => "10100011010010111101111", 191 => "10100100011000101110111", 
    192 => "10100101011111011000011", 193 => "10100110100110111001101", 194 => "10100111101111010010001", 195 => "10101000111000100001000", 
    196 => "10101010000010100101101", 197 => "10101011001101011111011", 198 => "10101100011001001101010", 199 => "10101101100101101110110", 
    200 => "10101110110011000011001", 201 => "10110000000001001001101", 202 => "10110001010000000001011", 203 => "10110010011111101001111", 
    204 => "10110011110000000010000", 205 => "10110101000001001001001", 206 => "10110110010010111110101", 207 => "10110111100101100001100", 
    208 => "10111000111000110001001", 209 => "10111010001100101100101", 210 => "10111011100001010011010", 211 => "10111100110110100011111", 
    212 => "10111110001100011110000", 213 => "10111111100011000000111", 214 => "11000000111010001011011", 215 => "11000010010001111100110", 
    216 => "11000011101010010100011", 217 => "11000101000011010001001", 218 => "11000110011100110010001", 219 => "11000111110110110110110", 
    220 => "11001001010001011110000", 221 => "11001010101100100111000", 222 => "11001100001000010000111", 223 => "11001101100100011010110", 
    224 => "11001111000001000011110", 225 => "11010000011110001010110", 226 => "11010001111011101111010", 227 => "11010011011001110000010", 
    228 => "11010100111000001100101", 229 => "11010110010111000011110", 230 => "11010111110110010100100", 231 => "11011001010101111101111", 
    232 => "11011010110101111111001", 233 => "11011100010110010111011", 234 => "11011101110111000101101", 235 => "11011111011000001001000", 
    236 => "11100000111001100000011", 237 => "11100010011011001011000", 238 => "11100011111101000111111", 239 => "11100101011111010101111", 
    240 => "11100111000001110100011", 241 => "11101000100100100010011", 242 => "11101010000111011110110", 243 => "11101011101010101000101", 
    244 => "11101101001101111111000", 245 => "11101110110001100001000", 246 => "11110000010101001101100", 247 => "11110001111001000011110", 
    248 => "11110011011101000010110", 249 => "11110101000001001001100", 250 => "11110110100101010111000", 251 => "11111000001001101010010", 
    252 => "11111001101110000010100", 253 => "11111011010010011110011", 254 => "11111100110110111101010", 255 => "11111110011011011110001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

