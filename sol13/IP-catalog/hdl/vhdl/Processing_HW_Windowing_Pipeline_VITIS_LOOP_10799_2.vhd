-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Processing_HW_Windowing_Pipeline_VITIS_LOOP_10799_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    D1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    D1_num_data_valid : IN STD_LOGIC_VECTOR (11 downto 0);
    D1_fifo_cap : IN STD_LOGIC_VECTOR (11 downto 0);
    D1_full_n : IN STD_LOGIC;
    D1_write : OUT STD_LOGIC;
    Buff0_re_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Buff0_re_ce0 : OUT STD_LOGIC;
    Buff0_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff0_im_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Buff0_im_ce0 : OUT STD_LOGIC;
    Buff0_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff1_re_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Buff1_re_ce0 : OUT STD_LOGIC;
    Buff1_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff1_im_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Buff1_im_ce0 : OUT STD_LOGIC;
    Buff1_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff2_re_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Buff2_re_ce0 : OUT STD_LOGIC;
    Buff2_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff2_im_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Buff2_im_ce0 : OUT STD_LOGIC;
    Buff2_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff3_re_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Buff3_re_ce0 : OUT STD_LOGIC;
    Buff3_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff3_im_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Buff3_im_ce0 : OUT STD_LOGIC;
    Buff3_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Processing_HW_Windowing_Pipeline_VITIS_LOOP_10799_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv24_199A : STD_LOGIC_VECTOR (23 downto 0) := "000000000001100110011010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv25_199A : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001100110011010";
    constant ap_const_lv27_3334 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000011001100110100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Hann_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_0_ce0 : STD_LOGIC;
    signal Hann_0_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_0_ce1 : STD_LOGIC;
    signal Hann_0_q1 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_0_address2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_0_ce2 : STD_LOGIC;
    signal Hann_0_q2 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_0_address3 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_0_ce3 : STD_LOGIC;
    signal Hann_0_q3 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_1_ce0 : STD_LOGIC;
    signal Hann_1_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_1_ce1 : STD_LOGIC;
    signal Hann_1_q1 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_1_address2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_1_ce2 : STD_LOGIC;
    signal Hann_1_q2 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_1_address3 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_1_ce3 : STD_LOGIC;
    signal Hann_1_q3 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_2_ce0 : STD_LOGIC;
    signal Hann_2_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_2_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_2_ce1 : STD_LOGIC;
    signal Hann_2_q1 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_2_address2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_2_ce2 : STD_LOGIC;
    signal Hann_2_q2 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_2_address3 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_2_ce3 : STD_LOGIC;
    signal Hann_2_q3 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_3_ce0 : STD_LOGIC;
    signal Hann_3_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_3_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_3_ce1 : STD_LOGIC;
    signal Hann_3_q1 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_3_address2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_3_ce2 : STD_LOGIC;
    signal Hann_3_q2 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_3_address3 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_3_ce3 : STD_LOGIC;
    signal Hann_3_q3 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_4_ce0 : STD_LOGIC;
    signal Hann_4_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_4_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_4_ce1 : STD_LOGIC;
    signal Hann_4_q1 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_4_address2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_4_ce2 : STD_LOGIC;
    signal Hann_4_q2 : STD_LOGIC_VECTOR (20 downto 0);
    signal Hann_4_address3 : STD_LOGIC_VECTOR (10 downto 0);
    signal Hann_4_ce3 : STD_LOGIC;
    signal Hann_4_q3 : STD_LOGIC_VECTOR (20 downto 0);
    signal D1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_V_1_reg_1020 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_V_1_reg_1020_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal j_V_1_reg_1020_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal j_V_1_reg_1020_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal j_V_1_reg_1020_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal j_V_1_reg_1020_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal j_V_1_reg_1020_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal j_V_1_reg_1020_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal j_V_1_reg_1020_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal j_V_1_reg_1020_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal j_V_1_reg_1020_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal j_V_1_reg_1020_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal j_V_1_reg_1020_pp0_iter12_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_fu_504_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_reg_1029 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_reg_1029_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_reg_1029_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_reg_1029_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_reg_1029_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_reg_1029_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_reg_1029_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_reg_1029_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_reg_1029_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_reg_1029_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_re_V_41_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_V_41_reg_1196 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_674_p7 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_1_reg_1201 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_re_V_42_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_V_42_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_694_p7 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_2_reg_1216 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_re_V_43_reg_1221 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_V_43_reg_1226 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_710_p7 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_3_reg_1231 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_re_V_44_reg_1236 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_V_44_reg_1241 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_726_p7 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_4_reg_1246 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1273_fu_750_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal sext_ln1273_11_fu_771_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal sext_ln1273_12_fu_792_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal sext_ln1273_13_fu_813_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_re_V_reg_1315 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_im_V_reg_1320 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_re_V_35_reg_1325 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_im_V_35_reg_1330 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_re_V_37_reg_1335 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_im_V_37_reg_1340 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_re_V_39_reg_1345 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_im_V_39_reg_1350 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_re_V_40_fu_947_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_V_40_reg_1355 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_V_40_fu_965_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_V_40_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1027_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10801_3_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10801_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10801_1_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10801_2_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_urem_fu_106 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1027_fu_662_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal phi_mul_fu_110 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln10801_fu_563_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_V_fu_114 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln840_fu_498_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_j_V_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_508_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_508_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_fu_519_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_1_fu_530_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln10801_fu_541_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_569_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_588_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_978_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_5_fu_588_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_606_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_985_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_6_fu_606_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_624_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_992_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_7_fu_624_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1027_fu_650_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1027_3_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_674_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_508_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln10801_fu_690_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_753_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_762_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_774_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_783_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_795_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_804_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_816_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_825_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_753_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_762_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_774_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_783_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_795_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_804_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_816_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_825_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal sext_ln818_2_fu_917_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln818_fu_911_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln818_4_fu_923_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln818_6_fu_929_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln813_1_fu_941_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln813_fu_935_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln818_3_fu_920_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln818_1_fu_914_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln818_5_fu_926_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln818_7_fu_932_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln813_4_fu_959_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln813_3_fu_953_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_978_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_978_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_985_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_985_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_992_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_992_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_508_ce : STD_LOGIC;
    signal grp_fu_753_ce : STD_LOGIC;
    signal grp_fu_762_ce : STD_LOGIC;
    signal grp_fu_774_ce : STD_LOGIC;
    signal grp_fu_783_ce : STD_LOGIC;
    signal grp_fu_795_ce : STD_LOGIC;
    signal grp_fu_804_ce : STD_LOGIC;
    signal grp_fu_816_ce : STD_LOGIC;
    signal grp_fu_825_ce : STD_LOGIC;
    signal grp_fu_978_ce : STD_LOGIC;
    signal grp_fu_985_ce : STD_LOGIC;
    signal grp_fu_992_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_978_p00 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_985_p00 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_992_p00 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Processing_HW_urem_11ns_4ns_3_15_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Processing_HW_mux_53_21_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (20 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        din3 : IN STD_LOGIC_VECTOR (20 downto 0);
        din4 : IN STD_LOGIC_VECTOR (20 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component Processing_HW_mul_32s_21s_53_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;


    component Processing_HW_mul_mul_12ns_13ns_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component Processing_HW_mul_mul_13ns_14ns_27_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component Processing_HW_Windowing_Pipeline_VITIS_LOOP_10799_2_Hann_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address3 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component Processing_HW_Windowing_Pipeline_VITIS_LOOP_10799_2_Hann_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address3 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component Processing_HW_Windowing_Pipeline_VITIS_LOOP_10799_2_Hann_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address3 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component Processing_HW_Windowing_Pipeline_VITIS_LOOP_10799_2_Hann_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address3 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component Processing_HW_Windowing_Pipeline_VITIS_LOOP_10799_2_Hann_4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (20 downto 0);
        address3 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component Processing_HW_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    Hann_0_U : component Processing_HW_Windowing_Pipeline_VITIS_LOOP_10799_2_Hann_0_ROM_AUTO_1R
    generic map (
        DataWidth => 21,
        AddressRange => 1639,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Hann_0_address0,
        ce0 => Hann_0_ce0,
        q0 => Hann_0_q0,
        address1 => Hann_0_address1,
        ce1 => Hann_0_ce1,
        q1 => Hann_0_q1,
        address2 => Hann_0_address2,
        ce2 => Hann_0_ce2,
        q2 => Hann_0_q2,
        address3 => Hann_0_address3,
        ce3 => Hann_0_ce3,
        q3 => Hann_0_q3);

    Hann_1_U : component Processing_HW_Windowing_Pipeline_VITIS_LOOP_10799_2_Hann_1_ROM_AUTO_1R
    generic map (
        DataWidth => 21,
        AddressRange => 1639,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Hann_1_address0,
        ce0 => Hann_1_ce0,
        q0 => Hann_1_q0,
        address1 => Hann_1_address1,
        ce1 => Hann_1_ce1,
        q1 => Hann_1_q1,
        address2 => Hann_1_address2,
        ce2 => Hann_1_ce2,
        q2 => Hann_1_q2,
        address3 => Hann_1_address3,
        ce3 => Hann_1_ce3,
        q3 => Hann_1_q3);

    Hann_2_U : component Processing_HW_Windowing_Pipeline_VITIS_LOOP_10799_2_Hann_2_ROM_AUTO_1R
    generic map (
        DataWidth => 21,
        AddressRange => 1639,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Hann_2_address0,
        ce0 => Hann_2_ce0,
        q0 => Hann_2_q0,
        address1 => Hann_2_address1,
        ce1 => Hann_2_ce1,
        q1 => Hann_2_q1,
        address2 => Hann_2_address2,
        ce2 => Hann_2_ce2,
        q2 => Hann_2_q2,
        address3 => Hann_2_address3,
        ce3 => Hann_2_ce3,
        q3 => Hann_2_q3);

    Hann_3_U : component Processing_HW_Windowing_Pipeline_VITIS_LOOP_10799_2_Hann_3_ROM_AUTO_1R
    generic map (
        DataWidth => 21,
        AddressRange => 1639,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Hann_3_address0,
        ce0 => Hann_3_ce0,
        q0 => Hann_3_q0,
        address1 => Hann_3_address1,
        ce1 => Hann_3_ce1,
        q1 => Hann_3_q1,
        address2 => Hann_3_address2,
        ce2 => Hann_3_ce2,
        q2 => Hann_3_q2,
        address3 => Hann_3_address3,
        ce3 => Hann_3_ce3,
        q3 => Hann_3_q3);

    Hann_4_U : component Processing_HW_Windowing_Pipeline_VITIS_LOOP_10799_2_Hann_4_ROM_AUTO_1R
    generic map (
        DataWidth => 21,
        AddressRange => 1639,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Hann_4_address0,
        ce0 => Hann_4_ce0,
        q0 => Hann_4_q0,
        address1 => Hann_4_address1,
        ce1 => Hann_4_ce1,
        q1 => Hann_4_q1,
        address2 => Hann_4_address2,
        ce2 => Hann_4_ce2,
        q2 => Hann_4_q2,
        address3 => Hann_4_address3,
        ce3 => Hann_4_ce3,
        q3 => Hann_4_q3);

    urem_11ns_4ns_3_15_1_U37 : component Processing_HW_urem_11ns_4ns_3_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_508_p0,
        din1 => grp_fu_508_p1,
        ce => grp_fu_508_ce,
        dout => grp_fu_508_p2);

    mux_53_21_1_1_U38 : component Processing_HW_mux_53_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 21,
        din1_WIDTH => 21,
        din2_WIDTH => 21,
        din3_WIDTH => 21,
        din4_WIDTH => 21,
        din5_WIDTH => 3,
        dout_WIDTH => 21)
    port map (
        din0 => Hann_0_q3,
        din1 => Hann_1_q3,
        din2 => Hann_2_q3,
        din3 => Hann_3_q3,
        din4 => Hann_4_q3,
        din5 => tmp_1_fu_674_p6,
        dout => tmp_1_fu_674_p7);

    mux_53_21_1_1_U39 : component Processing_HW_mux_53_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 21,
        din1_WIDTH => 21,
        din2_WIDTH => 21,
        din3_WIDTH => 21,
        din4_WIDTH => 21,
        din5_WIDTH => 3,
        dout_WIDTH => 21)
    port map (
        din0 => Hann_3_q2,
        din1 => Hann_4_q2,
        din2 => Hann_0_q2,
        din3 => Hann_1_q2,
        din4 => Hann_2_q2,
        din5 => trunc_ln10801_fu_690_p1,
        dout => tmp_2_fu_694_p7);

    mux_53_21_1_1_U40 : component Processing_HW_mux_53_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 21,
        din1_WIDTH => 21,
        din2_WIDTH => 21,
        din3_WIDTH => 21,
        din4_WIDTH => 21,
        din5_WIDTH => 3,
        dout_WIDTH => 21)
    port map (
        din0 => Hann_1_q1,
        din1 => Hann_2_q1,
        din2 => Hann_3_q1,
        din3 => Hann_4_q1,
        din4 => Hann_0_q1,
        din5 => trunc_ln10801_fu_690_p1,
        dout => tmp_3_fu_710_p7);

    mux_53_21_1_1_U41 : component Processing_HW_mux_53_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 21,
        din1_WIDTH => 21,
        din2_WIDTH => 21,
        din3_WIDTH => 21,
        din4_WIDTH => 21,
        din5_WIDTH => 3,
        dout_WIDTH => 21)
    port map (
        din0 => Hann_4_q0,
        din1 => Hann_0_q0,
        din2 => Hann_1_q0,
        din3 => Hann_2_q0,
        din4 => Hann_3_q0,
        din5 => trunc_ln10801_fu_690_p1,
        dout => tmp_4_fu_726_p7);

    mul_32s_21s_53_2_1_U42 : component Processing_HW_mul_32s_21s_53_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 21,
        dout_WIDTH => 53)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_V_41_reg_1191,
        din1 => grp_fu_753_p1,
        ce => grp_fu_753_ce,
        dout => grp_fu_753_p2);

    mul_32s_21s_53_2_1_U43 : component Processing_HW_mul_32s_21s_53_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 21,
        dout_WIDTH => 53)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_V_41_reg_1196,
        din1 => grp_fu_762_p1,
        ce => grp_fu_762_ce,
        dout => grp_fu_762_p2);

    mul_32s_21s_53_2_1_U44 : component Processing_HW_mul_32s_21s_53_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 21,
        dout_WIDTH => 53)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_V_42_reg_1206,
        din1 => grp_fu_774_p1,
        ce => grp_fu_774_ce,
        dout => grp_fu_774_p2);

    mul_32s_21s_53_2_1_U45 : component Processing_HW_mul_32s_21s_53_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 21,
        dout_WIDTH => 53)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_V_42_reg_1211,
        din1 => grp_fu_783_p1,
        ce => grp_fu_783_ce,
        dout => grp_fu_783_p2);

    mul_32s_21s_53_2_1_U46 : component Processing_HW_mul_32s_21s_53_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 21,
        dout_WIDTH => 53)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_V_43_reg_1221,
        din1 => grp_fu_795_p1,
        ce => grp_fu_795_ce,
        dout => grp_fu_795_p2);

    mul_32s_21s_53_2_1_U47 : component Processing_HW_mul_32s_21s_53_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 21,
        dout_WIDTH => 53)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_V_43_reg_1226,
        din1 => grp_fu_804_p1,
        ce => grp_fu_804_ce,
        dout => grp_fu_804_p2);

    mul_32s_21s_53_2_1_U48 : component Processing_HW_mul_32s_21s_53_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 21,
        dout_WIDTH => 53)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_V_44_reg_1236,
        din1 => grp_fu_816_p1,
        ce => grp_fu_816_ce,
        dout => grp_fu_816_p2);

    mul_32s_21s_53_2_1_U49 : component Processing_HW_mul_32s_21s_53_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 21,
        dout_WIDTH => 53)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_V_44_reg_1241,
        din1 => grp_fu_825_p1,
        ce => grp_fu_825_ce,
        dout => grp_fu_825_p2);

    mul_mul_12ns_13ns_25_4_1_U50 : component Processing_HW_mul_mul_12ns_13ns_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 13,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_978_p0,
        din1 => grp_fu_978_p1,
        ce => grp_fu_978_ce,
        dout => grp_fu_978_p2);

    mul_mul_13ns_14ns_27_4_1_U51 : component Processing_HW_mul_mul_13ns_14ns_27_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 14,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_985_p0,
        din1 => grp_fu_985_p1,
        ce => grp_fu_985_ce,
        dout => grp_fu_985_p2);

    mul_mul_13ns_14ns_27_4_1_U52 : component Processing_HW_mul_mul_13ns_14ns_27_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 14,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_992_p0,
        din1 => grp_fu_992_p1,
        ce => grp_fu_992_ce,
        dout => grp_fu_992_p2);

    flow_control_loop_pipe_sequential_init_U : component Processing_HW_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_V_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1027_fu_492_p2 = ap_const_lv1_0))) then 
                    j_V_fu_114 <= add_ln840_fu_498_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_V_fu_114 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    phi_mul_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    phi_mul_fu_110 <= ap_const_lv24_0;
                elsif ((ap_enable_reg_pp0_iter13 = ap_const_logic_1)) then 
                    phi_mul_fu_110 <= add_ln10801_fu_563_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_urem_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    phi_urem_fu_106 <= ap_const_lv12_0;
                elsif ((ap_enable_reg_pp0_iter14 = ap_const_logic_1)) then 
                    phi_urem_fu_106 <= select_ln1027_fu_662_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                j_V_1_reg_1020_pp0_iter10_reg <= j_V_1_reg_1020_pp0_iter9_reg;
                j_V_1_reg_1020_pp0_iter11_reg <= j_V_1_reg_1020_pp0_iter10_reg;
                j_V_1_reg_1020_pp0_iter12_reg <= j_V_1_reg_1020_pp0_iter11_reg;
                j_V_1_reg_1020_pp0_iter2_reg <= j_V_1_reg_1020_pp0_iter1_reg;
                j_V_1_reg_1020_pp0_iter3_reg <= j_V_1_reg_1020_pp0_iter2_reg;
                j_V_1_reg_1020_pp0_iter4_reg <= j_V_1_reg_1020_pp0_iter3_reg;
                j_V_1_reg_1020_pp0_iter5_reg <= j_V_1_reg_1020_pp0_iter4_reg;
                j_V_1_reg_1020_pp0_iter6_reg <= j_V_1_reg_1020_pp0_iter5_reg;
                j_V_1_reg_1020_pp0_iter7_reg <= j_V_1_reg_1020_pp0_iter6_reg;
                j_V_1_reg_1020_pp0_iter8_reg <= j_V_1_reg_1020_pp0_iter7_reg;
                j_V_1_reg_1020_pp0_iter9_reg <= j_V_1_reg_1020_pp0_iter8_reg;
                lhs_reg_1029_pp0_iter2_reg <= lhs_reg_1029_pp0_iter1_reg;
                lhs_reg_1029_pp0_iter3_reg <= lhs_reg_1029_pp0_iter2_reg;
                lhs_reg_1029_pp0_iter4_reg <= lhs_reg_1029_pp0_iter3_reg;
                lhs_reg_1029_pp0_iter5_reg <= lhs_reg_1029_pp0_iter4_reg;
                lhs_reg_1029_pp0_iter6_reg <= lhs_reg_1029_pp0_iter5_reg;
                lhs_reg_1029_pp0_iter7_reg <= lhs_reg_1029_pp0_iter6_reg;
                lhs_reg_1029_pp0_iter8_reg <= lhs_reg_1029_pp0_iter7_reg;
                lhs_reg_1029_pp0_iter9_reg <= lhs_reg_1029_pp0_iter8_reg;
                tmp_1_reg_1201 <= tmp_1_fu_674_p7;
                tmp_2_reg_1216 <= tmp_2_fu_694_p7;
                tmp_3_reg_1231 <= tmp_3_fu_710_p7;
                tmp_4_reg_1246 <= tmp_4_fu_726_p7;
                tmp_im_V_35_reg_1330 <= grp_fu_783_p2(52 downto 22);
                tmp_im_V_37_reg_1340 <= grp_fu_804_p2(52 downto 22);
                tmp_im_V_39_reg_1350 <= grp_fu_825_p2(52 downto 22);
                tmp_im_V_40_reg_1360 <= tmp_im_V_40_fu_965_p2;
                tmp_im_V_41_reg_1196 <= Buff0_im_q0;
                tmp_im_V_42_reg_1211 <= Buff1_im_q0;
                tmp_im_V_43_reg_1226 <= Buff2_im_q0;
                tmp_im_V_44_reg_1241 <= Buff3_im_q0;
                tmp_im_V_reg_1320 <= grp_fu_762_p2(52 downto 22);
                tmp_re_V_35_reg_1325 <= grp_fu_774_p2(52 downto 22);
                tmp_re_V_37_reg_1335 <= grp_fu_795_p2(52 downto 22);
                tmp_re_V_39_reg_1345 <= grp_fu_816_p2(52 downto 22);
                tmp_re_V_40_reg_1355 <= tmp_re_V_40_fu_947_p2;
                tmp_re_V_41_reg_1191 <= Buff0_re_q0;
                tmp_re_V_42_reg_1206 <= Buff1_re_q0;
                tmp_re_V_43_reg_1221 <= Buff2_re_q0;
                tmp_re_V_44_reg_1236 <= Buff3_re_q0;
                tmp_re_V_reg_1315 <= grp_fu_753_p2(52 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                j_V_1_reg_1020 <= ap_sig_allocacmp_j_V_1;
                j_V_1_reg_1020_pp0_iter1_reg <= j_V_1_reg_1020;
                lhs_reg_1029_pp0_iter1_reg <= lhs_reg_1029;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_492_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lhs_reg_1029 <= lhs_fu_504_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Buff0_im_address0 <= zext_ln1027_fu_552_p1(11 - 1 downto 0);

    Buff0_im_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff0_im_ce0 <= ap_const_logic_1;
        else 
            Buff0_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff0_re_address0 <= zext_ln1027_fu_552_p1(11 - 1 downto 0);

    Buff0_re_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff0_re_ce0 <= ap_const_logic_1;
        else 
            Buff0_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff1_im_address0 <= zext_ln1027_fu_552_p1(11 - 1 downto 0);

    Buff1_im_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff1_im_ce0 <= ap_const_logic_1;
        else 
            Buff1_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff1_re_address0 <= zext_ln1027_fu_552_p1(11 - 1 downto 0);

    Buff1_re_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff1_re_ce0 <= ap_const_logic_1;
        else 
            Buff1_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff2_im_address0 <= zext_ln1027_fu_552_p1(11 - 1 downto 0);

    Buff2_im_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff2_im_ce0 <= ap_const_logic_1;
        else 
            Buff2_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff2_re_address0 <= zext_ln1027_fu_552_p1(11 - 1 downto 0);

    Buff2_re_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff2_re_ce0 <= ap_const_logic_1;
        else 
            Buff2_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff3_im_address0 <= zext_ln1027_fu_552_p1(11 - 1 downto 0);

    Buff3_im_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff3_im_ce0 <= ap_const_logic_1;
        else 
            Buff3_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff3_re_address0 <= zext_ln1027_fu_552_p1(11 - 1 downto 0);

    Buff3_re_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff3_re_ce0 <= ap_const_logic_1;
        else 
            Buff3_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    D1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter18, D1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            D1_blk_n <= D1_full_n;
        else 
            D1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    D1_din <= (tmp_im_V_40_reg_1360 & tmp_re_V_40_reg_1355);

    D1_write_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            D1_write <= ap_const_logic_1;
        else 
            D1_write <= ap_const_logic_0;
        end if; 
    end process;

    Hann_0_address0 <= zext_ln10801_2_fu_633_p1(11 - 1 downto 0);
    Hann_0_address1 <= zext_ln10801_1_fu_615_p1(11 - 1 downto 0);
    Hann_0_address2 <= zext_ln10801_fu_597_p1(11 - 1 downto 0);
    Hann_0_address3 <= zext_ln10801_3_fu_579_p1(11 - 1 downto 0);

    Hann_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_0_ce0 <= ap_const_logic_1;
        else 
            Hann_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_0_ce1 <= ap_const_logic_1;
        else 
            Hann_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_0_ce2_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_0_ce2 <= ap_const_logic_1;
        else 
            Hann_0_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_0_ce3_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_0_ce3 <= ap_const_logic_1;
        else 
            Hann_0_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    Hann_1_address0 <= zext_ln10801_2_fu_633_p1(11 - 1 downto 0);
    Hann_1_address1 <= zext_ln10801_1_fu_615_p1(11 - 1 downto 0);
    Hann_1_address2 <= zext_ln10801_fu_597_p1(11 - 1 downto 0);
    Hann_1_address3 <= zext_ln10801_3_fu_579_p1(11 - 1 downto 0);

    Hann_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_1_ce0 <= ap_const_logic_1;
        else 
            Hann_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_1_ce1 <= ap_const_logic_1;
        else 
            Hann_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_1_ce2_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_1_ce2 <= ap_const_logic_1;
        else 
            Hann_1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_1_ce3_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_1_ce3 <= ap_const_logic_1;
        else 
            Hann_1_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    Hann_2_address0 <= zext_ln10801_2_fu_633_p1(11 - 1 downto 0);
    Hann_2_address1 <= zext_ln10801_1_fu_615_p1(11 - 1 downto 0);
    Hann_2_address2 <= zext_ln10801_fu_597_p1(11 - 1 downto 0);
    Hann_2_address3 <= zext_ln10801_3_fu_579_p1(11 - 1 downto 0);

    Hann_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_2_ce0 <= ap_const_logic_1;
        else 
            Hann_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_2_ce1 <= ap_const_logic_1;
        else 
            Hann_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_2_ce2_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_2_ce2 <= ap_const_logic_1;
        else 
            Hann_2_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_2_ce3_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_2_ce3 <= ap_const_logic_1;
        else 
            Hann_2_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    Hann_3_address0 <= zext_ln10801_2_fu_633_p1(11 - 1 downto 0);
    Hann_3_address1 <= zext_ln10801_1_fu_615_p1(11 - 1 downto 0);
    Hann_3_address2 <= zext_ln10801_fu_597_p1(11 - 1 downto 0);
    Hann_3_address3 <= zext_ln10801_3_fu_579_p1(11 - 1 downto 0);

    Hann_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_3_ce0 <= ap_const_logic_1;
        else 
            Hann_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_3_ce1 <= ap_const_logic_1;
        else 
            Hann_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_3_ce2_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_3_ce2 <= ap_const_logic_1;
        else 
            Hann_3_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_3_ce3_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_3_ce3 <= ap_const_logic_1;
        else 
            Hann_3_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    Hann_4_address0 <= zext_ln10801_2_fu_633_p1(11 - 1 downto 0);
    Hann_4_address1 <= zext_ln10801_1_fu_615_p1(11 - 1 downto 0);
    Hann_4_address2 <= zext_ln10801_fu_597_p1(11 - 1 downto 0);
    Hann_4_address3 <= zext_ln10801_3_fu_579_p1(11 - 1 downto 0);

    Hann_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_4_ce0 <= ap_const_logic_1;
        else 
            Hann_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_4_ce1 <= ap_const_logic_1;
        else 
            Hann_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_4_ce2_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_4_ce2 <= ap_const_logic_1;
        else 
            Hann_4_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_4_ce3_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_4_ce3 <= ap_const_logic_1;
        else 
            Hann_4_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1027_fu_650_p2 <= std_logic_vector(unsigned(phi_urem_fu_106) + unsigned(ap_const_lv12_1));
    add_ln10801_fu_563_p2 <= std_logic_vector(unsigned(phi_mul_fu_110) + unsigned(ap_const_lv24_199A));
    add_ln813_1_fu_941_p2 <= std_logic_vector(signed(sext_ln818_4_fu_923_p1) + signed(sext_ln818_6_fu_929_p1));
    add_ln813_3_fu_953_p2 <= std_logic_vector(signed(sext_ln818_3_fu_920_p1) + signed(sext_ln818_1_fu_914_p1));
    add_ln813_4_fu_959_p2 <= std_logic_vector(signed(sext_ln818_5_fu_926_p1) + signed(sext_ln818_7_fu_932_p1));
    add_ln813_fu_935_p2 <= std_logic_vector(signed(sext_ln818_2_fu_917_p1) + signed(sext_ln818_fu_911_p1));
    add_ln840_fu_498_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_V_1) + unsigned(ap_const_lv12_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter18, D1_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_0 = D1_full_n));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter18, D1_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_0 = D1_full_n));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter18, D1_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_0 = D1_full_n));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp0_stage0_iter18_assign_proc : process(D1_full_n)
    begin
                ap_block_state19_pp0_stage0_iter18 <= (ap_const_logic_0 = D1_full_n);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1027_fu_492_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_492_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter17_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_V_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_V_fu_114)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_V_1 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_j_V_1 <= j_V_fu_114;
        end if; 
    end process;


    grp_fu_508_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_508_ce <= ap_const_logic_1;
        else 
            grp_fu_508_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_508_p0 <= ap_sig_allocacmp_j_V_1(11 - 1 downto 0);
    grp_fu_508_p1 <= ap_const_lv11_5(4 - 1 downto 0);

    grp_fu_753_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_753_ce <= ap_const_logic_1;
        else 
            grp_fu_753_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_753_p1 <= sext_ln1273_fu_750_p1(21 - 1 downto 0);

    grp_fu_762_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_762_ce <= ap_const_logic_1;
        else 
            grp_fu_762_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_762_p1 <= sext_ln1273_fu_750_p1(21 - 1 downto 0);

    grp_fu_774_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_774_ce <= ap_const_logic_1;
        else 
            grp_fu_774_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_774_p1 <= sext_ln1273_11_fu_771_p1(21 - 1 downto 0);

    grp_fu_783_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_783_ce <= ap_const_logic_1;
        else 
            grp_fu_783_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_783_p1 <= sext_ln1273_11_fu_771_p1(21 - 1 downto 0);

    grp_fu_795_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_795_ce <= ap_const_logic_1;
        else 
            grp_fu_795_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_795_p1 <= sext_ln1273_12_fu_792_p1(21 - 1 downto 0);

    grp_fu_804_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_804_ce <= ap_const_logic_1;
        else 
            grp_fu_804_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_804_p1 <= sext_ln1273_12_fu_792_p1(21 - 1 downto 0);

    grp_fu_816_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_816_ce <= ap_const_logic_1;
        else 
            grp_fu_816_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_816_p1 <= sext_ln1273_13_fu_813_p1(21 - 1 downto 0);

    grp_fu_825_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_825_ce <= ap_const_logic_1;
        else 
            grp_fu_825_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_825_p1 <= sext_ln1273_13_fu_813_p1(21 - 1 downto 0);

    grp_fu_978_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_978_ce <= ap_const_logic_1;
        else 
            grp_fu_978_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_978_p0 <= grp_fu_978_p00(12 - 1 downto 0);
    grp_fu_978_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_519_p3),25));
    grp_fu_978_p1 <= ap_const_lv25_199A(13 - 1 downto 0);

    grp_fu_985_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_985_ce <= ap_const_logic_1;
        else 
            grp_fu_985_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_985_p0 <= grp_fu_985_p00(13 - 1 downto 0);
    grp_fu_985_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_fu_530_p3),27));
    grp_fu_985_p1 <= ap_const_lv27_3334(14 - 1 downto 0);

    grp_fu_992_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_992_ce <= ap_const_logic_1;
        else 
            grp_fu_992_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_992_p0 <= grp_fu_992_p00(13 - 1 downto 0);
    grp_fu_992_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln10801_fu_541_p1),27));
    grp_fu_992_p1 <= ap_const_lv27_3334(14 - 1 downto 0);
    icmp_ln1027_3_fu_656_p2 <= "1" when (unsigned(add_ln1027_fu_650_p2) < unsigned(ap_const_lv12_5)) else "0";
    icmp_ln1027_fu_492_p2 <= "1" when (ap_sig_allocacmp_j_V_1 = ap_const_lv12_800) else "0";
    lhs_fu_504_p1 <= ap_sig_allocacmp_j_V_1(11 - 1 downto 0);
    ret_V_1_fu_530_p3 <= (ap_const_lv2_2 & lhs_reg_1029_pp0_iter9_reg);
    ret_V_fu_519_p3 <= (ap_const_lv1_1 & lhs_reg_1029_pp0_iter9_reg);
    select_ln1027_fu_662_p3 <= 
        add_ln1027_fu_650_p2 when (icmp_ln1027_3_fu_656_p2(0) = '1') else 
        ap_const_lv12_0;
        sext_ln10801_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_519_p3),13));

        sext_ln1273_11_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1216),53));

        sext_ln1273_12_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_1231),53));

        sext_ln1273_13_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1246),53));

        sext_ln1273_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1201),53));

        sext_ln818_1_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_im_V_reg_1320),32));

        sext_ln818_2_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_re_V_35_reg_1325),32));

        sext_ln818_3_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_im_V_35_reg_1330),32));

        sext_ln818_4_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_re_V_37_reg_1335),32));

        sext_ln818_5_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_im_V_37_reg_1340),32));

        sext_ln818_6_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_re_V_39_reg_1345),32));

        sext_ln818_7_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_im_V_39_reg_1350),32));

        sext_ln818_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_re_V_reg_1315),32));

    tmp_1_fu_674_p6 <= phi_urem_fu_106(3 - 1 downto 0);
    tmp_5_fu_588_p1 <= grp_fu_978_p2;
    tmp_5_fu_588_p4 <= tmp_5_fu_588_p1(24 downto 15);
    tmp_6_fu_606_p1 <= grp_fu_985_p2;
    tmp_6_fu_606_p4 <= tmp_6_fu_606_p1(26 downto 16);
    tmp_7_fu_624_p1 <= grp_fu_992_p2;
    tmp_7_fu_624_p4 <= tmp_7_fu_624_p1(26 downto 16);
    tmp_fu_569_p4 <= phi_mul_fu_110(23 downto 15);
    tmp_im_V_40_fu_965_p2 <= std_logic_vector(unsigned(add_ln813_4_fu_959_p2) + unsigned(add_ln813_3_fu_953_p2));
    tmp_re_V_40_fu_947_p2 <= std_logic_vector(unsigned(add_ln813_1_fu_941_p2) + unsigned(add_ln813_fu_935_p2));
    trunc_ln10801_fu_690_p1 <= grp_fu_508_p2(3 - 1 downto 0);
    zext_ln1027_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_1_reg_1020_pp0_iter12_reg),64));
    zext_ln10801_1_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_606_p4),64));
    zext_ln10801_2_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_624_p4),64));
    zext_ln10801_3_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_569_p4),64));
    zext_ln10801_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_588_p4),64));
end behav;
