-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Processing_HW_fft_stage_8_Pipeline_stage_8_1_Twiddle_im8_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 23; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of Processing_HW_fft_stage_8_Pipeline_stage_8_1_Twiddle_im8_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00000000000000000000000", 1 => "11111100110110111101010", 2 => "11111001101110000010011", 3 => "11110110100101010110111", 
    4 => "11110011011101000010110", 5 => "11110000010101001101100", 6 => "11101101001101111110111", 7 => "11101010000111011110101", 
    8 => "11100111000001110100011", 9 => "11100011111101000111110", 10 => "11100000111001100000011", 11 => "11011101110111000101101", 
    12 => "11011010110101111111001", 13 => "11010111110110010100011", 14 => "11010100111000001100101", 15 => "11010001111011101111010", 
    16 => "11001111000001000011101", 17 => "11001100001000010000110", 18 => "11001001010001011110000", 19 => "11000110011100110010001", 
    20 => "11000011101010010100010", 21 => "11000000111010001011010", 22 => "10111110001100011110000", 23 => "10111011100001010011001", 
    24 => "10111000111000110001001", 25 => "10110110010010111110101", 26 => "10110011110000000010000", 27 => "10110001010000000001011", 
    28 => "10101110110011000011001", 29 => "10101100011001001101010", 30 => "10101010000010100101101", 31 => "10100111101111010010001", 
    32 => "10100101011111011000011", 33 => "10100011010010111101111", 34 => "10100001001010001000001", 35 => "10011111000100111100011", 
    36 => "10011101000011011111111", 37 => "10011011000101110111011", 38 => "10011001001100000111111", 39 => "10010111010110010110000", 
    40 => "10010101100100100110011", 41 => "10010011110110111101011", 42 => "10010010001101011111001", 43 => "10010000101000001111110", 
    44 => "10001111000111010011010", 45 => "10001101101010101101001", 46 => "10001100010010100001010", 47 => "10001010111110110010110", 
    48 => "10001001101111100101000", 49 => "10001000100100111011000", 50 => "10000111011110110111101", 51 => "10000110011101011101110", 
    52 => "10000101100000101111101", 53 => "10000100101000101111110", 54 => "10000011110101100000010", 55 => "10000011000111000011000", 
    56 => "10000010011101011010000", 57 => "10000001111000100110101", 58 => "10000001011000101010100", 59 => "10000000111101100110110", 
    60 => "10000000100111011100100", 61 => "10000000010110001100100", 62 => "10000000001001110111100", 63 => "10000000000010011101111", 
    64 => "10000000000000000000000", 65 => "10000000000010011101111", 66 => "10000000001001110111100", 67 => "10000000010110001100100", 
    68 => "10000000100111011100100", 69 => "10000000111101100110111", 70 => "10000001011000101010100", 71 => "10000001111000100110101", 
    72 => "10000010011101011010000", 73 => "10000011000111000011000", 74 => "10000011110101100000010", 75 => "10000100101000101111110", 
    76 => "10000101100000101111101", 77 => "10000110011101011101110", 78 => "10000111011110110111101", 79 => "10001000100100111011000", 
    80 => "10001001101111100101000", 81 => "10001010111110110010110", 82 => "10001100010010100001010", 83 => "10001101101010101101001", 
    84 => "10001111000111010011010", 85 => "10010000101000001111110", 86 => "10010010001101011111001", 87 => "10010011110110111101011", 
    88 => "10010101100100100110011", 89 => "10010111010110010110000", 90 => "10011001001100000111111", 91 => "10011011000101110111011", 
    92 => "10011101000011011111111", 93 => "10011111000100111100100", 94 => "10100001001010001000010", 95 => "10100011010010111101111", 
    96 => "10100101011111011000011", 97 => "10100111101111010010001", 98 => "10101010000010100101101", 99 => "10101100011001001101010", 
    100 => "10101110110011000011001", 101 => "10110001010000000001011", 102 => "10110011110000000010000", 103 => "10110110010010111110101", 
    104 => "10111000111000110001001", 105 => "10111011100001010011010", 106 => "10111110001100011110000", 107 => "11000000111010001011011", 
    108 => "11000011101010010100011", 109 => "11000110011100110010001", 110 => "11001001010001011110000", 111 => "11001100001000010000111", 
    112 => "11001111000001000011110", 113 => "11010001111011101111010", 114 => "11010100111000001100101", 115 => "11010111110110010100100", 
    116 => "11011010110101111111001", 117 => "11011101110111000101101", 118 => "11100000111001100000011", 119 => "11100011111101000111111", 
    120 => "11100111000001110100011", 121 => "11101010000111011110110", 122 => "11101101001101111111000", 123 => "11110000010101001101100", 
    124 => "11110011011101000010110", 125 => "11110110100101010111000", 126 => "11111001101110000010100", 127 => "11111100110110111101010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

