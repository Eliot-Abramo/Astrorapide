-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Processing_HW_fft_stage_7_Pipeline_stage_7_1_Twiddle_re5_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 24; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of Processing_HW_fft_stage_7_Pipeline_stage_7_1_Twiddle_re5_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "010000000000000000000000", 1 => "001111111110110001000011", 2 => "001111111011000100011011", 3 => "001111110100111010101011", 
    4 => "001111101100010100101111", 5 => "001111100001010011111101", 6 => "001111010011111010000010", 7 => "001111000100001001000010", 
    8 => "001110110010000011010111", 9 => "001110011101101011110101", 10 => "001110000111000101100101", 11 => "001101101110010100000110", 
    12 => "001101010011011011001100", 13 => "001100110110011111000000", 14 => "001100010111100100000000", 15 => "001011110110101110111110", 
    16 => "001011010100000100111100", 17 => "001010101111101011010010", 18 => "001010001001100111100110", 19 => "001001100001111111101111", 
    20 => "001000111000111001110110", 21 => "001000001110011100001110", 22 => "000111100010101101011100", 23 => "000110110101110100010000", 
    24 => "000110000111110111100010", 25 => "000101011000111110011010", 26 => "000100101001010000000110", 27 => "000011111000110011111100", 
    28 => "000011000111110001011011", 29 => "000010010110010000001000", 30 => "000001100100010111101001", 31 => "000000110010001111101100", 
    32 => "111111111111111111111111", 33 => "111111001101110000010010", 34 => "111110011011101000010101", 35 => "111101101001101111110111", 
    36 => "111100111000001110100011", 37 => "111100000111001100000011", 38 => "111011010110101111111001", 39 => "111010100111000001100101", 
    40 => "111001111000001000011100", 41 => "111001001010001011110000", 42 => "111000011101010010100010", 43 => "110111110001100011110000", 
    44 => "110111000111000110001000", 45 => "110110011110000000001111", 46 => "110101110110011000011001", 47 => "110101010000010100101101", 
    48 => "110100101011111011000011", 49 => "110100001001010001000001", 50 => "110011101000011011111111", 51 => "110011001001100000111110", 
    52 => "110010101100100100110011", 53 => "110010010001101011111001", 54 => "110001111000111010011001", 55 => "110001100010010100001010", 
    56 => "110001001101111100101000", 57 => "110000111011110110111101", 58 => "110000101100000101111101", 59 => "110000011110101100000010", 
    60 => "110000010011101011010000", 61 => "110000001011000101010100", 62 => "110000000100111011100100", 63 => "110000000001001110111100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

