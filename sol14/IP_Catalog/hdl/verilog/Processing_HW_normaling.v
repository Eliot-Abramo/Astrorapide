// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Processing_HW_normaling (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        S10_dout,
        S10_num_data_valid,
        S10_fifo_cap,
        S10_empty_n,
        S10_read,
        Spectrumoutput_address0,
        Spectrumoutput_ce0,
        Spectrumoutput_we0,
        Spectrumoutput_d0,
        Spectrumoutput_address1,
        Spectrumoutput_ce1,
        Spectrumoutput_q1,
        numFFT_dout,
        numFFT_num_data_valid,
        numFFT_fifo_cap,
        numFFT_empty_n,
        numFFT_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] S10_dout;
input  [10:0] S10_num_data_valid;
input  [10:0] S10_fifo_cap;
input   S10_empty_n;
output   S10_read;
output  [9:0] Spectrumoutput_address0;
output   Spectrumoutput_ce0;
output   Spectrumoutput_we0;
output  [31:0] Spectrumoutput_d0;
output  [9:0] Spectrumoutput_address1;
output   Spectrumoutput_ce1;
input  [31:0] Spectrumoutput_q1;
input  [31:0] numFFT_dout;
input  [1:0] numFFT_num_data_valid;
input  [1:0] numFFT_fifo_cap;
input   numFFT_empty_n;
output   numFFT_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg S10_read;
reg numFFT_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    numFFT_blk_n;
reg   [31:0] numFFT_read_reg_71;
wire   [42:0] tmp_fu_62_p3;
reg   [42:0] tmp_reg_76;
wire    ap_CS_fsm_state2;
wire    grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_start;
wire    grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_done;
wire    grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_idle;
wire    grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_ready;
wire    grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_S10_read;
wire   [9:0] grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_address0;
wire    grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_ce0;
wire    grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_we0;
wire   [31:0] grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_d0;
wire   [9:0] grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_address1;
wire    grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_ce1;
reg    grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
wire   [32:0] numFFT_cast_fu_53_p1;
wire   [32:0] sub_i_i_fu_56_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_start_reg = 1'b0;
end

Processing_HW_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2 grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_start),
    .ap_done(grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_done),
    .ap_idle(grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_idle),
    .ap_ready(grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_ready),
    .S10_dout(S10_dout),
    .S10_num_data_valid(11'd0),
    .S10_fifo_cap(11'd0),
    .S10_empty_n(S10_empty_n),
    .S10_read(grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_S10_read),
    .bound(tmp_reg_76),
    .Spectrumoutput_address0(grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_address0),
    .Spectrumoutput_ce0(grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_ce0),
    .Spectrumoutput_we0(grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_we0),
    .Spectrumoutput_d0(grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_d0),
    .Spectrumoutput_address1(grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_address1),
    .Spectrumoutput_ce1(grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_ce1),
    .Spectrumoutput_q1(Spectrumoutput_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_start_reg <= 1'b1;
        end else if ((grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_ready == 1'b1)) begin
            grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        numFFT_read_reg_71 <= numFFT_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_reg_76[42 : 10] <= tmp_fu_62_p3[42 : 10];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        S10_read = grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_S10_read;
    end else begin
        S10_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (numFFT_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numFFT_blk_n = numFFT_empty_n;
    end else begin
        numFFT_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (numFFT_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numFFT_read = 1'b1;
    end else begin
        numFFT_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (numFFT_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Spectrumoutput_address0 = grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_address0;

assign Spectrumoutput_address1 = grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_address1;

assign Spectrumoutput_ce0 = grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_ce0;

assign Spectrumoutput_ce1 = grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_ce1;

assign Spectrumoutput_d0 = grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_d0;

assign Spectrumoutput_we0 = grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_Spectrumoutput_we0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (numFFT_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_start = grp_normaling_Pipeline_VITIS_LOOP_5650_1_VITIS_LOOP_5651_2_fu_44_ap_start_reg;

assign numFFT_cast_fu_53_p1 = numFFT_read_reg_71;

assign sub_i_i_fu_56_p2 = ($signed(numFFT_cast_fu_53_p1) + $signed(33'd8589934589));

assign tmp_fu_62_p3 = {{sub_i_i_fu_56_p2}, {10'd0}};

always @ (posedge ap_clk) begin
    tmp_reg_76[9:0] <= 10'b0000000000;
end

endmodule //Processing_HW_normaling
