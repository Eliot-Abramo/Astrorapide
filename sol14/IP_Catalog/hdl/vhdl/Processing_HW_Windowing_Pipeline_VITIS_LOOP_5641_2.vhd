-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Processing_HW_Windowing_Pipeline_VITIS_LOOP_5641_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    D1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    D1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    D1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    D1_full_n : IN STD_LOGIC;
    D1_write : OUT STD_LOGIC;
    Buff0_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff0_re_ce0 : OUT STD_LOGIC;
    Buff0_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff0_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff0_im_ce0 : OUT STD_LOGIC;
    Buff0_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff1_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff1_re_ce0 : OUT STD_LOGIC;
    Buff1_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff1_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff1_im_ce0 : OUT STD_LOGIC;
    Buff1_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff2_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff2_re_ce0 : OUT STD_LOGIC;
    Buff2_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff2_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff2_im_ce0 : OUT STD_LOGIC;
    Buff2_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff3_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff3_re_ce0 : OUT STD_LOGIC;
    Buff3_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Buff3_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Buff3_im_ce0 : OUT STD_LOGIC;
    Buff3_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Processing_HW_Windowing_Pipeline_VITIS_LOOP_5641_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv22_CCD : STD_LOGIC_VECTOR (21 downto 0) := "0000000000110011001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv23_CCD : STD_LOGIC_VECTOR (22 downto 0) := "00000000000110011001101";
    constant ap_const_lv25_199A : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001100110011010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Hann_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_0_ce0 : STD_LOGIC;
    signal Hann_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_0_ce1 : STD_LOGIC;
    signal Hann_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_0_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_0_ce2 : STD_LOGIC;
    signal Hann_0_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_0_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_0_ce3 : STD_LOGIC;
    signal Hann_0_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_1_ce0 : STD_LOGIC;
    signal Hann_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_1_ce1 : STD_LOGIC;
    signal Hann_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_1_ce2 : STD_LOGIC;
    signal Hann_1_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_1_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_1_ce3 : STD_LOGIC;
    signal Hann_1_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_2_ce0 : STD_LOGIC;
    signal Hann_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_2_ce1 : STD_LOGIC;
    signal Hann_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_2_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_2_ce2 : STD_LOGIC;
    signal Hann_2_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_2_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_2_ce3 : STD_LOGIC;
    signal Hann_2_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_3_ce0 : STD_LOGIC;
    signal Hann_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_3_ce1 : STD_LOGIC;
    signal Hann_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_3_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_3_ce2 : STD_LOGIC;
    signal Hann_3_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_3_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_3_ce3 : STD_LOGIC;
    signal Hann_3_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_4_ce0 : STD_LOGIC;
    signal Hann_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_4_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_4_ce1 : STD_LOGIC;
    signal Hann_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_4_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_4_ce2 : STD_LOGIC;
    signal Hann_4_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hann_4_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hann_4_ce3 : STD_LOGIC;
    signal Hann_4_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal D1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_V_1_reg_847 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_1_reg_847_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_1_reg_847_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_1_reg_847_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_1_reg_847_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_1_reg_847_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_1_reg_847_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_1_reg_847_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_1_reg_847_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_1_reg_847_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_1_reg_847_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_1_reg_847_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_fu_554_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_reg_856_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1027_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_reg_873 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_reg_873_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_reg_873_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_reg_873_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_reg_873_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_reg_873_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_reg_873_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_reg_873_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_reg_873_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_reg_873_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_951 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_951_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_951_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_951_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_951_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_951_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_951_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_951_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_951_pp0_iter20_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_951_pp0_iter21_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_re_reg_956 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_682_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_966 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln5643_fu_698_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln5643_reg_972 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln5643_reg_972_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln5643_reg_972_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln5643_reg_972_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln5643_reg_972_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln5643_reg_972_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln5643_reg_972_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln5643_reg_972_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln5643_reg_972_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln5643_reg_972_pp0_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_re_32_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_32_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_702_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_31_reg_999 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_31_reg_1004 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_33_reg_1009 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_33_reg_1014 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_35_reg_1054 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_35_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_752_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_34_reg_1070 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_34_reg_1075 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_36_reg_1080 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_36_reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_38_reg_1125 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_38_reg_1130 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_775_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_37_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_37_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_39_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_39_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_re_40_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_im_40_reg_1166 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln5643_3_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln5643_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln5643_1_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln5643_2_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_urem_fu_100 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1027_fu_670_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal phi_mul_fu_104 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln5643_fu_598_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal j_V_fu_108 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln840_fu_548_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_j_V_1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_558_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_558_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_fu_569_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln5643_fu_580_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_604_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_623_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_805_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_3_fu_623_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_641_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_812_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln1027_fu_658_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1027_3_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_682_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_558_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_702_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_1_fu_723_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_734_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_819_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_4_fu_734_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln5643_1_fu_793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln5643_fu_790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_805_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_805_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_812_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_812_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_819_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_819_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_468_ce : STD_LOGIC;
    signal grp_fu_472_ce : STD_LOGIC;
    signal grp_fu_476_ce : STD_LOGIC;
    signal grp_fu_480_ce : STD_LOGIC;
    signal grp_fu_484_ce : STD_LOGIC;
    signal grp_fu_488_ce : STD_LOGIC;
    signal grp_fu_492_ce : STD_LOGIC;
    signal grp_fu_496_ce : STD_LOGIC;
    signal grp_fu_500_ce : STD_LOGIC;
    signal grp_fu_504_ce : STD_LOGIC;
    signal grp_fu_508_ce : STD_LOGIC;
    signal grp_fu_512_ce : STD_LOGIC;
    signal grp_fu_516_ce : STD_LOGIC;
    signal grp_fu_520_ce : STD_LOGIC;
    signal grp_fu_558_ce : STD_LOGIC;
    signal grp_fu_805_ce : STD_LOGIC;
    signal grp_fu_812_ce : STD_LOGIC;
    signal grp_fu_819_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_805_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_812_p00 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_819_p00 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Processing_HW_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Processing_HW_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Processing_HW_urem_10ns_4ns_3_14_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Processing_HW_mux_53_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Processing_HW_mul_mul_11ns_12ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component Processing_HW_mul_mul_12ns_13ns_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component Processing_HW_Windowing_Pipeline_VITIS_LOOP_5641_2_Hann_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Processing_HW_Windowing_Pipeline_VITIS_LOOP_5641_2_Hann_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Processing_HW_Windowing_Pipeline_VITIS_LOOP_5641_2_Hann_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Processing_HW_Windowing_Pipeline_VITIS_LOOP_5641_2_Hann_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Processing_HW_Windowing_Pipeline_VITIS_LOOP_5641_2_Hann_4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Processing_HW_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    Hann_0_U : component Processing_HW_Windowing_Pipeline_VITIS_LOOP_5641_2_Hann_0_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 820,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Hann_0_address0,
        ce0 => Hann_0_ce0,
        q0 => Hann_0_q0,
        address1 => Hann_0_address1,
        ce1 => Hann_0_ce1,
        q1 => Hann_0_q1,
        address2 => Hann_0_address2,
        ce2 => Hann_0_ce2,
        q2 => Hann_0_q2,
        address3 => Hann_0_address3,
        ce3 => Hann_0_ce3,
        q3 => Hann_0_q3);

    Hann_1_U : component Processing_HW_Windowing_Pipeline_VITIS_LOOP_5641_2_Hann_1_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 820,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Hann_1_address0,
        ce0 => Hann_1_ce0,
        q0 => Hann_1_q0,
        address1 => Hann_1_address1,
        ce1 => Hann_1_ce1,
        q1 => Hann_1_q1,
        address2 => Hann_1_address2,
        ce2 => Hann_1_ce2,
        q2 => Hann_1_q2,
        address3 => Hann_1_address3,
        ce3 => Hann_1_ce3,
        q3 => Hann_1_q3);

    Hann_2_U : component Processing_HW_Windowing_Pipeline_VITIS_LOOP_5641_2_Hann_2_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 820,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Hann_2_address0,
        ce0 => Hann_2_ce0,
        q0 => Hann_2_q0,
        address1 => Hann_2_address1,
        ce1 => Hann_2_ce1,
        q1 => Hann_2_q1,
        address2 => Hann_2_address2,
        ce2 => Hann_2_ce2,
        q2 => Hann_2_q2,
        address3 => Hann_2_address3,
        ce3 => Hann_2_ce3,
        q3 => Hann_2_q3);

    Hann_3_U : component Processing_HW_Windowing_Pipeline_VITIS_LOOP_5641_2_Hann_3_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 820,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Hann_3_address0,
        ce0 => Hann_3_ce0,
        q0 => Hann_3_q0,
        address1 => Hann_3_address1,
        ce1 => Hann_3_ce1,
        q1 => Hann_3_q1,
        address2 => Hann_3_address2,
        ce2 => Hann_3_ce2,
        q2 => Hann_3_q2,
        address3 => Hann_3_address3,
        ce3 => Hann_3_ce3,
        q3 => Hann_3_q3);

    Hann_4_U : component Processing_HW_Windowing_Pipeline_VITIS_LOOP_5641_2_Hann_4_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 820,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Hann_4_address0,
        ce0 => Hann_4_ce0,
        q0 => Hann_4_q0,
        address1 => Hann_4_address1,
        ce1 => Hann_4_ce1,
        q1 => Hann_4_q1,
        address2 => Hann_4_address2,
        ce2 => Hann_4_ce2,
        q2 => Hann_4_q2,
        address3 => Hann_4_address3,
        ce3 => Hann_4_ce3,
        q3 => Hann_4_q3);

    fadd_32ns_32ns_32_5_full_dsp_1_U41 : component Processing_HW_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_31_reg_999,
        din1 => tmp_re_33_reg_1009,
        ce => grp_fu_468_ce,
        dout => grp_fu_468_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U42 : component Processing_HW_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_31_reg_1004,
        din1 => tmp_im_33_reg_1014,
        ce => grp_fu_472_ce,
        dout => grp_fu_472_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U43 : component Processing_HW_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_34_reg_1070,
        din1 => tmp_re_36_reg_1080,
        ce => grp_fu_476_ce,
        dout => grp_fu_476_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U44 : component Processing_HW_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_34_reg_1075,
        din1 => tmp_im_36_reg_1085,
        ce => grp_fu_480_ce,
        dout => grp_fu_480_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U45 : component Processing_HW_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_37_reg_1141,
        din1 => tmp_re_39_reg_1151,
        ce => grp_fu_484_ce,
        dout => grp_fu_484_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U46 : component Processing_HW_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_37_reg_1146,
        din1 => tmp_im_39_reg_1156,
        ce => grp_fu_488_ce,
        dout => grp_fu_488_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U47 : component Processing_HW_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_reg_956,
        din1 => tmp_s_reg_966,
        ce => grp_fu_492_ce,
        dout => grp_fu_492_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U48 : component Processing_HW_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_reg_961,
        din1 => tmp_s_reg_966,
        ce => grp_fu_496_ce,
        dout => grp_fu_496_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U49 : component Processing_HW_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_32_reg_978,
        din1 => tmp_9_reg_988,
        ce => grp_fu_500_ce,
        dout => grp_fu_500_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U50 : component Processing_HW_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_32_reg_983,
        din1 => tmp_9_reg_988,
        ce => grp_fu_504_ce,
        dout => grp_fu_504_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U51 : component Processing_HW_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_35_reg_1054,
        din1 => tmp_1_reg_1064,
        ce => grp_fu_508_ce,
        dout => grp_fu_508_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U52 : component Processing_HW_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_35_reg_1059,
        din1 => tmp_1_reg_1064,
        ce => grp_fu_512_ce,
        dout => grp_fu_512_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U53 : component Processing_HW_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_re_38_reg_1125,
        din1 => tmp_2_reg_1135,
        ce => grp_fu_516_ce,
        dout => grp_fu_516_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U54 : component Processing_HW_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_im_38_reg_1130,
        din1 => tmp_2_reg_1135,
        ce => grp_fu_520_ce,
        dout => grp_fu_520_p2);

    urem_10ns_4ns_3_14_1_U55 : component Processing_HW_urem_10ns_4ns_3_14_1
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 10,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_558_p0,
        din1 => grp_fu_558_p1,
        ce => grp_fu_558_ce,
        dout => grp_fu_558_p2);

    mux_53_32_1_1_U56 : component Processing_HW_mux_53_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => Hann_0_q3,
        din1 => Hann_1_q3,
        din2 => Hann_2_q3,
        din3 => Hann_3_q3,
        din4 => Hann_4_q3,
        din5 => tmp_s_fu_682_p6,
        dout => tmp_s_fu_682_p7);

    mux_53_32_1_1_U57 : component Processing_HW_mux_53_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => Hann_4_q2,
        din1 => Hann_0_q2,
        din2 => Hann_1_q2,
        din3 => Hann_2_q2,
        din4 => Hann_3_q2,
        din5 => tmp_9_fu_702_p6,
        dout => tmp_9_fu_702_p7);

    mux_53_32_1_1_U58 : component Processing_HW_mux_53_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => Hann_3_q1,
        din1 => Hann_4_q1,
        din2 => Hann_0_q1,
        din3 => Hann_1_q1,
        din4 => Hann_2_q1,
        din5 => trunc_ln5643_reg_972_pp0_iter17_reg,
        dout => tmp_1_fu_752_p7);

    mux_53_32_1_1_U59 : component Processing_HW_mux_53_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => Hann_2_q0,
        din1 => Hann_3_q0,
        din2 => Hann_4_q0,
        din3 => Hann_0_q0,
        din4 => Hann_1_q0,
        din5 => trunc_ln5643_reg_972_pp0_iter22_reg,
        dout => tmp_2_fu_775_p7);

    mul_mul_11ns_12ns_23_4_1_U60 : component Processing_HW_mul_mul_11ns_12ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 12,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_805_p0,
        din1 => grp_fu_805_p1,
        ce => grp_fu_805_ce,
        dout => grp_fu_805_p2);

    mul_mul_12ns_13ns_25_4_1_U61 : component Processing_HW_mul_mul_12ns_13ns_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 13,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_812_p0,
        din1 => grp_fu_812_p1,
        ce => grp_fu_812_ce,
        dout => grp_fu_812_p2);

    mul_mul_12ns_13ns_25_4_1_U62 : component Processing_HW_mul_mul_12ns_13ns_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 13,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_819_p0,
        din1 => grp_fu_819_p1,
        ce => grp_fu_819_ce,
        dout => grp_fu_819_p2);

    flow_control_loop_pipe_sequential_init_U : component Processing_HW_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter32_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_V_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1027_fu_542_p2 = ap_const_lv1_0))) then 
                    j_V_fu_108 <= add_ln840_fu_548_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_V_fu_108 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    phi_mul_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    phi_mul_fu_104 <= ap_const_lv22_0;
                elsif ((ap_enable_reg_pp0_iter12 = ap_const_logic_1)) then 
                    phi_mul_fu_104 <= add_ln5643_fu_598_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_urem_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    phi_urem_fu_100 <= ap_const_lv11_0;
                elsif ((ap_enable_reg_pp0_iter13 = ap_const_logic_1)) then 
                    phi_urem_fu_100 <= select_ln1027_fu_670_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                j_V_1_reg_847_pp0_iter10_reg <= j_V_1_reg_847_pp0_iter9_reg;
                j_V_1_reg_847_pp0_iter11_reg <= j_V_1_reg_847_pp0_iter10_reg;
                j_V_1_reg_847_pp0_iter2_reg <= j_V_1_reg_847_pp0_iter1_reg;
                j_V_1_reg_847_pp0_iter3_reg <= j_V_1_reg_847_pp0_iter2_reg;
                j_V_1_reg_847_pp0_iter4_reg <= j_V_1_reg_847_pp0_iter3_reg;
                j_V_1_reg_847_pp0_iter5_reg <= j_V_1_reg_847_pp0_iter4_reg;
                j_V_1_reg_847_pp0_iter6_reg <= j_V_1_reg_847_pp0_iter5_reg;
                j_V_1_reg_847_pp0_iter7_reg <= j_V_1_reg_847_pp0_iter6_reg;
                j_V_1_reg_847_pp0_iter8_reg <= j_V_1_reg_847_pp0_iter7_reg;
                j_V_1_reg_847_pp0_iter9_reg <= j_V_1_reg_847_pp0_iter8_reg;
                lhs_reg_856_pp0_iter10_reg <= lhs_reg_856_pp0_iter9_reg;
                lhs_reg_856_pp0_iter11_reg <= lhs_reg_856_pp0_iter10_reg;
                lhs_reg_856_pp0_iter12_reg <= lhs_reg_856_pp0_iter11_reg;
                lhs_reg_856_pp0_iter13_reg <= lhs_reg_856_pp0_iter12_reg;
                lhs_reg_856_pp0_iter2_reg <= lhs_reg_856_pp0_iter1_reg;
                lhs_reg_856_pp0_iter3_reg <= lhs_reg_856_pp0_iter2_reg;
                lhs_reg_856_pp0_iter4_reg <= lhs_reg_856_pp0_iter3_reg;
                lhs_reg_856_pp0_iter5_reg <= lhs_reg_856_pp0_iter4_reg;
                lhs_reg_856_pp0_iter6_reg <= lhs_reg_856_pp0_iter5_reg;
                lhs_reg_856_pp0_iter7_reg <= lhs_reg_856_pp0_iter6_reg;
                lhs_reg_856_pp0_iter8_reg <= lhs_reg_856_pp0_iter7_reg;
                lhs_reg_856_pp0_iter9_reg <= lhs_reg_856_pp0_iter8_reg;
                tmp_1_reg_1064 <= tmp_1_fu_752_p7;
                tmp_2_reg_1135 <= tmp_2_fu_775_p7;
                tmp_5_reg_951 <= tmp_5_fu_641_p1(24 downto 15);
                tmp_5_reg_951_pp0_iter13_reg <= tmp_5_reg_951;
                tmp_5_reg_951_pp0_iter14_reg <= tmp_5_reg_951_pp0_iter13_reg;
                tmp_5_reg_951_pp0_iter15_reg <= tmp_5_reg_951_pp0_iter14_reg;
                tmp_5_reg_951_pp0_iter16_reg <= tmp_5_reg_951_pp0_iter15_reg;
                tmp_5_reg_951_pp0_iter17_reg <= tmp_5_reg_951_pp0_iter16_reg;
                tmp_5_reg_951_pp0_iter18_reg <= tmp_5_reg_951_pp0_iter17_reg;
                tmp_5_reg_951_pp0_iter19_reg <= tmp_5_reg_951_pp0_iter18_reg;
                tmp_5_reg_951_pp0_iter20_reg <= tmp_5_reg_951_pp0_iter19_reg;
                tmp_5_reg_951_pp0_iter21_reg <= tmp_5_reg_951_pp0_iter20_reg;
                tmp_9_reg_988 <= tmp_9_fu_702_p7;
                tmp_im_31_reg_1004 <= grp_fu_496_p2;
                tmp_im_32_reg_983 <= Buff1_im_q0;
                tmp_im_33_reg_1014 <= grp_fu_504_p2;
                tmp_im_34_reg_1075 <= grp_fu_472_p2;
                tmp_im_35_reg_1059 <= Buff2_im_q0;
                tmp_im_36_reg_1085 <= grp_fu_512_p2;
                tmp_im_37_reg_1146 <= grp_fu_480_p2;
                tmp_im_38_reg_1130 <= Buff3_im_q0;
                tmp_im_39_reg_1156 <= grp_fu_520_p2;
                tmp_im_40_reg_1166 <= grp_fu_488_p2;
                tmp_im_reg_961 <= Buff0_im_q0;
                tmp_re_31_reg_999 <= grp_fu_492_p2;
                tmp_re_32_reg_978 <= Buff1_re_q0;
                tmp_re_33_reg_1009 <= grp_fu_500_p2;
                tmp_re_34_reg_1070 <= grp_fu_468_p2;
                tmp_re_35_reg_1054 <= Buff2_re_q0;
                tmp_re_36_reg_1080 <= grp_fu_508_p2;
                tmp_re_37_reg_1141 <= grp_fu_476_p2;
                tmp_re_38_reg_1125 <= Buff3_re_q0;
                tmp_re_39_reg_1151 <= grp_fu_516_p2;
                tmp_re_40_reg_1161 <= grp_fu_484_p2;
                tmp_re_reg_956 <= Buff0_re_q0;
                tmp_s_reg_966 <= tmp_s_fu_682_p7;
                trunc_ln5643_reg_972 <= trunc_ln5643_fu_698_p1;
                trunc_ln5643_reg_972_pp0_iter14_reg <= trunc_ln5643_reg_972;
                trunc_ln5643_reg_972_pp0_iter15_reg <= trunc_ln5643_reg_972_pp0_iter14_reg;
                trunc_ln5643_reg_972_pp0_iter16_reg <= trunc_ln5643_reg_972_pp0_iter15_reg;
                trunc_ln5643_reg_972_pp0_iter17_reg <= trunc_ln5643_reg_972_pp0_iter16_reg;
                trunc_ln5643_reg_972_pp0_iter18_reg <= trunc_ln5643_reg_972_pp0_iter17_reg;
                trunc_ln5643_reg_972_pp0_iter19_reg <= trunc_ln5643_reg_972_pp0_iter18_reg;
                trunc_ln5643_reg_972_pp0_iter20_reg <= trunc_ln5643_reg_972_pp0_iter19_reg;
                trunc_ln5643_reg_972_pp0_iter21_reg <= trunc_ln5643_reg_972_pp0_iter20_reg;
                trunc_ln5643_reg_972_pp0_iter22_reg <= trunc_ln5643_reg_972_pp0_iter21_reg;
                    zext_ln1027_reg_873(10 downto 0) <= zext_ln1027_fu_591_p1(10 downto 0);
                    zext_ln1027_reg_873_pp0_iter13_reg(10 downto 0) <= zext_ln1027_reg_873(10 downto 0);
                    zext_ln1027_reg_873_pp0_iter14_reg(10 downto 0) <= zext_ln1027_reg_873_pp0_iter13_reg(10 downto 0);
                    zext_ln1027_reg_873_pp0_iter15_reg(10 downto 0) <= zext_ln1027_reg_873_pp0_iter14_reg(10 downto 0);
                    zext_ln1027_reg_873_pp0_iter16_reg(10 downto 0) <= zext_ln1027_reg_873_pp0_iter15_reg(10 downto 0);
                    zext_ln1027_reg_873_pp0_iter17_reg(10 downto 0) <= zext_ln1027_reg_873_pp0_iter16_reg(10 downto 0);
                    zext_ln1027_reg_873_pp0_iter18_reg(10 downto 0) <= zext_ln1027_reg_873_pp0_iter17_reg(10 downto 0);
                    zext_ln1027_reg_873_pp0_iter19_reg(10 downto 0) <= zext_ln1027_reg_873_pp0_iter18_reg(10 downto 0);
                    zext_ln1027_reg_873_pp0_iter20_reg(10 downto 0) <= zext_ln1027_reg_873_pp0_iter19_reg(10 downto 0);
                    zext_ln1027_reg_873_pp0_iter21_reg(10 downto 0) <= zext_ln1027_reg_873_pp0_iter20_reg(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                j_V_1_reg_847 <= ap_sig_allocacmp_j_V_1;
                j_V_1_reg_847_pp0_iter1_reg <= j_V_1_reg_847;
                lhs_reg_856_pp0_iter1_reg <= lhs_reg_856;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_542_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lhs_reg_856 <= lhs_fu_554_p1;
            end if;
        end if;
    end process;
    zext_ln1027_reg_873(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln1027_reg_873_pp0_iter13_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln1027_reg_873_pp0_iter14_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln1027_reg_873_pp0_iter15_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln1027_reg_873_pp0_iter16_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln1027_reg_873_pp0_iter17_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln1027_reg_873_pp0_iter18_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln1027_reg_873_pp0_iter19_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln1027_reg_873_pp0_iter20_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln1027_reg_873_pp0_iter21_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Buff0_im_address0 <= zext_ln1027_fu_591_p1(10 - 1 downto 0);

    Buff0_im_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff0_im_ce0 <= ap_const_logic_1;
        else 
            Buff0_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff0_re_address0 <= zext_ln1027_fu_591_p1(10 - 1 downto 0);

    Buff0_re_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff0_re_ce0 <= ap_const_logic_1;
        else 
            Buff0_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff1_im_address0 <= zext_ln1027_fu_591_p1(10 - 1 downto 0);

    Buff1_im_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff1_im_ce0 <= ap_const_logic_1;
        else 
            Buff1_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff1_re_address0 <= zext_ln1027_fu_591_p1(10 - 1 downto 0);

    Buff1_re_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff1_re_ce0 <= ap_const_logic_1;
        else 
            Buff1_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff2_im_address0 <= zext_ln1027_reg_873_pp0_iter16_reg(10 - 1 downto 0);

    Buff2_im_ce0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff2_im_ce0 <= ap_const_logic_1;
        else 
            Buff2_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff2_re_address0 <= zext_ln1027_reg_873_pp0_iter16_reg(10 - 1 downto 0);

    Buff2_re_ce0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff2_re_ce0 <= ap_const_logic_1;
        else 
            Buff2_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff3_im_address0 <= zext_ln1027_reg_873_pp0_iter21_reg(10 - 1 downto 0);

    Buff3_im_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff3_im_ce0 <= ap_const_logic_1;
        else 
            Buff3_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Buff3_re_address0 <= zext_ln1027_reg_873_pp0_iter21_reg(10 - 1 downto 0);

    Buff3_re_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Buff3_re_ce0 <= ap_const_logic_1;
        else 
            Buff3_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    D1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter33, D1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1))) then 
            D1_blk_n <= D1_full_n;
        else 
            D1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    D1_din <= (bitcast_ln5643_1_fu_793_p1 & bitcast_ln5643_fu_790_p1);

    D1_write_assign_proc : process(ap_enable_reg_pp0_iter33, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1))) then 
            D1_write <= ap_const_logic_1;
        else 
            D1_write <= ap_const_logic_0;
        end if; 
    end process;

    Hann_0_address0 <= zext_ln5643_2_fu_767_p1(10 - 1 downto 0);
    Hann_0_address1 <= zext_ln5643_1_fu_743_p1(10 - 1 downto 0);
    Hann_0_address2 <= zext_ln5643_fu_632_p1(10 - 1 downto 0);
    Hann_0_address3 <= zext_ln5643_3_fu_614_p1(10 - 1 downto 0);

    Hann_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_0_ce0 <= ap_const_logic_1;
        else 
            Hann_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_0_ce1 <= ap_const_logic_1;
        else 
            Hann_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_0_ce2_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_0_ce2 <= ap_const_logic_1;
        else 
            Hann_0_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_0_ce3_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_0_ce3 <= ap_const_logic_1;
        else 
            Hann_0_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    Hann_1_address0 <= zext_ln5643_2_fu_767_p1(10 - 1 downto 0);
    Hann_1_address1 <= zext_ln5643_1_fu_743_p1(10 - 1 downto 0);
    Hann_1_address2 <= zext_ln5643_fu_632_p1(10 - 1 downto 0);
    Hann_1_address3 <= zext_ln5643_3_fu_614_p1(10 - 1 downto 0);

    Hann_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_1_ce0 <= ap_const_logic_1;
        else 
            Hann_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_1_ce1 <= ap_const_logic_1;
        else 
            Hann_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_1_ce2_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_1_ce2 <= ap_const_logic_1;
        else 
            Hann_1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_1_ce3_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_1_ce3 <= ap_const_logic_1;
        else 
            Hann_1_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    Hann_2_address0 <= zext_ln5643_2_fu_767_p1(10 - 1 downto 0);
    Hann_2_address1 <= zext_ln5643_1_fu_743_p1(10 - 1 downto 0);
    Hann_2_address2 <= zext_ln5643_fu_632_p1(10 - 1 downto 0);
    Hann_2_address3 <= zext_ln5643_3_fu_614_p1(10 - 1 downto 0);

    Hann_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_2_ce0 <= ap_const_logic_1;
        else 
            Hann_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_2_ce1 <= ap_const_logic_1;
        else 
            Hann_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_2_ce2_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_2_ce2 <= ap_const_logic_1;
        else 
            Hann_2_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_2_ce3_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_2_ce3 <= ap_const_logic_1;
        else 
            Hann_2_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    Hann_3_address0 <= zext_ln5643_2_fu_767_p1(10 - 1 downto 0);
    Hann_3_address1 <= zext_ln5643_1_fu_743_p1(10 - 1 downto 0);
    Hann_3_address2 <= zext_ln5643_fu_632_p1(10 - 1 downto 0);
    Hann_3_address3 <= zext_ln5643_3_fu_614_p1(10 - 1 downto 0);

    Hann_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_3_ce0 <= ap_const_logic_1;
        else 
            Hann_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_3_ce1 <= ap_const_logic_1;
        else 
            Hann_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_3_ce2_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_3_ce2 <= ap_const_logic_1;
        else 
            Hann_3_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_3_ce3_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_3_ce3 <= ap_const_logic_1;
        else 
            Hann_3_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    Hann_4_address0 <= zext_ln5643_2_fu_767_p1(10 - 1 downto 0);
    Hann_4_address1 <= zext_ln5643_1_fu_743_p1(10 - 1 downto 0);
    Hann_4_address2 <= zext_ln5643_fu_632_p1(10 - 1 downto 0);
    Hann_4_address3 <= zext_ln5643_3_fu_614_p1(10 - 1 downto 0);

    Hann_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_4_ce0 <= ap_const_logic_1;
        else 
            Hann_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_4_ce1 <= ap_const_logic_1;
        else 
            Hann_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_4_ce2_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_4_ce2 <= ap_const_logic_1;
        else 
            Hann_4_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Hann_4_ce3_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Hann_4_ce3 <= ap_const_logic_1;
        else 
            Hann_4_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1027_fu_658_p2 <= std_logic_vector(unsigned(phi_urem_fu_100) + unsigned(ap_const_lv11_1));
    add_ln5643_fu_598_p2 <= std_logic_vector(unsigned(phi_mul_fu_104) + unsigned(ap_const_lv22_CCD));
    add_ln840_fu_548_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_V_1) + unsigned(ap_const_lv11_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter33, D1_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_0 = D1_full_n) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter33, D1_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = D1_full_n) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter33, D1_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = D1_full_n) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state34_pp0_stage0_iter33_assign_proc : process(D1_full_n)
    begin
                ap_block_state34_pp0_stage0_iter33 <= (ap_const_logic_0 = D1_full_n);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1027_fu_542_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_542_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter32_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter32_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_V_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_V_fu_108)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_V_1 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_j_V_1 <= j_V_fu_108;
        end if; 
    end process;

    bitcast_ln5643_1_fu_793_p1 <= tmp_im_40_reg_1166;
    bitcast_ln5643_fu_790_p1 <= tmp_re_40_reg_1161;

    grp_fu_468_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_468_ce <= ap_const_logic_1;
        else 
            grp_fu_468_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_472_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_472_ce <= ap_const_logic_1;
        else 
            grp_fu_472_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_476_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_476_ce <= ap_const_logic_1;
        else 
            grp_fu_476_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_480_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_480_ce <= ap_const_logic_1;
        else 
            grp_fu_480_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_484_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_484_ce <= ap_const_logic_1;
        else 
            grp_fu_484_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_488_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_488_ce <= ap_const_logic_1;
        else 
            grp_fu_488_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_492_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_492_ce <= ap_const_logic_1;
        else 
            grp_fu_492_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_496_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_496_ce <= ap_const_logic_1;
        else 
            grp_fu_496_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_500_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_500_ce <= ap_const_logic_1;
        else 
            grp_fu_500_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_504_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_504_ce <= ap_const_logic_1;
        else 
            grp_fu_504_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_508_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_508_ce <= ap_const_logic_1;
        else 
            grp_fu_508_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_512_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_512_ce <= ap_const_logic_1;
        else 
            grp_fu_512_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_516_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_516_ce <= ap_const_logic_1;
        else 
            grp_fu_516_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_520_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_520_ce <= ap_const_logic_1;
        else 
            grp_fu_520_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_558_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_558_ce <= ap_const_logic_1;
        else 
            grp_fu_558_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_558_p0 <= ap_sig_allocacmp_j_V_1(10 - 1 downto 0);
    grp_fu_558_p1 <= ap_const_lv10_5(4 - 1 downto 0);

    grp_fu_805_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_805_ce <= ap_const_logic_1;
        else 
            grp_fu_805_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_805_p0 <= grp_fu_805_p00(11 - 1 downto 0);
    grp_fu_805_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_569_p3),23));
    grp_fu_805_p1 <= ap_const_lv23_CCD(12 - 1 downto 0);

    grp_fu_812_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_812_ce <= ap_const_logic_1;
        else 
            grp_fu_812_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_812_p0 <= grp_fu_812_p00(12 - 1 downto 0);
    grp_fu_812_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5643_fu_580_p1),25));
    grp_fu_812_p1 <= ap_const_lv25_199A(13 - 1 downto 0);

    grp_fu_819_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_819_ce <= ap_const_logic_1;
        else 
            grp_fu_819_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_819_p0 <= grp_fu_819_p00(12 - 1 downto 0);
    grp_fu_819_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_fu_723_p3),25));
    grp_fu_819_p1 <= ap_const_lv25_199A(13 - 1 downto 0);
    icmp_ln1027_3_fu_664_p2 <= "1" when (unsigned(add_ln1027_fu_658_p2) < unsigned(ap_const_lv11_5)) else "0";
    icmp_ln1027_fu_542_p2 <= "1" when (ap_sig_allocacmp_j_V_1 = ap_const_lv11_400) else "0";
    lhs_fu_554_p1 <= ap_sig_allocacmp_j_V_1(10 - 1 downto 0);
    ret_V_1_fu_723_p3 <= (ap_const_lv2_2 & lhs_reg_856_pp0_iter13_reg);
    ret_V_fu_569_p3 <= (ap_const_lv1_1 & lhs_reg_856_pp0_iter8_reg);
    select_ln1027_fu_670_p3 <= 
        add_ln1027_fu_658_p2 when (icmp_ln1027_3_fu_664_p2(0) = '1') else 
        ap_const_lv11_0;
        sext_ln5643_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_569_p3),12));

    tmp_3_fu_623_p1 <= grp_fu_805_p2;
    tmp_3_fu_623_p4 <= tmp_3_fu_623_p1(22 downto 14);
    tmp_4_fu_734_p1 <= grp_fu_819_p2;
    tmp_4_fu_734_p4 <= tmp_4_fu_734_p1(24 downto 15);
    tmp_5_fu_641_p1 <= grp_fu_812_p2;
    tmp_9_fu_702_p6 <= grp_fu_558_p2(3 - 1 downto 0);
    tmp_fu_604_p4 <= phi_mul_fu_104(21 downto 14);
    tmp_s_fu_682_p6 <= phi_urem_fu_100(3 - 1 downto 0);
    trunc_ln5643_fu_698_p1 <= grp_fu_558_p2(3 - 1 downto 0);
    zext_ln1027_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_1_reg_847_pp0_iter11_reg),64));
    zext_ln5643_1_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_734_p4),64));
    zext_ln5643_2_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_951_pp0_iter21_reg),64));
    zext_ln5643_3_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_604_p4),64));
    zext_ln5643_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_623_p4),64));
end behav;
