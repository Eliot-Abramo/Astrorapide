-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Processing_HW_fft_stage_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    S0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    S0_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    S0_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    S0_empty_n : IN STD_LOGIC;
    S0_read : OUT STD_LOGIC;
    S1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    S1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    S1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    S1_full_n : IN STD_LOGIC;
    S1_write : OUT STD_LOGIC;
    numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    numFFT_empty_n : IN STD_LOGIC;
    numFFT_read : OUT STD_LOGIC;
    num_c44_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_c44_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    num_c44_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    num_c44_full_n : IN STD_LOGIC;
    num_c44_write : OUT STD_LOGIC );
end;


architecture behav of Processing_HW_fft_stage_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv33_1FFFFFFFD : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal numFFT_blk_n : STD_LOGIC;
    signal num_c44_blk_n : STD_LOGIC;
    signal numFFT_read_reg_83 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_74_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_reg_88 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start : STD_LOGIC;
    signal grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done : STD_LOGIC;
    signal grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_idle : STD_LOGIC;
    signal grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_ready : STD_LOGIC;
    signal grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S0_read : STD_LOGIC;
    signal grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S1_write : STD_LOGIC;
    signal grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal numFFT_cast_fu_65_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_i_i_fu_68_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Processing_HW_fft_stage_1_Pipeline_stage_1_counter_stage_1_total IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        S0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S0_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S0_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S0_empty_n : IN STD_LOGIC;
        S0_read : OUT STD_LOGIC;
        S1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S1_full_n : IN STD_LOGIC;
        S1_write : OUT STD_LOGIC;
        bound : IN STD_LOGIC_VECTOR (41 downto 0) );
    end component;



begin
    grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56 : component Processing_HW_fft_stage_1_Pipeline_stage_1_counter_stage_1_total
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start,
        ap_done => grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done,
        ap_idle => grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_idle,
        ap_ready => grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_ready,
        S0_dout => S0_dout,
        S0_num_data_valid => ap_const_lv11_0,
        S0_fifo_cap => ap_const_lv11_0,
        S0_empty_n => S0_empty_n,
        S0_read => grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S0_read,
        S1_din => grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S1_din,
        S1_num_data_valid => ap_const_lv11_0,
        S1_fifo_cap => ap_const_lv11_0,
        S1_full_n => S1_full_n,
        S1_write => grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S1_write,
        bound => tmp_reg_88);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_ready = ap_const_logic_1)) then 
                    grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                numFFT_read_reg_83 <= numFFT_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_reg_88(41 downto 9) <= tmp_fu_74_p3(41 downto 9);
            end if;
        end if;
    end process;
    tmp_reg_88(8 downto 0) <= "000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, numFFT_empty_n, num_c44_full_n, grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (num_c44_full_n = ap_const_logic_0) or (numFFT_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    S0_read_assign_proc : process(grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S0_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            S0_read <= grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S0_read;
        else 
            S0_read <= ap_const_logic_0;
        end if; 
    end process;

    S1_din <= grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S1_din;

    S1_write_assign_proc : process(grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S1_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            S1_write <= grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_S1_write;
        else 
            S1_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, numFFT_empty_n, num_c44_full_n)
    begin
        if (((real_start = ap_const_logic_0) or (num_c44_full_n = ap_const_logic_0) or (numFFT_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done)
    begin
        if ((grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, numFFT_empty_n, num_c44_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (num_c44_full_n = ap_const_logic_0) or (numFFT_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start <= grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_start_reg;

    internal_ap_ready_assign_proc : process(grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_fft_stage_1_Pipeline_stage_1_counter_stage_1_total_fu_56_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    numFFT_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, numFFT_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            numFFT_blk_n <= numFFT_empty_n;
        else 
            numFFT_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    numFFT_cast_fu_65_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(numFFT_read_reg_83),33));

    numFFT_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, numFFT_empty_n, num_c44_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (num_c44_full_n = ap_const_logic_0) or (numFFT_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            numFFT_read <= ap_const_logic_1;
        else 
            numFFT_read <= ap_const_logic_0;
        end if; 
    end process;


    num_c44_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, num_c44_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_c44_blk_n <= num_c44_full_n;
        else 
            num_c44_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    num_c44_din <= numFFT_dout;

    num_c44_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, numFFT_empty_n, num_c44_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (num_c44_full_n = ap_const_logic_0) or (numFFT_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_c44_write <= ap_const_logic_1;
        else 
            num_c44_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_i_i_fu_68_p2 <= std_logic_vector(unsigned(numFFT_cast_fu_65_p1) + unsigned(ap_const_lv33_1FFFFFFFD));
    tmp_fu_74_p3 <= (sub_i_i_fu_68_p2 & ap_const_lv9_0);
end behav;
