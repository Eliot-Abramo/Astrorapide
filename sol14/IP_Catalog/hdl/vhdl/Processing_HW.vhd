-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Processing_HW is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Processing_HW is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Processing_HW_Processing_HW,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=142,HLS_SYN_DSP=0,HLS_SYN_FF=28235,HLS_SYN_LUT=41334,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal numFFT : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal numFFT_read_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_read_reg_429 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_r_read_reg_435 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_297_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_441 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_index_load_reg_446 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond1_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Spectrumoutput_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Spectrumoutput_load_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_261_fu_346_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_261_reg_465 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast3_reg_470 : STD_LOGIC_VECTOR (60 downto 0);
    signal empty_264_fu_383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_264_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_265_fu_401_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_265_reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_Top_DataFlox_fu_236_ap_done : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_ap_ready : STD_LOGIC;
    signal ap_sync_grp_Top_DataFlox_fu_236_ap_ready : STD_LOGIC;
    signal ap_sync_grp_Top_DataFlox_fu_236_ap_done : STD_LOGIC;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal Spectrumoutput_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Spectrumoutput_ce0 : STD_LOGIC;
    signal Spectrumoutput_we0 : STD_LOGIC;
    signal Spectrumoutput_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Spectrumoutput_ce1 : STD_LOGIC;
    signal Spectrumoutput_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff0_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Buff0_re_ce0 : STD_LOGIC;
    signal Buff0_re_we0 : STD_LOGIC;
    signal Buff0_re_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff0_re_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff0_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Buff0_im_ce0 : STD_LOGIC;
    signal Buff0_im_we0 : STD_LOGIC;
    signal Buff0_im_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff0_im_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff1_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Buff1_re_ce0 : STD_LOGIC;
    signal Buff1_re_we0 : STD_LOGIC;
    signal Buff1_re_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff1_re_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff1_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Buff1_im_ce0 : STD_LOGIC;
    signal Buff1_im_we0 : STD_LOGIC;
    signal Buff1_im_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff1_im_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff2_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Buff2_re_ce0 : STD_LOGIC;
    signal Buff2_re_we0 : STD_LOGIC;
    signal Buff2_re_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff2_re_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff2_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Buff2_im_ce0 : STD_LOGIC;
    signal Buff2_im_we0 : STD_LOGIC;
    signal Buff2_im_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Buff2_im_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_initial_buffer_fu_221_ap_start : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_ap_done : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_ap_idle : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_ap_ready : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Buff0_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_load_initial_buffer_fu_221_Buff0_re_ce0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Buff0_re_we0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Buff0_re_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_initial_buffer_fu_221_Buff0_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_load_initial_buffer_fu_221_Buff0_im_ce0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Buff0_im_we0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Buff0_im_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_initial_buffer_fu_221_Buff1_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_load_initial_buffer_fu_221_Buff1_re_ce0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Buff1_re_we0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Buff1_re_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_initial_buffer_fu_221_Buff1_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_load_initial_buffer_fu_221_Buff1_im_ce0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Buff1_im_we0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Buff1_im_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_initial_buffer_fu_221_Buff2_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_load_initial_buffer_fu_221_Buff2_re_ce0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Buff2_re_we0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Buff2_re_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_initial_buffer_fu_221_Buff2_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_load_initial_buffer_fu_221_Buff2_im_ce0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Buff2_im_we0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Buff2_im_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Spectrumoutput_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_load_initial_buffer_fu_221_Spectrumoutput_ce0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Spectrumoutput_we0 : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_Spectrumoutput_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Spectrumoutput_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Spectrumoutput_ce0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Spectrumoutput_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Spectrumoutput_we0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Spectrumoutput_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Spectrumoutput_ce1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Spectrumoutput_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Spectrumoutput_we1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff0_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff0_re_ce0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff0_re_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff0_re_we0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff0_re_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff0_re_ce1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff0_re_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff0_re_we1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff0_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff0_im_ce0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff0_im_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff0_im_we0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff0_im_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff0_im_ce1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff0_im_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff0_im_we1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff1_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff1_re_ce0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff1_re_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff1_re_we0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff1_re_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff1_re_ce1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff1_re_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff1_re_we1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff1_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff1_im_ce0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff1_im_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff1_im_we0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff1_im_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff1_im_ce1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff1_im_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff1_im_we1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff2_re_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff2_re_ce0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff2_re_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff2_re_we0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff2_re_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff2_re_ce1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff2_re_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff2_re_we1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff2_im_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff2_im_ce0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff2_im_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff2_im_we0 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff2_im_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff2_im_ce1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_Buff2_im_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Top_DataFlox_fu_236_Buff2_im_we1 : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_ap_start : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_ap_idle : STD_LOGIC;
    signal grp_Top_DataFlox_fu_236_ap_continue : STD_LOGIC;
    signal grp_load_initial_buffer_fu_221_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_Top_DataFlox_fu_236_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_sync_reg_grp_Top_DataFlox_fu_236_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_Top_DataFlox_fu_236_ap_done : STD_LOGIC := '0';
    signal loop_index_cast4_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast3_cast_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal loop_index_fu_144 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_259_fu_315_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_260_fu_331_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_334_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast5_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_262_fu_349_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_364_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_263_fu_374_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_cast6_fu_379_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_389_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal Spectrumoutput_load_cast_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast7_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Processing_HW_load_initial_buffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Buff0_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff0_re_ce0 : OUT STD_LOGIC;
        Buff0_re_we0 : OUT STD_LOGIC;
        Buff0_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff0_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff0_im_ce0 : OUT STD_LOGIC;
        Buff0_im_we0 : OUT STD_LOGIC;
        Buff0_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff1_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff1_re_ce0 : OUT STD_LOGIC;
        Buff1_re_we0 : OUT STD_LOGIC;
        Buff1_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff1_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff1_im_ce0 : OUT STD_LOGIC;
        Buff1_im_we0 : OUT STD_LOGIC;
        Buff1_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff2_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff2_re_ce0 : OUT STD_LOGIC;
        Buff2_re_we0 : OUT STD_LOGIC;
        Buff2_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff2_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff2_im_ce0 : OUT STD_LOGIC;
        Buff2_im_we0 : OUT STD_LOGIC;
        Buff2_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r : IN STD_LOGIC_VECTOR (63 downto 0);
        Spectrumoutput_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Spectrumoutput_ce0 : OUT STD_LOGIC;
        Spectrumoutput_we0 : OUT STD_LOGIC;
        Spectrumoutput_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Processing_HW_Top_DataFlox IS
    port (
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r : IN STD_LOGIC_VECTOR (63 downto 0);
        Spectrumoutput_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Spectrumoutput_ce0 : OUT STD_LOGIC;
        Spectrumoutput_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Spectrumoutput_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Spectrumoutput_we0 : OUT STD_LOGIC;
        Spectrumoutput_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Spectrumoutput_ce1 : OUT STD_LOGIC;
        Spectrumoutput_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Spectrumoutput_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Spectrumoutput_we1 : OUT STD_LOGIC;
        num : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff0_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff0_re_ce0 : OUT STD_LOGIC;
        Buff0_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff0_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff0_re_we0 : OUT STD_LOGIC;
        Buff0_re_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff0_re_ce1 : OUT STD_LOGIC;
        Buff0_re_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff0_re_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff0_re_we1 : OUT STD_LOGIC;
        Buff0_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff0_im_ce0 : OUT STD_LOGIC;
        Buff0_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff0_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff0_im_we0 : OUT STD_LOGIC;
        Buff0_im_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff0_im_ce1 : OUT STD_LOGIC;
        Buff0_im_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff0_im_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff0_im_we1 : OUT STD_LOGIC;
        Buff1_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff1_re_ce0 : OUT STD_LOGIC;
        Buff1_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff1_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff1_re_we0 : OUT STD_LOGIC;
        Buff1_re_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff1_re_ce1 : OUT STD_LOGIC;
        Buff1_re_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff1_re_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff1_re_we1 : OUT STD_LOGIC;
        Buff1_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff1_im_ce0 : OUT STD_LOGIC;
        Buff1_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff1_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff1_im_we0 : OUT STD_LOGIC;
        Buff1_im_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff1_im_ce1 : OUT STD_LOGIC;
        Buff1_im_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff1_im_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff1_im_we1 : OUT STD_LOGIC;
        Buff2_re_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff2_re_ce0 : OUT STD_LOGIC;
        Buff2_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff2_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff2_re_we0 : OUT STD_LOGIC;
        Buff2_re_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff2_re_ce1 : OUT STD_LOGIC;
        Buff2_re_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff2_re_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff2_re_we1 : OUT STD_LOGIC;
        Buff2_im_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff2_im_ce0 : OUT STD_LOGIC;
        Buff2_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff2_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff2_im_we0 : OUT STD_LOGIC;
        Buff2_im_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Buff2_im_ce1 : OUT STD_LOGIC;
        Buff2_im_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Buff2_im_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Buff2_im_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_r_ap_vld : IN STD_LOGIC;
        num_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component Processing_HW_Spectrumoutput_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Processing_HW_Buff0_re_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Processing_HW_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        numFFT : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component Processing_HW_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    Spectrumoutput_U : component Processing_HW_Spectrumoutput_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Spectrumoutput_address0,
        ce0 => Spectrumoutput_ce0,
        we0 => Spectrumoutput_we0,
        d0 => Spectrumoutput_d0,
        q0 => Spectrumoutput_q0,
        address1 => grp_Top_DataFlox_fu_236_Spectrumoutput_address1,
        ce1 => Spectrumoutput_ce1,
        q1 => Spectrumoutput_q1);

    Buff0_re_U : component Processing_HW_Buff0_re_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Buff0_re_address0,
        ce0 => Buff0_re_ce0,
        we0 => Buff0_re_we0,
        d0 => Buff0_re_d0,
        q0 => Buff0_re_q0);

    Buff0_im_U : component Processing_HW_Buff0_re_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Buff0_im_address0,
        ce0 => Buff0_im_ce0,
        we0 => Buff0_im_we0,
        d0 => Buff0_im_d0,
        q0 => Buff0_im_q0);

    Buff1_re_U : component Processing_HW_Buff0_re_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Buff1_re_address0,
        ce0 => Buff1_re_ce0,
        we0 => Buff1_re_we0,
        d0 => Buff1_re_d0,
        q0 => Buff1_re_q0);

    Buff1_im_U : component Processing_HW_Buff0_re_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Buff1_im_address0,
        ce0 => Buff1_im_ce0,
        we0 => Buff1_im_we0,
        d0 => Buff1_im_d0,
        q0 => Buff1_im_q0);

    Buff2_re_U : component Processing_HW_Buff0_re_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Buff2_re_address0,
        ce0 => Buff2_re_ce0,
        we0 => Buff2_re_we0,
        d0 => Buff2_re_d0,
        q0 => Buff2_re_q0);

    Buff2_im_U : component Processing_HW_Buff0_re_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Buff2_im_address0,
        ce0 => Buff2_im_ce0,
        we0 => Buff2_im_we0,
        d0 => Buff2_im_d0,
        q0 => Buff2_im_q0);

    grp_load_initial_buffer_fu_221 : component Processing_HW_load_initial_buffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_load_initial_buffer_fu_221_ap_start,
        ap_done => grp_load_initial_buffer_fu_221_ap_done,
        ap_idle => grp_load_initial_buffer_fu_221_ap_idle,
        ap_ready => grp_load_initial_buffer_fu_221_ap_ready,
        Buff0_re_address0 => grp_load_initial_buffer_fu_221_Buff0_re_address0,
        Buff0_re_ce0 => grp_load_initial_buffer_fu_221_Buff0_re_ce0,
        Buff0_re_we0 => grp_load_initial_buffer_fu_221_Buff0_re_we0,
        Buff0_re_d0 => grp_load_initial_buffer_fu_221_Buff0_re_d0,
        Buff0_im_address0 => grp_load_initial_buffer_fu_221_Buff0_im_address0,
        Buff0_im_ce0 => grp_load_initial_buffer_fu_221_Buff0_im_ce0,
        Buff0_im_we0 => grp_load_initial_buffer_fu_221_Buff0_im_we0,
        Buff0_im_d0 => grp_load_initial_buffer_fu_221_Buff0_im_d0,
        Buff1_re_address0 => grp_load_initial_buffer_fu_221_Buff1_re_address0,
        Buff1_re_ce0 => grp_load_initial_buffer_fu_221_Buff1_re_ce0,
        Buff1_re_we0 => grp_load_initial_buffer_fu_221_Buff1_re_we0,
        Buff1_re_d0 => grp_load_initial_buffer_fu_221_Buff1_re_d0,
        Buff1_im_address0 => grp_load_initial_buffer_fu_221_Buff1_im_address0,
        Buff1_im_ce0 => grp_load_initial_buffer_fu_221_Buff1_im_ce0,
        Buff1_im_we0 => grp_load_initial_buffer_fu_221_Buff1_im_we0,
        Buff1_im_d0 => grp_load_initial_buffer_fu_221_Buff1_im_d0,
        Buff2_re_address0 => grp_load_initial_buffer_fu_221_Buff2_re_address0,
        Buff2_re_ce0 => grp_load_initial_buffer_fu_221_Buff2_re_ce0,
        Buff2_re_we0 => grp_load_initial_buffer_fu_221_Buff2_re_we0,
        Buff2_re_d0 => grp_load_initial_buffer_fu_221_Buff2_re_d0,
        Buff2_im_address0 => grp_load_initial_buffer_fu_221_Buff2_im_address0,
        Buff2_im_ce0 => grp_load_initial_buffer_fu_221_Buff2_im_ce0,
        Buff2_im_we0 => grp_load_initial_buffer_fu_221_Buff2_im_we0,
        Buff2_im_d0 => grp_load_initial_buffer_fu_221_Buff2_im_d0,
        m_axi_gmem_AWVALID => grp_load_initial_buffer_fu_221_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_load_initial_buffer_fu_221_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_load_initial_buffer_fu_221_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_load_initial_buffer_fu_221_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_load_initial_buffer_fu_221_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_load_initial_buffer_fu_221_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_load_initial_buffer_fu_221_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_load_initial_buffer_fu_221_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_load_initial_buffer_fu_221_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_load_initial_buffer_fu_221_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_load_initial_buffer_fu_221_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_load_initial_buffer_fu_221_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_load_initial_buffer_fu_221_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_load_initial_buffer_fu_221_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_load_initial_buffer_fu_221_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_load_initial_buffer_fu_221_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_load_initial_buffer_fu_221_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_load_initial_buffer_fu_221_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_load_initial_buffer_fu_221_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_load_initial_buffer_fu_221_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_load_initial_buffer_fu_221_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_load_initial_buffer_fu_221_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_load_initial_buffer_fu_221_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_load_initial_buffer_fu_221_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_load_initial_buffer_fu_221_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_load_initial_buffer_fu_221_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_load_initial_buffer_fu_221_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_load_initial_buffer_fu_221_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_load_initial_buffer_fu_221_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_load_initial_buffer_fu_221_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_load_initial_buffer_fu_221_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_load_initial_buffer_fu_221_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        input_r => input_r_read_reg_435,
        Spectrumoutput_address0 => grp_load_initial_buffer_fu_221_Spectrumoutput_address0,
        Spectrumoutput_ce0 => grp_load_initial_buffer_fu_221_Spectrumoutput_ce0,
        Spectrumoutput_we0 => grp_load_initial_buffer_fu_221_Spectrumoutput_we0,
        Spectrumoutput_d0 => grp_load_initial_buffer_fu_221_Spectrumoutput_d0,
        output_r => output_r_read_reg_429);

    grp_Top_DataFlox_fu_236 : component Processing_HW_Top_DataFlox
    port map (
        m_axi_gmem_AWVALID => grp_Top_DataFlox_fu_236_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_Top_DataFlox_fu_236_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_Top_DataFlox_fu_236_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_Top_DataFlox_fu_236_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_Top_DataFlox_fu_236_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_Top_DataFlox_fu_236_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_Top_DataFlox_fu_236_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_Top_DataFlox_fu_236_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_Top_DataFlox_fu_236_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_Top_DataFlox_fu_236_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_Top_DataFlox_fu_236_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_Top_DataFlox_fu_236_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_Top_DataFlox_fu_236_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_Top_DataFlox_fu_236_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_Top_DataFlox_fu_236_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_Top_DataFlox_fu_236_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_Top_DataFlox_fu_236_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_Top_DataFlox_fu_236_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_Top_DataFlox_fu_236_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_Top_DataFlox_fu_236_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_Top_DataFlox_fu_236_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_Top_DataFlox_fu_236_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_Top_DataFlox_fu_236_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_Top_DataFlox_fu_236_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_Top_DataFlox_fu_236_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_Top_DataFlox_fu_236_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_Top_DataFlox_fu_236_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_Top_DataFlox_fu_236_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_Top_DataFlox_fu_236_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_Top_DataFlox_fu_236_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_Top_DataFlox_fu_236_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_Top_DataFlox_fu_236_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        in_r => input_r_read_reg_435,
        Spectrumoutput_address0 => grp_Top_DataFlox_fu_236_Spectrumoutput_address0,
        Spectrumoutput_ce0 => grp_Top_DataFlox_fu_236_Spectrumoutput_ce0,
        Spectrumoutput_d0 => grp_Top_DataFlox_fu_236_Spectrumoutput_d0,
        Spectrumoutput_q0 => ap_const_lv32_0,
        Spectrumoutput_we0 => grp_Top_DataFlox_fu_236_Spectrumoutput_we0,
        Spectrumoutput_address1 => grp_Top_DataFlox_fu_236_Spectrumoutput_address1,
        Spectrumoutput_ce1 => grp_Top_DataFlox_fu_236_Spectrumoutput_ce1,
        Spectrumoutput_d1 => grp_Top_DataFlox_fu_236_Spectrumoutput_d1,
        Spectrumoutput_q1 => Spectrumoutput_q1,
        Spectrumoutput_we1 => grp_Top_DataFlox_fu_236_Spectrumoutput_we1,
        num => numFFT_read_reg_424,
        Buff0_re_address0 => grp_Top_DataFlox_fu_236_Buff0_re_address0,
        Buff0_re_ce0 => grp_Top_DataFlox_fu_236_Buff0_re_ce0,
        Buff0_re_d0 => grp_Top_DataFlox_fu_236_Buff0_re_d0,
        Buff0_re_q0 => Buff0_re_q0,
        Buff0_re_we0 => grp_Top_DataFlox_fu_236_Buff0_re_we0,
        Buff0_re_address1 => grp_Top_DataFlox_fu_236_Buff0_re_address1,
        Buff0_re_ce1 => grp_Top_DataFlox_fu_236_Buff0_re_ce1,
        Buff0_re_d1 => grp_Top_DataFlox_fu_236_Buff0_re_d1,
        Buff0_re_q1 => ap_const_lv32_0,
        Buff0_re_we1 => grp_Top_DataFlox_fu_236_Buff0_re_we1,
        Buff0_im_address0 => grp_Top_DataFlox_fu_236_Buff0_im_address0,
        Buff0_im_ce0 => grp_Top_DataFlox_fu_236_Buff0_im_ce0,
        Buff0_im_d0 => grp_Top_DataFlox_fu_236_Buff0_im_d0,
        Buff0_im_q0 => Buff0_im_q0,
        Buff0_im_we0 => grp_Top_DataFlox_fu_236_Buff0_im_we0,
        Buff0_im_address1 => grp_Top_DataFlox_fu_236_Buff0_im_address1,
        Buff0_im_ce1 => grp_Top_DataFlox_fu_236_Buff0_im_ce1,
        Buff0_im_d1 => grp_Top_DataFlox_fu_236_Buff0_im_d1,
        Buff0_im_q1 => ap_const_lv32_0,
        Buff0_im_we1 => grp_Top_DataFlox_fu_236_Buff0_im_we1,
        Buff1_re_address0 => grp_Top_DataFlox_fu_236_Buff1_re_address0,
        Buff1_re_ce0 => grp_Top_DataFlox_fu_236_Buff1_re_ce0,
        Buff1_re_d0 => grp_Top_DataFlox_fu_236_Buff1_re_d0,
        Buff1_re_q0 => Buff1_re_q0,
        Buff1_re_we0 => grp_Top_DataFlox_fu_236_Buff1_re_we0,
        Buff1_re_address1 => grp_Top_DataFlox_fu_236_Buff1_re_address1,
        Buff1_re_ce1 => grp_Top_DataFlox_fu_236_Buff1_re_ce1,
        Buff1_re_d1 => grp_Top_DataFlox_fu_236_Buff1_re_d1,
        Buff1_re_q1 => ap_const_lv32_0,
        Buff1_re_we1 => grp_Top_DataFlox_fu_236_Buff1_re_we1,
        Buff1_im_address0 => grp_Top_DataFlox_fu_236_Buff1_im_address0,
        Buff1_im_ce0 => grp_Top_DataFlox_fu_236_Buff1_im_ce0,
        Buff1_im_d0 => grp_Top_DataFlox_fu_236_Buff1_im_d0,
        Buff1_im_q0 => Buff1_im_q0,
        Buff1_im_we0 => grp_Top_DataFlox_fu_236_Buff1_im_we0,
        Buff1_im_address1 => grp_Top_DataFlox_fu_236_Buff1_im_address1,
        Buff1_im_ce1 => grp_Top_DataFlox_fu_236_Buff1_im_ce1,
        Buff1_im_d1 => grp_Top_DataFlox_fu_236_Buff1_im_d1,
        Buff1_im_q1 => ap_const_lv32_0,
        Buff1_im_we1 => grp_Top_DataFlox_fu_236_Buff1_im_we1,
        Buff2_re_address0 => grp_Top_DataFlox_fu_236_Buff2_re_address0,
        Buff2_re_ce0 => grp_Top_DataFlox_fu_236_Buff2_re_ce0,
        Buff2_re_d0 => grp_Top_DataFlox_fu_236_Buff2_re_d0,
        Buff2_re_q0 => Buff2_re_q0,
        Buff2_re_we0 => grp_Top_DataFlox_fu_236_Buff2_re_we0,
        Buff2_re_address1 => grp_Top_DataFlox_fu_236_Buff2_re_address1,
        Buff2_re_ce1 => grp_Top_DataFlox_fu_236_Buff2_re_ce1,
        Buff2_re_d1 => grp_Top_DataFlox_fu_236_Buff2_re_d1,
        Buff2_re_q1 => ap_const_lv32_0,
        Buff2_re_we1 => grp_Top_DataFlox_fu_236_Buff2_re_we1,
        Buff2_im_address0 => grp_Top_DataFlox_fu_236_Buff2_im_address0,
        Buff2_im_ce0 => grp_Top_DataFlox_fu_236_Buff2_im_ce0,
        Buff2_im_d0 => grp_Top_DataFlox_fu_236_Buff2_im_d0,
        Buff2_im_q0 => Buff2_im_q0,
        Buff2_im_we0 => grp_Top_DataFlox_fu_236_Buff2_im_we0,
        Buff2_im_address1 => grp_Top_DataFlox_fu_236_Buff2_im_address1,
        Buff2_im_ce1 => grp_Top_DataFlox_fu_236_Buff2_im_ce1,
        Buff2_im_d1 => grp_Top_DataFlox_fu_236_Buff2_im_d1,
        Buff2_im_q1 => ap_const_lv32_0,
        Buff2_im_we1 => grp_Top_DataFlox_fu_236_Buff2_im_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        in_r_ap_vld => ap_const_logic_1,
        num_ap_vld => ap_const_logic_1,
        ap_start => grp_Top_DataFlox_fu_236_ap_start,
        ap_done => grp_Top_DataFlox_fu_236_ap_done,
        ap_ready => grp_Top_DataFlox_fu_236_ap_ready,
        ap_idle => grp_Top_DataFlox_fu_236_ap_idle,
        ap_continue => grp_Top_DataFlox_fu_236_ap_continue);

    control_s_axi_U : component Processing_HW_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        output_r => output_r,
        numFFT => numFFT,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component Processing_HW_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 64,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => p_cast3_cast_fu_407_p1,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => empty_265_reg_480,
        I_WSTRB => empty_264_reg_475,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_Top_DataFlox_fu_236_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_Top_DataFlox_fu_236_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_sync_reg_grp_Top_DataFlox_fu_236_ap_done <= ap_const_logic_0;
                elsif ((grp_Top_DataFlox_fu_236_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_Top_DataFlox_fu_236_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_Top_DataFlox_fu_236_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_Top_DataFlox_fu_236_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_sync_reg_grp_Top_DataFlox_fu_236_ap_ready <= ap_const_logic_0;
                elsif ((grp_Top_DataFlox_fu_236_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_Top_DataFlox_fu_236_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Top_DataFlox_fu_236_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Top_DataFlox_fu_236_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_sync_grp_Top_DataFlox_fu_236_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    grp_Top_DataFlox_fu_236_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Top_DataFlox_fu_236_ap_ready = ap_const_logic_1)) then 
                    grp_Top_DataFlox_fu_236_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_load_initial_buffer_fu_221_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_load_initial_buffer_fu_221_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_load_initial_buffer_fu_221_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_initial_buffer_fu_221_ap_ready = ap_const_logic_1)) then 
                    grp_load_initial_buffer_fu_221_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    loop_index_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                loop_index_fu_144 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_fu_309_p2 = ap_const_lv1_0))) then 
                loop_index_fu_144 <= empty_259_fu_315_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Spectrumoutput_load_reg_460 <= Spectrumoutput_q0;
                empty_261_reg_465 <= empty_261_fu_346_p1;
                loop_index_load_reg_446 <= loop_index_fu_144;
                p_cast3_reg_470 <= empty_262_fu_349_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                empty_264_reg_475 <= empty_264_fu_383_p2;
                empty_265_reg_480 <= empty_265_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_441 <= empty_fu_297_p1;
                input_r_read_reg_435 <= input_r;
                numFFT_read_reg_424 <= numFFT;
                output_r_read_reg_429 <= output_r;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter8, exitcond1_fu_309_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, grp_load_initial_buffer_fu_221_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_load_initial_buffer_fu_221_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_fu_309_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_fu_309_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    Buff0_im_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff0_im_address0, grp_Top_DataFlox_fu_236_Buff0_im_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff0_im_address0 <= grp_Top_DataFlox_fu_236_Buff0_im_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff0_im_address0 <= grp_load_initial_buffer_fu_221_Buff0_im_address0;
        else 
            Buff0_im_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Buff0_im_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff0_im_ce0, grp_Top_DataFlox_fu_236_Buff0_im_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff0_im_ce0 <= grp_Top_DataFlox_fu_236_Buff0_im_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff0_im_ce0 <= grp_load_initial_buffer_fu_221_Buff0_im_ce0;
        else 
            Buff0_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Buff0_im_d0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff0_im_d0, grp_Top_DataFlox_fu_236_Buff0_im_d0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff0_im_d0 <= grp_Top_DataFlox_fu_236_Buff0_im_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff0_im_d0 <= grp_load_initial_buffer_fu_221_Buff0_im_d0;
        else 
            Buff0_im_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Buff0_im_we0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff0_im_we0, grp_Top_DataFlox_fu_236_Buff0_im_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff0_im_we0 <= grp_Top_DataFlox_fu_236_Buff0_im_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff0_im_we0 <= grp_load_initial_buffer_fu_221_Buff0_im_we0;
        else 
            Buff0_im_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Buff0_re_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff0_re_address0, grp_Top_DataFlox_fu_236_Buff0_re_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff0_re_address0 <= grp_Top_DataFlox_fu_236_Buff0_re_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff0_re_address0 <= grp_load_initial_buffer_fu_221_Buff0_re_address0;
        else 
            Buff0_re_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Buff0_re_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff0_re_ce0, grp_Top_DataFlox_fu_236_Buff0_re_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff0_re_ce0 <= grp_Top_DataFlox_fu_236_Buff0_re_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff0_re_ce0 <= grp_load_initial_buffer_fu_221_Buff0_re_ce0;
        else 
            Buff0_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Buff0_re_d0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff0_re_d0, grp_Top_DataFlox_fu_236_Buff0_re_d0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff0_re_d0 <= grp_Top_DataFlox_fu_236_Buff0_re_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff0_re_d0 <= grp_load_initial_buffer_fu_221_Buff0_re_d0;
        else 
            Buff0_re_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Buff0_re_we0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff0_re_we0, grp_Top_DataFlox_fu_236_Buff0_re_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff0_re_we0 <= grp_Top_DataFlox_fu_236_Buff0_re_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff0_re_we0 <= grp_load_initial_buffer_fu_221_Buff0_re_we0;
        else 
            Buff0_re_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Buff1_im_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff1_im_address0, grp_Top_DataFlox_fu_236_Buff1_im_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff1_im_address0 <= grp_Top_DataFlox_fu_236_Buff1_im_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff1_im_address0 <= grp_load_initial_buffer_fu_221_Buff1_im_address0;
        else 
            Buff1_im_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Buff1_im_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff1_im_ce0, grp_Top_DataFlox_fu_236_Buff1_im_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff1_im_ce0 <= grp_Top_DataFlox_fu_236_Buff1_im_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff1_im_ce0 <= grp_load_initial_buffer_fu_221_Buff1_im_ce0;
        else 
            Buff1_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Buff1_im_d0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff1_im_d0, grp_Top_DataFlox_fu_236_Buff1_im_d0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff1_im_d0 <= grp_Top_DataFlox_fu_236_Buff1_im_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff1_im_d0 <= grp_load_initial_buffer_fu_221_Buff1_im_d0;
        else 
            Buff1_im_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Buff1_im_we0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff1_im_we0, grp_Top_DataFlox_fu_236_Buff1_im_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff1_im_we0 <= grp_Top_DataFlox_fu_236_Buff1_im_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff1_im_we0 <= grp_load_initial_buffer_fu_221_Buff1_im_we0;
        else 
            Buff1_im_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Buff1_re_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff1_re_address0, grp_Top_DataFlox_fu_236_Buff1_re_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff1_re_address0 <= grp_Top_DataFlox_fu_236_Buff1_re_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff1_re_address0 <= grp_load_initial_buffer_fu_221_Buff1_re_address0;
        else 
            Buff1_re_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Buff1_re_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff1_re_ce0, grp_Top_DataFlox_fu_236_Buff1_re_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff1_re_ce0 <= grp_Top_DataFlox_fu_236_Buff1_re_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff1_re_ce0 <= grp_load_initial_buffer_fu_221_Buff1_re_ce0;
        else 
            Buff1_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Buff1_re_d0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff1_re_d0, grp_Top_DataFlox_fu_236_Buff1_re_d0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff1_re_d0 <= grp_Top_DataFlox_fu_236_Buff1_re_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff1_re_d0 <= grp_load_initial_buffer_fu_221_Buff1_re_d0;
        else 
            Buff1_re_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Buff1_re_we0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff1_re_we0, grp_Top_DataFlox_fu_236_Buff1_re_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff1_re_we0 <= grp_Top_DataFlox_fu_236_Buff1_re_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff1_re_we0 <= grp_load_initial_buffer_fu_221_Buff1_re_we0;
        else 
            Buff1_re_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Buff2_im_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff2_im_address0, grp_Top_DataFlox_fu_236_Buff2_im_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff2_im_address0 <= grp_Top_DataFlox_fu_236_Buff2_im_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff2_im_address0 <= grp_load_initial_buffer_fu_221_Buff2_im_address0;
        else 
            Buff2_im_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Buff2_im_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff2_im_ce0, grp_Top_DataFlox_fu_236_Buff2_im_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff2_im_ce0 <= grp_Top_DataFlox_fu_236_Buff2_im_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff2_im_ce0 <= grp_load_initial_buffer_fu_221_Buff2_im_ce0;
        else 
            Buff2_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Buff2_im_d0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff2_im_d0, grp_Top_DataFlox_fu_236_Buff2_im_d0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff2_im_d0 <= grp_Top_DataFlox_fu_236_Buff2_im_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff2_im_d0 <= grp_load_initial_buffer_fu_221_Buff2_im_d0;
        else 
            Buff2_im_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Buff2_im_we0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff2_im_we0, grp_Top_DataFlox_fu_236_Buff2_im_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff2_im_we0 <= grp_Top_DataFlox_fu_236_Buff2_im_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff2_im_we0 <= grp_load_initial_buffer_fu_221_Buff2_im_we0;
        else 
            Buff2_im_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Buff2_re_address0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff2_re_address0, grp_Top_DataFlox_fu_236_Buff2_re_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff2_re_address0 <= grp_Top_DataFlox_fu_236_Buff2_re_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff2_re_address0 <= grp_load_initial_buffer_fu_221_Buff2_re_address0;
        else 
            Buff2_re_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Buff2_re_ce0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff2_re_ce0, grp_Top_DataFlox_fu_236_Buff2_re_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff2_re_ce0 <= grp_Top_DataFlox_fu_236_Buff2_re_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff2_re_ce0 <= grp_load_initial_buffer_fu_221_Buff2_re_ce0;
        else 
            Buff2_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Buff2_re_d0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff2_re_d0, grp_Top_DataFlox_fu_236_Buff2_re_d0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff2_re_d0 <= grp_Top_DataFlox_fu_236_Buff2_re_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff2_re_d0 <= grp_load_initial_buffer_fu_221_Buff2_re_d0;
        else 
            Buff2_re_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Buff2_re_we0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Buff2_re_we0, grp_Top_DataFlox_fu_236_Buff2_re_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Buff2_re_we0 <= grp_Top_DataFlox_fu_236_Buff2_re_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Buff2_re_we0 <= grp_load_initial_buffer_fu_221_Buff2_re_we0;
        else 
            Buff2_re_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Spectrumoutput_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Spectrumoutput_address0, grp_Top_DataFlox_fu_236_Spectrumoutput_address0, ap_CS_fsm_state3, loop_index_cast4_fu_321_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Spectrumoutput_address0 <= loop_index_cast4_fu_321_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Spectrumoutput_address0 <= grp_Top_DataFlox_fu_236_Spectrumoutput_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Spectrumoutput_address0 <= grp_load_initial_buffer_fu_221_Spectrumoutput_address0;
        else 
            Spectrumoutput_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Spectrumoutput_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Spectrumoutput_ce0, grp_Top_DataFlox_fu_236_Spectrumoutput_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Spectrumoutput_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Spectrumoutput_ce0 <= grp_Top_DataFlox_fu_236_Spectrumoutput_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Spectrumoutput_ce0 <= grp_load_initial_buffer_fu_221_Spectrumoutput_ce0;
        else 
            Spectrumoutput_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Spectrumoutput_ce1_assign_proc : process(ap_CS_fsm_state5, grp_Top_DataFlox_fu_236_Spectrumoutput_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Spectrumoutput_ce1 <= grp_Top_DataFlox_fu_236_Spectrumoutput_ce1;
        else 
            Spectrumoutput_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Spectrumoutput_d0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Spectrumoutput_d0, grp_Top_DataFlox_fu_236_Spectrumoutput_d0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Spectrumoutput_d0 <= grp_Top_DataFlox_fu_236_Spectrumoutput_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Spectrumoutput_d0 <= grp_load_initial_buffer_fu_221_Spectrumoutput_d0;
        else 
            Spectrumoutput_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Spectrumoutput_load_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Spectrumoutput_load_reg_460),64));

    Spectrumoutput_we0_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_Spectrumoutput_we0, grp_Top_DataFlox_fu_236_Spectrumoutput_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Spectrumoutput_we0 <= grp_Top_DataFlox_fu_236_Spectrumoutput_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Spectrumoutput_we0 <= grp_load_initial_buffer_fu_221_Spectrumoutput_we0;
        else 
            Spectrumoutput_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_load_initial_buffer_fu_221_ap_done)
    begin
        if ((grp_load_initial_buffer_fu_221_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state5_on_subcall_done)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter8, gmem_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (gmem_BVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, gmem_AWREADY, gmem_WREADY, gmem_BVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (gmem_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (gmem_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (gmem_AWREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, gmem_AWREADY, gmem_WREADY, gmem_BVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (gmem_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (gmem_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (gmem_AWREADY = ap_const_logic_0)));
    end process;

        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter8_assign_proc : process(gmem_BVALID)
    begin
                ap_block_state14_pp0_stage0_iter8 <= (gmem_BVALID = ap_const_logic_0);
    end process;


    ap_block_state5_on_subcall_done_assign_proc : process(ap_sync_grp_Top_DataFlox_fu_236_ap_ready, ap_sync_grp_Top_DataFlox_fu_236_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((ap_sync_grp_Top_DataFlox_fu_236_ap_ready and ap_sync_grp_Top_DataFlox_fu_236_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(exitcond1_fu_309_p2)
    begin
        if ((exitcond1_fu_309_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_Top_DataFlox_fu_236_ap_done <= (grp_Top_DataFlox_fu_236_ap_done or ap_sync_reg_grp_Top_DataFlox_fu_236_ap_done);
    ap_sync_grp_Top_DataFlox_fu_236_ap_ready <= (grp_Top_DataFlox_fu_236_ap_ready or ap_sync_reg_grp_Top_DataFlox_fu_236_ap_ready);
    empty_259_fu_315_p2 <= std_logic_vector(unsigned(loop_index_fu_144) + unsigned(ap_const_lv11_1));
    empty_260_fu_331_p1 <= loop_index_load_reg_446(10 - 1 downto 0);
    empty_261_fu_346_p1 <= loop_index_load_reg_446(1 - 1 downto 0);
    empty_262_fu_349_p2 <= std_logic_vector(unsigned(p_cast5_fu_342_p1) + unsigned(output_r_read_reg_429));
    empty_263_fu_374_p2 <= std_logic_vector(unsigned(p_cast_fu_364_p3) + unsigned(empty_reg_441));
    empty_264_fu_383_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_F),to_integer(unsigned('0' & p_cast6_fu_379_p1(8-1 downto 0)))));
    empty_265_fu_401_p2 <= std_logic_vector(shift_left(unsigned(Spectrumoutput_load_cast_fu_371_p1),to_integer(unsigned('0' & p_cast7_fu_397_p1(31-1 downto 0)))));
    empty_fu_297_p1 <= output_r(3 - 1 downto 0);
    exitcond1_fu_309_p2 <= "1" when (loop_index_fu_144 = ap_const_lv11_400) else "0";

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_m_axi_gmem_ARADDR, grp_Top_DataFlox_fu_236_m_axi_gmem_ARADDR, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_ARADDR <= grp_Top_DataFlox_fu_236_m_axi_gmem_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARADDR <= grp_load_initial_buffer_fu_221_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_m_axi_gmem_ARLEN, grp_Top_DataFlox_fu_236_m_axi_gmem_ARLEN, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_ARLEN <= grp_Top_DataFlox_fu_236_m_axi_gmem_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARLEN <= grp_load_initial_buffer_fu_221_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_m_axi_gmem_ARVALID, grp_Top_DataFlox_fu_236_m_axi_gmem_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_ARVALID <= grp_Top_DataFlox_fu_236_m_axi_gmem_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARVALID <= grp_load_initial_buffer_fu_221_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state5, grp_load_initial_buffer_fu_221_m_axi_gmem_RREADY, grp_Top_DataFlox_fu_236_m_axi_gmem_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_RREADY <= grp_Top_DataFlox_fu_236_m_axi_gmem_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_RREADY <= grp_load_initial_buffer_fu_221_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_Top_DataFlox_fu_236_ap_continue_assign_proc : process(ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_Top_DataFlox_fu_236_ap_continue <= ap_const_logic_1;
        else 
            grp_Top_DataFlox_fu_236_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_Top_DataFlox_fu_236_ap_start <= grp_Top_DataFlox_fu_236_ap_start_reg;
    grp_load_initial_buffer_fu_221_ap_start <= grp_load_initial_buffer_fu_221_ap_start_reg;
    loop_index_cast4_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_fu_144),64));
        p_cast3_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast3_reg_470),64));

    p_cast5_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_334_p3),64));
    p_cast6_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_263_fu_374_p2),8));
    p_cast7_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_389_p3),64));
    p_cast_fu_364_p3 <= (empty_261_reg_465 & ap_const_lv2_0);
    tmp_4_fu_334_p3 <= (empty_260_fu_331_p1 & ap_const_lv2_0);
    tmp_6_fu_389_p3 <= (empty_263_fu_374_p2 & ap_const_lv3_0);
end behav;
