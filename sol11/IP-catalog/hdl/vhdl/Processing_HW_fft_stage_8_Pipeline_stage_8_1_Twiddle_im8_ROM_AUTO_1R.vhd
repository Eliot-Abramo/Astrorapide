-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Processing_HW_fft_stage_8_Pipeline_stage_8_1_Twiddle_im8_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of Processing_HW_fft_stage_8_Pipeline_stage_8_1_Twiddle_im8_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10000000000000000000000000000000", 1 => "10111100110010010000101010110000", 2 => "10111101010010001111101100110000", 3 => "10111101100101101010100100000101", 
    4 => "10111101110010001011110100110110", 5 => "10111101111110101011001001110011", 6 => "10111110000101100100000010000011", 7 => "10111110001011110001000010100011", 
    8 => "10111110010001111100010111000010", 9 => "10111110011000000101110000010011", 10 => "10111110011110001100111111001101", 11 => "10111110100010001000111010010100", 
    12 => "10111110100101001010000000110010", 13 => "10111110101000001001101011100101", 14 => "10111110101011000111110011010100", 15 => "10111110101110000100010000101010", 
    16 => "10111110110000111110111100010110", 17 => "10111110110011110111101111001011", 18 => "10111110110110101110100010000000", 19 => "10111110111001100011001101110101", 
    20 => "10111110111100010101101011101010", 21 => "10111110111111000101110100101000", 22 => "10111111000000111001110000111101", 23 => "10111111000010001111010110011010", 
    24 => "10111111000011100011100111011010", 25 => "10111111000100110110100000101011", 26 => "10111111000110000111111111000000", 27 => "10111111000111010111111111010010", 
    28 => "10111111001000100110011110011010", 29 => "10111111001001110011011001010110", 30 => "10111111001010111110101101001010", 31 => "10111111001100001000010110111011", 
    32 => "10111111001101010000010011110011", 33 => "10111111001110010110100001000010", 34 => "10111111001111011010111011111010", 35 => "10111111010000011101100001110001", 
    36 => "10111111010001011110010000000011", 37 => "10111111010010011101000100010010", 38 => "10111111010011011001111100000010", 39 => "10111111010100010100110100111101", 
    40 => "10111111010101001101101100110010", 41 => "10111111010110000100100001010011", 42 => "10111111010110111001010000011011", 43 => "10111111010111101011111000000101", 
    44 => "10111111011000011100010110011000", 45 => "10111111011001001010101001011001", 46 => "10111111011001110110101111011000", 47 => "10111111011010100000100110100111", 
    48 => "10111111011011001000001101011110", 49 => "10111111011011101101100010011110", 50 => "10111111011100010000100100001000", 51 => "10111111011100110001010001001000", 
    52 => "10111111011101001111101000001011", 53 => "10111111011101101011101000000111", 54 => "10111111011110000101001111111000", 55 => "10111111011110011100011110011101", 
    56 => "10111111011110110001010010111111", 57 => "10111111011111000011101100101000", 58 => "10111111011111010011101010101100", 59 => "10111111011111100001001100100100", 
    60 => "10111111011111101100010001101101", 61 => "10111111011111110100111001101101", 62 => "10111111011111111011000100001111", 63 => "10111111011111111110110001000011", 
    64 => "10111111100000000000000000000000", 65 => "10111111011111111110110001000011", 66 => "10111111011111111011000100001111", 67 => "10111111011111110100111001101101", 
    68 => "10111111011111101100010001101101", 69 => "10111111011111100001001100100011", 70 => "10111111011111010011101010101100", 71 => "10111111011111000011101100101000", 
    72 => "10111111011110110001010010111110", 73 => "10111111011110011100011110011101", 74 => "10111111011110000101001111111000", 75 => "10111111011101101011101000000111", 
    76 => "10111111011101001111101000001010", 77 => "10111111011100110001010001000111", 78 => "10111111011100010000100100001000", 79 => "10111111011011101101100010011110", 
    80 => "10111111011011001000001101011110", 81 => "10111111011010100000100110100110", 82 => "10111111011001110110101111011000", 83 => "10111111011001001010101001011001", 
    84 => "10111111011000011100010110010111", 85 => "10111111010111101011111000000110", 86 => "10111111010110111001010000011010", 87 => "10111111010110000100100001010010", 
    88 => "10111111010101001101101100110000", 89 => "10111111010100010100110100111101", 90 => "10111111010011011001111100000010", 91 => "10111111010010011101000100010001", 
    92 => "10111111010001011110010000000100", 93 => "10111111010000011101100001110000", 94 => "10111111001111011010111011111000", 95 => "10111111001110010110100001000000", 
    96 => "10111111001101010000010011110011", 97 => "10111111001100001000010110111010", 98 => "10111111001010111110101101001000", 99 => "10111111001001110011011001010110", 
    100 => "10111111001000100110011110011001", 101 => "10111111000111010111111111010000", 102 => "10111111000110000111111110111101", 103 => "10111111000100110110100000101010", 
    104 => "10111111000011100011100111011001", 105 => "10111111000010001111010110011000", 106 => "10111111000000111001110000111101", 107 => "10111110111111000101110100100101", 
    108 => "10111110111100010101101011100110", 109 => "10111110111001100011001101110110", 110 => "10111110110110101110100001111111", 111 => "10111110110011110111101111000111", 
    112 => "10111110110000111110111100010000", 113 => "10111110101110000100010000101010", 114 => "10111110101011000111110011010010", 115 => "10111110101000001001101011100000", 
    116 => "10111110100101001010000000110011", 117 => "10111110100010001000111010010010", 118 => "10111110011110001100111111000101", 119 => "10111110011000000101110000001000", 
    120 => "10111110010001111100010111000001", 121 => "10111110001011110001000010011101", 122 => "10111110000101100100000001111010", 123 => "10111101111110101011001001110110", 
    124 => "10111101110010001011110100110000", 125 => "10111101100101101010100011110101", 126 => "10111101010010001111101011111101", 127 => "10111100110010010000101010100110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

