-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fft_HW_fft_stage_7_Pipeline_stage_7_1_Twiddle_re5_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of fft_HW_fft_stage_7_Pipeline_stage_7_1_Twiddle_re5_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111111100000000000000000000000", 1 => "00111111011111111011000100001111", 2 => "00111111011111101100010001101101", 3 => "00111111011111010011101010101100", 
    4 => "00111111011110110001010010111110", 5 => "00111111011110000101001111111000", 6 => "00111111011101001111101000001011", 7 => "00111111011100010000100100001000", 
    8 => "00111111011011001000001101011110", 9 => "00111111011001110110101111011000", 10 => "00111111011000011100010110010111", 11 => "00111111010110111001010000011010", 
    12 => "00111111010101001101101100110001", 13 => "00111111010011011001111100000010", 14 => "00111111010001011110010000000011", 15 => "00111111001111011010111011111001", 
    16 => "00111111001101010000010011110011", 17 => "00111111001010111110101101001001", 18 => "00111111001000100110011110011001", 19 => "00111111000110000111111111000000", 
    20 => "00111111000011100011100111011001", 21 => "00111111000000111001110000111100", 22 => "00111110111100010101101011100111", 23 => "00111110110110101110100010000001", 
    24 => "00111110110000111110111100010101", 25 => "00111110101011000111110011010011", 26 => "00111110100101001010000000110000", 27 => "00111110011110001100111111001000", 
    28 => "00111110010001111100010110111100", 29 => "00111110000101100100000010000101", 30 => "00111101110010001011110100110101", 31 => "00111101010010001111101100101001", 
    32 => "10110011001110111011110100101110", 33 => "10111101010010001111101101000001", 34 => "10111101110010001011110101000001", 35 => "10111110000101100100000010001010", 
    36 => "10111110010001111100010111000010", 37 => "10111110011110001100111111001101", 38 => "10111110100101001010000000110011", 39 => "10111110101011000111110011010110", 
    40 => "10111110110000111110111100011000", 41 => "10111110110110101110100010000000", 42 => "10111110111100010101101011101101", 43 => "10111111000000111001110000111101", 
    44 => "10111111000011100011100111011100", 45 => "10111111000110000111111111000001", 46 => "10111111001000100110011110011001", 47 => "10111111001010111110101101001011", 
    48 => "10111111001101010000010011110011", 49 => "10111111001111011010111011111011", 50 => "10111111010001011110010000000100", 51 => "10111111010011011001111100000100", 
    52 => "10111111010101001101101100110010", 53 => "10111111010110111001010000011010", 54 => "10111111011000011100010110011001", 55 => "10111111011001110110101111011000", 
    56 => "10111111011011001000001101100000", 57 => "10111111011100010000100100001001", 58 => "10111111011101001111101000001011", 59 => "10111111011110000101001111111000", 
    60 => "10111111011110110001010010111111", 61 => "10111111011111010011101010101100", 62 => "10111111011111101100010001101101", 63 => "10111111011111111011000100001111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

