-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_HW_Top_DataFlox is
port (
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    out_r : IN STD_LOGIC_VECTOR (63 downto 0);
    num : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    out_r_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    in_r_ap_vld : IN STD_LOGIC;
    num_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of fft_HW_Top_DataFlox is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_out_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_out_c_write : STD_LOGIC;
    signal load_nfft_value_U0_ap_start : STD_LOGIC;
    signal load_nfft_value_U0_ap_done : STD_LOGIC;
    signal load_nfft_value_U0_ap_continue : STD_LOGIC;
    signal load_nfft_value_U0_ap_idle : STD_LOGIC;
    signal load_nfft_value_U0_ap_ready : STD_LOGIC;
    signal load_nfft_value_U0_start_out : STD_LOGIC;
    signal load_nfft_value_U0_start_write : STD_LOGIC;
    signal load_nfft_value_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal load_nfft_value_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal load_nfft_value_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal load_nfft_value_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal load_nfft_value_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_nfft_value_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal load_nfft_value_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal load_nfft_value_U0_S0_din : STD_LOGIC_VECTOR (63 downto 0);
    signal load_nfft_value_U0_S0_write : STD_LOGIC;
    signal load_nfft_value_U0_num_c36_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_nfft_value_U0_num_c36_write : STD_LOGIC;
    signal fft_stage_1_U0_ap_start : STD_LOGIC;
    signal fft_stage_1_U0_ap_done : STD_LOGIC;
    signal fft_stage_1_U0_ap_continue : STD_LOGIC;
    signal fft_stage_1_U0_ap_idle : STD_LOGIC;
    signal fft_stage_1_U0_ap_ready : STD_LOGIC;
    signal fft_stage_1_U0_start_out : STD_LOGIC;
    signal fft_stage_1_U0_start_write : STD_LOGIC;
    signal fft_stage_1_U0_S0_read : STD_LOGIC;
    signal fft_stage_1_U0_S1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_1_U0_S1_write : STD_LOGIC;
    signal fft_stage_1_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_1_U0_num_c35_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_1_U0_num_c35_write : STD_LOGIC;
    signal fft_stage_2_U0_ap_start : STD_LOGIC;
    signal fft_stage_2_U0_ap_done : STD_LOGIC;
    signal fft_stage_2_U0_ap_continue : STD_LOGIC;
    signal fft_stage_2_U0_ap_idle : STD_LOGIC;
    signal fft_stage_2_U0_ap_ready : STD_LOGIC;
    signal fft_stage_2_U0_start_out : STD_LOGIC;
    signal fft_stage_2_U0_start_write : STD_LOGIC;
    signal fft_stage_2_U0_S1_read : STD_LOGIC;
    signal fft_stage_2_U0_S2_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_2_U0_S2_write : STD_LOGIC;
    signal fft_stage_2_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_2_U0_num_c34_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_2_U0_num_c34_write : STD_LOGIC;
    signal fft_stage_3_U0_ap_start : STD_LOGIC;
    signal fft_stage_3_U0_ap_done : STD_LOGIC;
    signal fft_stage_3_U0_ap_continue : STD_LOGIC;
    signal fft_stage_3_U0_ap_idle : STD_LOGIC;
    signal fft_stage_3_U0_ap_ready : STD_LOGIC;
    signal fft_stage_3_U0_start_out : STD_LOGIC;
    signal fft_stage_3_U0_start_write : STD_LOGIC;
    signal fft_stage_3_U0_S2_read : STD_LOGIC;
    signal fft_stage_3_U0_S3_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_3_U0_S3_write : STD_LOGIC;
    signal fft_stage_3_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_3_U0_num_c33_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_3_U0_num_c33_write : STD_LOGIC;
    signal fft_stage_4_U0_ap_start : STD_LOGIC;
    signal fft_stage_4_U0_ap_done : STD_LOGIC;
    signal fft_stage_4_U0_ap_continue : STD_LOGIC;
    signal fft_stage_4_U0_ap_idle : STD_LOGIC;
    signal fft_stage_4_U0_ap_ready : STD_LOGIC;
    signal fft_stage_4_U0_start_out : STD_LOGIC;
    signal fft_stage_4_U0_start_write : STD_LOGIC;
    signal fft_stage_4_U0_S3_read : STD_LOGIC;
    signal fft_stage_4_U0_S4_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_4_U0_S4_write : STD_LOGIC;
    signal fft_stage_4_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_4_U0_num_c32_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_4_U0_num_c32_write : STD_LOGIC;
    signal fft_stage_5_U0_ap_start : STD_LOGIC;
    signal fft_stage_5_U0_ap_done : STD_LOGIC;
    signal fft_stage_5_U0_ap_continue : STD_LOGIC;
    signal fft_stage_5_U0_ap_idle : STD_LOGIC;
    signal fft_stage_5_U0_ap_ready : STD_LOGIC;
    signal fft_stage_5_U0_start_out : STD_LOGIC;
    signal fft_stage_5_U0_start_write : STD_LOGIC;
    signal fft_stage_5_U0_S4_read : STD_LOGIC;
    signal fft_stage_5_U0_S5_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_5_U0_S5_write : STD_LOGIC;
    signal fft_stage_5_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_5_U0_num_c31_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_5_U0_num_c31_write : STD_LOGIC;
    signal fft_stage_6_U0_ap_start : STD_LOGIC;
    signal fft_stage_6_U0_ap_done : STD_LOGIC;
    signal fft_stage_6_U0_ap_continue : STD_LOGIC;
    signal fft_stage_6_U0_ap_idle : STD_LOGIC;
    signal fft_stage_6_U0_ap_ready : STD_LOGIC;
    signal fft_stage_6_U0_start_out : STD_LOGIC;
    signal fft_stage_6_U0_start_write : STD_LOGIC;
    signal fft_stage_6_U0_S5_read : STD_LOGIC;
    signal fft_stage_6_U0_S6_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_6_U0_S6_write : STD_LOGIC;
    signal fft_stage_6_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_6_U0_num_c30_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_6_U0_num_c30_write : STD_LOGIC;
    signal fft_stage_7_U0_ap_start : STD_LOGIC;
    signal fft_stage_7_U0_ap_done : STD_LOGIC;
    signal fft_stage_7_U0_ap_continue : STD_LOGIC;
    signal fft_stage_7_U0_ap_idle : STD_LOGIC;
    signal fft_stage_7_U0_ap_ready : STD_LOGIC;
    signal fft_stage_7_U0_start_out : STD_LOGIC;
    signal fft_stage_7_U0_start_write : STD_LOGIC;
    signal fft_stage_7_U0_S6_read : STD_LOGIC;
    signal fft_stage_7_U0_S7_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_7_U0_S7_write : STD_LOGIC;
    signal fft_stage_7_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_7_U0_num_c29_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_7_U0_num_c29_write : STD_LOGIC;
    signal fft_stage_8_U0_ap_start : STD_LOGIC;
    signal fft_stage_8_U0_ap_done : STD_LOGIC;
    signal fft_stage_8_U0_ap_continue : STD_LOGIC;
    signal fft_stage_8_U0_ap_idle : STD_LOGIC;
    signal fft_stage_8_U0_ap_ready : STD_LOGIC;
    signal fft_stage_8_U0_start_out : STD_LOGIC;
    signal fft_stage_8_U0_start_write : STD_LOGIC;
    signal fft_stage_8_U0_S7_read : STD_LOGIC;
    signal fft_stage_8_U0_S8_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_8_U0_S8_write : STD_LOGIC;
    signal fft_stage_8_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_8_U0_num_c28_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_8_U0_num_c28_write : STD_LOGIC;
    signal fft_stage_9_U0_ap_start : STD_LOGIC;
    signal fft_stage_9_U0_ap_done : STD_LOGIC;
    signal fft_stage_9_U0_ap_continue : STD_LOGIC;
    signal fft_stage_9_U0_ap_idle : STD_LOGIC;
    signal fft_stage_9_U0_ap_ready : STD_LOGIC;
    signal fft_stage_9_U0_start_out : STD_LOGIC;
    signal fft_stage_9_U0_start_write : STD_LOGIC;
    signal fft_stage_9_U0_S8_read : STD_LOGIC;
    signal fft_stage_9_U0_S9_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_9_U0_S9_write : STD_LOGIC;
    signal fft_stage_9_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_9_U0_num_c27_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_9_U0_num_c27_write : STD_LOGIC;
    signal fft_stage_10_U0_ap_start : STD_LOGIC;
    signal fft_stage_10_U0_ap_done : STD_LOGIC;
    signal fft_stage_10_U0_ap_continue : STD_LOGIC;
    signal fft_stage_10_U0_ap_idle : STD_LOGIC;
    signal fft_stage_10_U0_ap_ready : STD_LOGIC;
    signal fft_stage_10_U0_S9_read : STD_LOGIC;
    signal fft_stage_10_U0_S10_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_stage_10_U0_S10_write : STD_LOGIC;
    signal fft_stage_10_U0_numFFT_read : STD_LOGIC;
    signal fft_stage_10_U0_num_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_stage_10_U0_num_c_write : STD_LOGIC;
    signal retrieve_nfft_value_U0_ap_start : STD_LOGIC;
    signal retrieve_nfft_value_U0_ap_done : STD_LOGIC;
    signal retrieve_nfft_value_U0_ap_continue : STD_LOGIC;
    signal retrieve_nfft_value_U0_ap_idle : STD_LOGIC;
    signal retrieve_nfft_value_U0_ap_ready : STD_LOGIC;
    signal retrieve_nfft_value_U0_S10_read : STD_LOGIC;
    signal retrieve_nfft_value_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal retrieve_nfft_value_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal retrieve_nfft_value_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal retrieve_nfft_value_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal retrieve_nfft_value_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal retrieve_nfft_value_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal retrieve_nfft_value_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal retrieve_nfft_value_U0_out_r_read : STD_LOGIC;
    signal retrieve_nfft_value_U0_numFFT_read : STD_LOGIC;
    signal out_c_full_n : STD_LOGIC;
    signal out_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out_c_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal out_c_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal out_c_empty_n : STD_LOGIC;
    signal S0_full_n : STD_LOGIC;
    signal S0_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S0_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S0_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S0_empty_n : STD_LOGIC;
    signal num_c36_full_n : STD_LOGIC;
    signal num_c36_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c36_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c36_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c36_empty_n : STD_LOGIC;
    signal S1_full_n : STD_LOGIC;
    signal S1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S1_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S1_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S1_empty_n : STD_LOGIC;
    signal num_c35_full_n : STD_LOGIC;
    signal num_c35_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c35_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c35_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c35_empty_n : STD_LOGIC;
    signal S2_full_n : STD_LOGIC;
    signal S2_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S2_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S2_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S2_empty_n : STD_LOGIC;
    signal num_c34_full_n : STD_LOGIC;
    signal num_c34_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c34_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c34_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c34_empty_n : STD_LOGIC;
    signal S3_full_n : STD_LOGIC;
    signal S3_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S3_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S3_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S3_empty_n : STD_LOGIC;
    signal num_c33_full_n : STD_LOGIC;
    signal num_c33_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c33_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c33_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c33_empty_n : STD_LOGIC;
    signal S4_full_n : STD_LOGIC;
    signal S4_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S4_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S4_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S4_empty_n : STD_LOGIC;
    signal num_c32_full_n : STD_LOGIC;
    signal num_c32_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c32_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c32_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c32_empty_n : STD_LOGIC;
    signal S5_full_n : STD_LOGIC;
    signal S5_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S5_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S5_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S5_empty_n : STD_LOGIC;
    signal num_c31_full_n : STD_LOGIC;
    signal num_c31_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c31_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c31_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c31_empty_n : STD_LOGIC;
    signal S6_full_n : STD_LOGIC;
    signal S6_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S6_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S6_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S6_empty_n : STD_LOGIC;
    signal num_c30_full_n : STD_LOGIC;
    signal num_c30_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c30_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c30_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c30_empty_n : STD_LOGIC;
    signal S7_full_n : STD_LOGIC;
    signal S7_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S7_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S7_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S7_empty_n : STD_LOGIC;
    signal num_c29_full_n : STD_LOGIC;
    signal num_c29_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c29_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c29_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c29_empty_n : STD_LOGIC;
    signal S8_full_n : STD_LOGIC;
    signal S8_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S8_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S8_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S8_empty_n : STD_LOGIC;
    signal num_c28_full_n : STD_LOGIC;
    signal num_c28_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c28_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c28_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c28_empty_n : STD_LOGIC;
    signal S9_full_n : STD_LOGIC;
    signal S9_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S9_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S9_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S9_empty_n : STD_LOGIC;
    signal num_c27_full_n : STD_LOGIC;
    signal num_c27_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c27_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c27_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c27_empty_n : STD_LOGIC;
    signal S10_full_n : STD_LOGIC;
    signal S10_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal S10_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal S10_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal S10_empty_n : STD_LOGIC;
    signal num_c_full_n : STD_LOGIC;
    signal num_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal num_c_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_load_nfft_value_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_load_nfft_value_U0_ap_ready : STD_LOGIC;
    signal start_for_retrieve_nfft_value_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_retrieve_nfft_value_U0_full_n : STD_LOGIC;
    signal start_for_retrieve_nfft_value_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_retrieve_nfft_value_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_1_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_1_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_2_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_2_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_3_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_3_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_4_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_4_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_5_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_5_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_5_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_5_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_6_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_6_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_6_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_6_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_7_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_7_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_7_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_7_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_8_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_8_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_8_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_8_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_9_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_9_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_9_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_9_U0_empty_n : STD_LOGIC;
    signal start_for_fft_stage_10_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_10_U0_full_n : STD_LOGIC;
    signal start_for_fft_stage_10_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_stage_10_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft_HW_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        out_r : IN STD_LOGIC_VECTOR (63 downto 0);
        out_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_c_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        out_c_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        out_c_full_n : IN STD_LOGIC;
        out_c_write : OUT STD_LOGIC );
    end component;


    component fft_HW_load_nfft_value IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r : IN STD_LOGIC_VECTOR (63 downto 0);
        S0_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S0_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S0_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S0_full_n : IN STD_LOGIC;
        S0_write : OUT STD_LOGIC;
        numFFT : IN STD_LOGIC_VECTOR (31 downto 0);
        num_c36_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c36_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c36_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c36_full_n : IN STD_LOGIC;
        num_c36_write : OUT STD_LOGIC );
    end component;


    component fft_HW_fft_stage_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S0_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S0_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S0_empty_n : IN STD_LOGIC;
        S0_read : OUT STD_LOGIC;
        S1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S1_full_n : IN STD_LOGIC;
        S1_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c35_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c35_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c35_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c35_full_n : IN STD_LOGIC;
        num_c35_write : OUT STD_LOGIC );
    end component;


    component fft_HW_fft_stage_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S1_empty_n : IN STD_LOGIC;
        S1_read : OUT STD_LOGIC;
        S2_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S2_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S2_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S2_full_n : IN STD_LOGIC;
        S2_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c34_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c34_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c34_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c34_full_n : IN STD_LOGIC;
        num_c34_write : OUT STD_LOGIC );
    end component;


    component fft_HW_fft_stage_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S2_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S2_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S2_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S2_empty_n : IN STD_LOGIC;
        S2_read : OUT STD_LOGIC;
        S3_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S3_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S3_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S3_full_n : IN STD_LOGIC;
        S3_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c33_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c33_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c33_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c33_full_n : IN STD_LOGIC;
        num_c33_write : OUT STD_LOGIC );
    end component;


    component fft_HW_fft_stage_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S3_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S3_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S3_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S3_empty_n : IN STD_LOGIC;
        S3_read : OUT STD_LOGIC;
        S4_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S4_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S4_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S4_full_n : IN STD_LOGIC;
        S4_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c32_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c32_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c32_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c32_full_n : IN STD_LOGIC;
        num_c32_write : OUT STD_LOGIC );
    end component;


    component fft_HW_fft_stage_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S4_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S4_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S4_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S4_empty_n : IN STD_LOGIC;
        S4_read : OUT STD_LOGIC;
        S5_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S5_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S5_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S5_full_n : IN STD_LOGIC;
        S5_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c31_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c31_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c31_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c31_full_n : IN STD_LOGIC;
        num_c31_write : OUT STD_LOGIC );
    end component;


    component fft_HW_fft_stage_6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S5_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S5_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S5_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S5_empty_n : IN STD_LOGIC;
        S5_read : OUT STD_LOGIC;
        S6_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S6_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S6_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S6_full_n : IN STD_LOGIC;
        S6_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c30_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c30_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c30_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c30_full_n : IN STD_LOGIC;
        num_c30_write : OUT STD_LOGIC );
    end component;


    component fft_HW_fft_stage_7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S6_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S6_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S6_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S6_empty_n : IN STD_LOGIC;
        S6_read : OUT STD_LOGIC;
        S7_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S7_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S7_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S7_full_n : IN STD_LOGIC;
        S7_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c29_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c29_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c29_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c29_full_n : IN STD_LOGIC;
        num_c29_write : OUT STD_LOGIC );
    end component;


    component fft_HW_fft_stage_8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S7_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S7_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S7_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S7_empty_n : IN STD_LOGIC;
        S7_read : OUT STD_LOGIC;
        S8_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S8_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S8_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S8_full_n : IN STD_LOGIC;
        S8_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c28_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c28_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c28_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c28_full_n : IN STD_LOGIC;
        num_c28_write : OUT STD_LOGIC );
    end component;


    component fft_HW_fft_stage_9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        S8_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S8_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S8_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S8_empty_n : IN STD_LOGIC;
        S8_read : OUT STD_LOGIC;
        S9_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S9_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S9_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S9_full_n : IN STD_LOGIC;
        S9_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c27_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c27_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c27_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c27_full_n : IN STD_LOGIC;
        num_c27_write : OUT STD_LOGIC );
    end component;


    component fft_HW_fft_stage_10 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        S9_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S9_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S9_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S9_empty_n : IN STD_LOGIC;
        S9_read : OUT STD_LOGIC;
        S10_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        S10_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S10_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S10_full_n : IN STD_LOGIC;
        S10_write : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC;
        num_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        num_c_full_n : IN STD_LOGIC;
        num_c_write : OUT STD_LOGIC );
    end component;


    component fft_HW_retrieve_nfft_value IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        S10_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        S10_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        S10_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        S10_empty_n : IN STD_LOGIC;
        S10_read : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        out_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        out_r_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        out_r_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        out_r_empty_n : IN STD_LOGIC;
        out_r_read : OUT STD_LOGIC;
        numFFT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numFFT_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numFFT_empty_n : IN STD_LOGIC;
        numFFT_read : OUT STD_LOGIC );
    end component;


    component fft_HW_fifo_w64_d13_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_HW_fifo_w64_d1024_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_HW_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_HW_start_for_retrieve_nfft_value_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_HW_start_for_fft_stage_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_HW_start_for_fft_stage_2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_HW_start_for_fft_stage_3_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_HW_start_for_fft_stage_4_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_HW_start_for_fft_stage_5_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_HW_start_for_fft_stage_6_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_HW_start_for_fft_stage_7_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_HW_start_for_fft_stage_8_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_HW_start_for_fft_stage_9_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fft_HW_start_for_fft_stage_10_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    entry_proc_U0 : component fft_HW_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_retrieve_nfft_value_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        out_r => out_r,
        out_c_din => entry_proc_U0_out_c_din,
        out_c_num_data_valid => out_c_num_data_valid,
        out_c_fifo_cap => out_c_fifo_cap,
        out_c_full_n => out_c_full_n,
        out_c_write => entry_proc_U0_out_c_write);

    load_nfft_value_U0 : component fft_HW_load_nfft_value
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load_nfft_value_U0_ap_start,
        start_full_n => start_for_fft_stage_1_U0_full_n,
        ap_done => load_nfft_value_U0_ap_done,
        ap_continue => load_nfft_value_U0_ap_continue,
        ap_idle => load_nfft_value_U0_ap_idle,
        ap_ready => load_nfft_value_U0_ap_ready,
        start_out => load_nfft_value_U0_start_out,
        start_write => load_nfft_value_U0_start_write,
        m_axi_gmem_AWVALID => load_nfft_value_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => load_nfft_value_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => load_nfft_value_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => load_nfft_value_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => load_nfft_value_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => load_nfft_value_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => load_nfft_value_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => load_nfft_value_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => load_nfft_value_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => load_nfft_value_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => load_nfft_value_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => load_nfft_value_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => load_nfft_value_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => load_nfft_value_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => load_nfft_value_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => load_nfft_value_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => load_nfft_value_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => load_nfft_value_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => load_nfft_value_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => load_nfft_value_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => load_nfft_value_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => load_nfft_value_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => load_nfft_value_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => load_nfft_value_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => load_nfft_value_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => load_nfft_value_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => load_nfft_value_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => load_nfft_value_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => load_nfft_value_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => load_nfft_value_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => load_nfft_value_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => load_nfft_value_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        in_r => in_r,
        S0_din => load_nfft_value_U0_S0_din,
        S0_num_data_valid => S0_num_data_valid,
        S0_fifo_cap => S0_fifo_cap,
        S0_full_n => S0_full_n,
        S0_write => load_nfft_value_U0_S0_write,
        numFFT => num,
        num_c36_din => load_nfft_value_U0_num_c36_din,
        num_c36_num_data_valid => num_c36_num_data_valid,
        num_c36_fifo_cap => num_c36_fifo_cap,
        num_c36_full_n => num_c36_full_n,
        num_c36_write => load_nfft_value_U0_num_c36_write);

    fft_stage_1_U0 : component fft_HW_fft_stage_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_1_U0_ap_start,
        start_full_n => start_for_fft_stage_2_U0_full_n,
        ap_done => fft_stage_1_U0_ap_done,
        ap_continue => fft_stage_1_U0_ap_continue,
        ap_idle => fft_stage_1_U0_ap_idle,
        ap_ready => fft_stage_1_U0_ap_ready,
        start_out => fft_stage_1_U0_start_out,
        start_write => fft_stage_1_U0_start_write,
        S0_dout => S0_dout,
        S0_num_data_valid => S0_num_data_valid,
        S0_fifo_cap => S0_fifo_cap,
        S0_empty_n => S0_empty_n,
        S0_read => fft_stage_1_U0_S0_read,
        S1_din => fft_stage_1_U0_S1_din,
        S1_num_data_valid => S1_num_data_valid,
        S1_fifo_cap => S1_fifo_cap,
        S1_full_n => S1_full_n,
        S1_write => fft_stage_1_U0_S1_write,
        numFFT_dout => num_c36_dout,
        numFFT_num_data_valid => num_c36_num_data_valid,
        numFFT_fifo_cap => num_c36_fifo_cap,
        numFFT_empty_n => num_c36_empty_n,
        numFFT_read => fft_stage_1_U0_numFFT_read,
        num_c35_din => fft_stage_1_U0_num_c35_din,
        num_c35_num_data_valid => num_c35_num_data_valid,
        num_c35_fifo_cap => num_c35_fifo_cap,
        num_c35_full_n => num_c35_full_n,
        num_c35_write => fft_stage_1_U0_num_c35_write);

    fft_stage_2_U0 : component fft_HW_fft_stage_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_2_U0_ap_start,
        start_full_n => start_for_fft_stage_3_U0_full_n,
        ap_done => fft_stage_2_U0_ap_done,
        ap_continue => fft_stage_2_U0_ap_continue,
        ap_idle => fft_stage_2_U0_ap_idle,
        ap_ready => fft_stage_2_U0_ap_ready,
        start_out => fft_stage_2_U0_start_out,
        start_write => fft_stage_2_U0_start_write,
        S1_dout => S1_dout,
        S1_num_data_valid => S1_num_data_valid,
        S1_fifo_cap => S1_fifo_cap,
        S1_empty_n => S1_empty_n,
        S1_read => fft_stage_2_U0_S1_read,
        S2_din => fft_stage_2_U0_S2_din,
        S2_num_data_valid => S2_num_data_valid,
        S2_fifo_cap => S2_fifo_cap,
        S2_full_n => S2_full_n,
        S2_write => fft_stage_2_U0_S2_write,
        numFFT_dout => num_c35_dout,
        numFFT_num_data_valid => num_c35_num_data_valid,
        numFFT_fifo_cap => num_c35_fifo_cap,
        numFFT_empty_n => num_c35_empty_n,
        numFFT_read => fft_stage_2_U0_numFFT_read,
        num_c34_din => fft_stage_2_U0_num_c34_din,
        num_c34_num_data_valid => num_c34_num_data_valid,
        num_c34_fifo_cap => num_c34_fifo_cap,
        num_c34_full_n => num_c34_full_n,
        num_c34_write => fft_stage_2_U0_num_c34_write);

    fft_stage_3_U0 : component fft_HW_fft_stage_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_3_U0_ap_start,
        start_full_n => start_for_fft_stage_4_U0_full_n,
        ap_done => fft_stage_3_U0_ap_done,
        ap_continue => fft_stage_3_U0_ap_continue,
        ap_idle => fft_stage_3_U0_ap_idle,
        ap_ready => fft_stage_3_U0_ap_ready,
        start_out => fft_stage_3_U0_start_out,
        start_write => fft_stage_3_U0_start_write,
        S2_dout => S2_dout,
        S2_num_data_valid => S2_num_data_valid,
        S2_fifo_cap => S2_fifo_cap,
        S2_empty_n => S2_empty_n,
        S2_read => fft_stage_3_U0_S2_read,
        S3_din => fft_stage_3_U0_S3_din,
        S3_num_data_valid => S3_num_data_valid,
        S3_fifo_cap => S3_fifo_cap,
        S3_full_n => S3_full_n,
        S3_write => fft_stage_3_U0_S3_write,
        numFFT_dout => num_c34_dout,
        numFFT_num_data_valid => num_c34_num_data_valid,
        numFFT_fifo_cap => num_c34_fifo_cap,
        numFFT_empty_n => num_c34_empty_n,
        numFFT_read => fft_stage_3_U0_numFFT_read,
        num_c33_din => fft_stage_3_U0_num_c33_din,
        num_c33_num_data_valid => num_c33_num_data_valid,
        num_c33_fifo_cap => num_c33_fifo_cap,
        num_c33_full_n => num_c33_full_n,
        num_c33_write => fft_stage_3_U0_num_c33_write);

    fft_stage_4_U0 : component fft_HW_fft_stage_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_4_U0_ap_start,
        start_full_n => start_for_fft_stage_5_U0_full_n,
        ap_done => fft_stage_4_U0_ap_done,
        ap_continue => fft_stage_4_U0_ap_continue,
        ap_idle => fft_stage_4_U0_ap_idle,
        ap_ready => fft_stage_4_U0_ap_ready,
        start_out => fft_stage_4_U0_start_out,
        start_write => fft_stage_4_U0_start_write,
        S3_dout => S3_dout,
        S3_num_data_valid => S3_num_data_valid,
        S3_fifo_cap => S3_fifo_cap,
        S3_empty_n => S3_empty_n,
        S3_read => fft_stage_4_U0_S3_read,
        S4_din => fft_stage_4_U0_S4_din,
        S4_num_data_valid => S4_num_data_valid,
        S4_fifo_cap => S4_fifo_cap,
        S4_full_n => S4_full_n,
        S4_write => fft_stage_4_U0_S4_write,
        numFFT_dout => num_c33_dout,
        numFFT_num_data_valid => num_c33_num_data_valid,
        numFFT_fifo_cap => num_c33_fifo_cap,
        numFFT_empty_n => num_c33_empty_n,
        numFFT_read => fft_stage_4_U0_numFFT_read,
        num_c32_din => fft_stage_4_U0_num_c32_din,
        num_c32_num_data_valid => num_c32_num_data_valid,
        num_c32_fifo_cap => num_c32_fifo_cap,
        num_c32_full_n => num_c32_full_n,
        num_c32_write => fft_stage_4_U0_num_c32_write);

    fft_stage_5_U0 : component fft_HW_fft_stage_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_5_U0_ap_start,
        start_full_n => start_for_fft_stage_6_U0_full_n,
        ap_done => fft_stage_5_U0_ap_done,
        ap_continue => fft_stage_5_U0_ap_continue,
        ap_idle => fft_stage_5_U0_ap_idle,
        ap_ready => fft_stage_5_U0_ap_ready,
        start_out => fft_stage_5_U0_start_out,
        start_write => fft_stage_5_U0_start_write,
        S4_dout => S4_dout,
        S4_num_data_valid => S4_num_data_valid,
        S4_fifo_cap => S4_fifo_cap,
        S4_empty_n => S4_empty_n,
        S4_read => fft_stage_5_U0_S4_read,
        S5_din => fft_stage_5_U0_S5_din,
        S5_num_data_valid => S5_num_data_valid,
        S5_fifo_cap => S5_fifo_cap,
        S5_full_n => S5_full_n,
        S5_write => fft_stage_5_U0_S5_write,
        numFFT_dout => num_c32_dout,
        numFFT_num_data_valid => num_c32_num_data_valid,
        numFFT_fifo_cap => num_c32_fifo_cap,
        numFFT_empty_n => num_c32_empty_n,
        numFFT_read => fft_stage_5_U0_numFFT_read,
        num_c31_din => fft_stage_5_U0_num_c31_din,
        num_c31_num_data_valid => num_c31_num_data_valid,
        num_c31_fifo_cap => num_c31_fifo_cap,
        num_c31_full_n => num_c31_full_n,
        num_c31_write => fft_stage_5_U0_num_c31_write);

    fft_stage_6_U0 : component fft_HW_fft_stage_6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_6_U0_ap_start,
        start_full_n => start_for_fft_stage_7_U0_full_n,
        ap_done => fft_stage_6_U0_ap_done,
        ap_continue => fft_stage_6_U0_ap_continue,
        ap_idle => fft_stage_6_U0_ap_idle,
        ap_ready => fft_stage_6_U0_ap_ready,
        start_out => fft_stage_6_U0_start_out,
        start_write => fft_stage_6_U0_start_write,
        S5_dout => S5_dout,
        S5_num_data_valid => S5_num_data_valid,
        S5_fifo_cap => S5_fifo_cap,
        S5_empty_n => S5_empty_n,
        S5_read => fft_stage_6_U0_S5_read,
        S6_din => fft_stage_6_U0_S6_din,
        S6_num_data_valid => S6_num_data_valid,
        S6_fifo_cap => S6_fifo_cap,
        S6_full_n => S6_full_n,
        S6_write => fft_stage_6_U0_S6_write,
        numFFT_dout => num_c31_dout,
        numFFT_num_data_valid => num_c31_num_data_valid,
        numFFT_fifo_cap => num_c31_fifo_cap,
        numFFT_empty_n => num_c31_empty_n,
        numFFT_read => fft_stage_6_U0_numFFT_read,
        num_c30_din => fft_stage_6_U0_num_c30_din,
        num_c30_num_data_valid => num_c30_num_data_valid,
        num_c30_fifo_cap => num_c30_fifo_cap,
        num_c30_full_n => num_c30_full_n,
        num_c30_write => fft_stage_6_U0_num_c30_write);

    fft_stage_7_U0 : component fft_HW_fft_stage_7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_7_U0_ap_start,
        start_full_n => start_for_fft_stage_8_U0_full_n,
        ap_done => fft_stage_7_U0_ap_done,
        ap_continue => fft_stage_7_U0_ap_continue,
        ap_idle => fft_stage_7_U0_ap_idle,
        ap_ready => fft_stage_7_U0_ap_ready,
        start_out => fft_stage_7_U0_start_out,
        start_write => fft_stage_7_U0_start_write,
        S6_dout => S6_dout,
        S6_num_data_valid => S6_num_data_valid,
        S6_fifo_cap => S6_fifo_cap,
        S6_empty_n => S6_empty_n,
        S6_read => fft_stage_7_U0_S6_read,
        S7_din => fft_stage_7_U0_S7_din,
        S7_num_data_valid => S7_num_data_valid,
        S7_fifo_cap => S7_fifo_cap,
        S7_full_n => S7_full_n,
        S7_write => fft_stage_7_U0_S7_write,
        numFFT_dout => num_c30_dout,
        numFFT_num_data_valid => num_c30_num_data_valid,
        numFFT_fifo_cap => num_c30_fifo_cap,
        numFFT_empty_n => num_c30_empty_n,
        numFFT_read => fft_stage_7_U0_numFFT_read,
        num_c29_din => fft_stage_7_U0_num_c29_din,
        num_c29_num_data_valid => num_c29_num_data_valid,
        num_c29_fifo_cap => num_c29_fifo_cap,
        num_c29_full_n => num_c29_full_n,
        num_c29_write => fft_stage_7_U0_num_c29_write);

    fft_stage_8_U0 : component fft_HW_fft_stage_8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_8_U0_ap_start,
        start_full_n => start_for_fft_stage_9_U0_full_n,
        ap_done => fft_stage_8_U0_ap_done,
        ap_continue => fft_stage_8_U0_ap_continue,
        ap_idle => fft_stage_8_U0_ap_idle,
        ap_ready => fft_stage_8_U0_ap_ready,
        start_out => fft_stage_8_U0_start_out,
        start_write => fft_stage_8_U0_start_write,
        S7_dout => S7_dout,
        S7_num_data_valid => S7_num_data_valid,
        S7_fifo_cap => S7_fifo_cap,
        S7_empty_n => S7_empty_n,
        S7_read => fft_stage_8_U0_S7_read,
        S8_din => fft_stage_8_U0_S8_din,
        S8_num_data_valid => S8_num_data_valid,
        S8_fifo_cap => S8_fifo_cap,
        S8_full_n => S8_full_n,
        S8_write => fft_stage_8_U0_S8_write,
        numFFT_dout => num_c29_dout,
        numFFT_num_data_valid => num_c29_num_data_valid,
        numFFT_fifo_cap => num_c29_fifo_cap,
        numFFT_empty_n => num_c29_empty_n,
        numFFT_read => fft_stage_8_U0_numFFT_read,
        num_c28_din => fft_stage_8_U0_num_c28_din,
        num_c28_num_data_valid => num_c28_num_data_valid,
        num_c28_fifo_cap => num_c28_fifo_cap,
        num_c28_full_n => num_c28_full_n,
        num_c28_write => fft_stage_8_U0_num_c28_write);

    fft_stage_9_U0 : component fft_HW_fft_stage_9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_9_U0_ap_start,
        start_full_n => start_for_fft_stage_10_U0_full_n,
        ap_done => fft_stage_9_U0_ap_done,
        ap_continue => fft_stage_9_U0_ap_continue,
        ap_idle => fft_stage_9_U0_ap_idle,
        ap_ready => fft_stage_9_U0_ap_ready,
        start_out => fft_stage_9_U0_start_out,
        start_write => fft_stage_9_U0_start_write,
        S8_dout => S8_dout,
        S8_num_data_valid => S8_num_data_valid,
        S8_fifo_cap => S8_fifo_cap,
        S8_empty_n => S8_empty_n,
        S8_read => fft_stage_9_U0_S8_read,
        S9_din => fft_stage_9_U0_S9_din,
        S9_num_data_valid => S9_num_data_valid,
        S9_fifo_cap => S9_fifo_cap,
        S9_full_n => S9_full_n,
        S9_write => fft_stage_9_U0_S9_write,
        numFFT_dout => num_c28_dout,
        numFFT_num_data_valid => num_c28_num_data_valid,
        numFFT_fifo_cap => num_c28_fifo_cap,
        numFFT_empty_n => num_c28_empty_n,
        numFFT_read => fft_stage_9_U0_numFFT_read,
        num_c27_din => fft_stage_9_U0_num_c27_din,
        num_c27_num_data_valid => num_c27_num_data_valid,
        num_c27_fifo_cap => num_c27_fifo_cap,
        num_c27_full_n => num_c27_full_n,
        num_c27_write => fft_stage_9_U0_num_c27_write);

    fft_stage_10_U0 : component fft_HW_fft_stage_10
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_stage_10_U0_ap_start,
        ap_done => fft_stage_10_U0_ap_done,
        ap_continue => fft_stage_10_U0_ap_continue,
        ap_idle => fft_stage_10_U0_ap_idle,
        ap_ready => fft_stage_10_U0_ap_ready,
        S9_dout => S9_dout,
        S9_num_data_valid => S9_num_data_valid,
        S9_fifo_cap => S9_fifo_cap,
        S9_empty_n => S9_empty_n,
        S9_read => fft_stage_10_U0_S9_read,
        S10_din => fft_stage_10_U0_S10_din,
        S10_num_data_valid => S10_num_data_valid,
        S10_fifo_cap => S10_fifo_cap,
        S10_full_n => S10_full_n,
        S10_write => fft_stage_10_U0_S10_write,
        numFFT_dout => num_c27_dout,
        numFFT_num_data_valid => num_c27_num_data_valid,
        numFFT_fifo_cap => num_c27_fifo_cap,
        numFFT_empty_n => num_c27_empty_n,
        numFFT_read => fft_stage_10_U0_numFFT_read,
        num_c_din => fft_stage_10_U0_num_c_din,
        num_c_num_data_valid => num_c_num_data_valid,
        num_c_fifo_cap => num_c_fifo_cap,
        num_c_full_n => num_c_full_n,
        num_c_write => fft_stage_10_U0_num_c_write);

    retrieve_nfft_value_U0 : component fft_HW_retrieve_nfft_value
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => retrieve_nfft_value_U0_ap_start,
        ap_done => retrieve_nfft_value_U0_ap_done,
        ap_continue => retrieve_nfft_value_U0_ap_continue,
        ap_idle => retrieve_nfft_value_U0_ap_idle,
        ap_ready => retrieve_nfft_value_U0_ap_ready,
        S10_dout => S10_dout,
        S10_num_data_valid => S10_num_data_valid,
        S10_fifo_cap => S10_fifo_cap,
        S10_empty_n => S10_empty_n,
        S10_read => retrieve_nfft_value_U0_S10_read,
        m_axi_gmem_AWVALID => retrieve_nfft_value_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR => retrieve_nfft_value_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => retrieve_nfft_value_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => retrieve_nfft_value_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => retrieve_nfft_value_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => retrieve_nfft_value_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => retrieve_nfft_value_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => retrieve_nfft_value_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => retrieve_nfft_value_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => retrieve_nfft_value_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => retrieve_nfft_value_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => retrieve_nfft_value_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => retrieve_nfft_value_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => m_axi_gmem_WREADY,
        m_axi_gmem_WDATA => retrieve_nfft_value_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => retrieve_nfft_value_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => retrieve_nfft_value_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => retrieve_nfft_value_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => retrieve_nfft_value_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => retrieve_nfft_value_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => retrieve_nfft_value_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => retrieve_nfft_value_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => retrieve_nfft_value_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => retrieve_nfft_value_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => retrieve_nfft_value_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => retrieve_nfft_value_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => retrieve_nfft_value_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => retrieve_nfft_value_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => retrieve_nfft_value_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => retrieve_nfft_value_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => retrieve_nfft_value_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => retrieve_nfft_value_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv64_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => m_axi_gmem_BVALID,
        m_axi_gmem_BREADY => retrieve_nfft_value_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => m_axi_gmem_BRESP,
        m_axi_gmem_BID => m_axi_gmem_BID,
        m_axi_gmem_BUSER => m_axi_gmem_BUSER,
        out_r_dout => out_c_dout,
        out_r_num_data_valid => out_c_num_data_valid,
        out_r_fifo_cap => out_c_fifo_cap,
        out_r_empty_n => out_c_empty_n,
        out_r_read => retrieve_nfft_value_U0_out_r_read,
        numFFT_dout => num_c_dout,
        numFFT_num_data_valid => num_c_num_data_valid,
        numFFT_fifo_cap => num_c_fifo_cap,
        numFFT_empty_n => num_c_empty_n,
        numFFT_read => retrieve_nfft_value_U0_numFFT_read);

    out_c_U : component fft_HW_fifo_w64_d13_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_out_c_din,
        if_full_n => out_c_full_n,
        if_write => entry_proc_U0_out_c_write,
        if_dout => out_c_dout,
        if_num_data_valid => out_c_num_data_valid,
        if_fifo_cap => out_c_fifo_cap,
        if_empty_n => out_c_empty_n,
        if_read => retrieve_nfft_value_U0_out_r_read);

    S0_U : component fft_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_nfft_value_U0_S0_din,
        if_full_n => S0_full_n,
        if_write => load_nfft_value_U0_S0_write,
        if_dout => S0_dout,
        if_num_data_valid => S0_num_data_valid,
        if_fifo_cap => S0_fifo_cap,
        if_empty_n => S0_empty_n,
        if_read => fft_stage_1_U0_S0_read);

    num_c36_U : component fft_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_nfft_value_U0_num_c36_din,
        if_full_n => num_c36_full_n,
        if_write => load_nfft_value_U0_num_c36_write,
        if_dout => num_c36_dout,
        if_num_data_valid => num_c36_num_data_valid,
        if_fifo_cap => num_c36_fifo_cap,
        if_empty_n => num_c36_empty_n,
        if_read => fft_stage_1_U0_numFFT_read);

    S1_U : component fft_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_1_U0_S1_din,
        if_full_n => S1_full_n,
        if_write => fft_stage_1_U0_S1_write,
        if_dout => S1_dout,
        if_num_data_valid => S1_num_data_valid,
        if_fifo_cap => S1_fifo_cap,
        if_empty_n => S1_empty_n,
        if_read => fft_stage_2_U0_S1_read);

    num_c35_U : component fft_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_1_U0_num_c35_din,
        if_full_n => num_c35_full_n,
        if_write => fft_stage_1_U0_num_c35_write,
        if_dout => num_c35_dout,
        if_num_data_valid => num_c35_num_data_valid,
        if_fifo_cap => num_c35_fifo_cap,
        if_empty_n => num_c35_empty_n,
        if_read => fft_stage_2_U0_numFFT_read);

    S2_U : component fft_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_2_U0_S2_din,
        if_full_n => S2_full_n,
        if_write => fft_stage_2_U0_S2_write,
        if_dout => S2_dout,
        if_num_data_valid => S2_num_data_valid,
        if_fifo_cap => S2_fifo_cap,
        if_empty_n => S2_empty_n,
        if_read => fft_stage_3_U0_S2_read);

    num_c34_U : component fft_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_2_U0_num_c34_din,
        if_full_n => num_c34_full_n,
        if_write => fft_stage_2_U0_num_c34_write,
        if_dout => num_c34_dout,
        if_num_data_valid => num_c34_num_data_valid,
        if_fifo_cap => num_c34_fifo_cap,
        if_empty_n => num_c34_empty_n,
        if_read => fft_stage_3_U0_numFFT_read);

    S3_U : component fft_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_3_U0_S3_din,
        if_full_n => S3_full_n,
        if_write => fft_stage_3_U0_S3_write,
        if_dout => S3_dout,
        if_num_data_valid => S3_num_data_valid,
        if_fifo_cap => S3_fifo_cap,
        if_empty_n => S3_empty_n,
        if_read => fft_stage_4_U0_S3_read);

    num_c33_U : component fft_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_3_U0_num_c33_din,
        if_full_n => num_c33_full_n,
        if_write => fft_stage_3_U0_num_c33_write,
        if_dout => num_c33_dout,
        if_num_data_valid => num_c33_num_data_valid,
        if_fifo_cap => num_c33_fifo_cap,
        if_empty_n => num_c33_empty_n,
        if_read => fft_stage_4_U0_numFFT_read);

    S4_U : component fft_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_4_U0_S4_din,
        if_full_n => S4_full_n,
        if_write => fft_stage_4_U0_S4_write,
        if_dout => S4_dout,
        if_num_data_valid => S4_num_data_valid,
        if_fifo_cap => S4_fifo_cap,
        if_empty_n => S4_empty_n,
        if_read => fft_stage_5_U0_S4_read);

    num_c32_U : component fft_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_4_U0_num_c32_din,
        if_full_n => num_c32_full_n,
        if_write => fft_stage_4_U0_num_c32_write,
        if_dout => num_c32_dout,
        if_num_data_valid => num_c32_num_data_valid,
        if_fifo_cap => num_c32_fifo_cap,
        if_empty_n => num_c32_empty_n,
        if_read => fft_stage_5_U0_numFFT_read);

    S5_U : component fft_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_5_U0_S5_din,
        if_full_n => S5_full_n,
        if_write => fft_stage_5_U0_S5_write,
        if_dout => S5_dout,
        if_num_data_valid => S5_num_data_valid,
        if_fifo_cap => S5_fifo_cap,
        if_empty_n => S5_empty_n,
        if_read => fft_stage_6_U0_S5_read);

    num_c31_U : component fft_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_5_U0_num_c31_din,
        if_full_n => num_c31_full_n,
        if_write => fft_stage_5_U0_num_c31_write,
        if_dout => num_c31_dout,
        if_num_data_valid => num_c31_num_data_valid,
        if_fifo_cap => num_c31_fifo_cap,
        if_empty_n => num_c31_empty_n,
        if_read => fft_stage_6_U0_numFFT_read);

    S6_U : component fft_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_6_U0_S6_din,
        if_full_n => S6_full_n,
        if_write => fft_stage_6_U0_S6_write,
        if_dout => S6_dout,
        if_num_data_valid => S6_num_data_valid,
        if_fifo_cap => S6_fifo_cap,
        if_empty_n => S6_empty_n,
        if_read => fft_stage_7_U0_S6_read);

    num_c30_U : component fft_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_6_U0_num_c30_din,
        if_full_n => num_c30_full_n,
        if_write => fft_stage_6_U0_num_c30_write,
        if_dout => num_c30_dout,
        if_num_data_valid => num_c30_num_data_valid,
        if_fifo_cap => num_c30_fifo_cap,
        if_empty_n => num_c30_empty_n,
        if_read => fft_stage_7_U0_numFFT_read);

    S7_U : component fft_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_7_U0_S7_din,
        if_full_n => S7_full_n,
        if_write => fft_stage_7_U0_S7_write,
        if_dout => S7_dout,
        if_num_data_valid => S7_num_data_valid,
        if_fifo_cap => S7_fifo_cap,
        if_empty_n => S7_empty_n,
        if_read => fft_stage_8_U0_S7_read);

    num_c29_U : component fft_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_7_U0_num_c29_din,
        if_full_n => num_c29_full_n,
        if_write => fft_stage_7_U0_num_c29_write,
        if_dout => num_c29_dout,
        if_num_data_valid => num_c29_num_data_valid,
        if_fifo_cap => num_c29_fifo_cap,
        if_empty_n => num_c29_empty_n,
        if_read => fft_stage_8_U0_numFFT_read);

    S8_U : component fft_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_8_U0_S8_din,
        if_full_n => S8_full_n,
        if_write => fft_stage_8_U0_S8_write,
        if_dout => S8_dout,
        if_num_data_valid => S8_num_data_valid,
        if_fifo_cap => S8_fifo_cap,
        if_empty_n => S8_empty_n,
        if_read => fft_stage_9_U0_S8_read);

    num_c28_U : component fft_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_8_U0_num_c28_din,
        if_full_n => num_c28_full_n,
        if_write => fft_stage_8_U0_num_c28_write,
        if_dout => num_c28_dout,
        if_num_data_valid => num_c28_num_data_valid,
        if_fifo_cap => num_c28_fifo_cap,
        if_empty_n => num_c28_empty_n,
        if_read => fft_stage_9_U0_numFFT_read);

    S9_U : component fft_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_9_U0_S9_din,
        if_full_n => S9_full_n,
        if_write => fft_stage_9_U0_S9_write,
        if_dout => S9_dout,
        if_num_data_valid => S9_num_data_valid,
        if_fifo_cap => S9_fifo_cap,
        if_empty_n => S9_empty_n,
        if_read => fft_stage_10_U0_S9_read);

    num_c27_U : component fft_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_9_U0_num_c27_din,
        if_full_n => num_c27_full_n,
        if_write => fft_stage_9_U0_num_c27_write,
        if_dout => num_c27_dout,
        if_num_data_valid => num_c27_num_data_valid,
        if_fifo_cap => num_c27_fifo_cap,
        if_empty_n => num_c27_empty_n,
        if_read => fft_stage_10_U0_numFFT_read);

    S10_U : component fft_HW_fifo_w64_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_10_U0_S10_din,
        if_full_n => S10_full_n,
        if_write => fft_stage_10_U0_S10_write,
        if_dout => S10_dout,
        if_num_data_valid => S10_num_data_valid,
        if_fifo_cap => S10_fifo_cap,
        if_empty_n => S10_empty_n,
        if_read => retrieve_nfft_value_U0_S10_read);

    num_c_U : component fft_HW_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_stage_10_U0_num_c_din,
        if_full_n => num_c_full_n,
        if_write => fft_stage_10_U0_num_c_write,
        if_dout => num_c_dout,
        if_num_data_valid => num_c_num_data_valid,
        if_fifo_cap => num_c_fifo_cap,
        if_empty_n => num_c_empty_n,
        if_read => retrieve_nfft_value_U0_numFFT_read);

    start_for_retrieve_nfft_value_U0_U : component fft_HW_start_for_retrieve_nfft_value_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_retrieve_nfft_value_U0_din,
        if_full_n => start_for_retrieve_nfft_value_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_retrieve_nfft_value_U0_dout,
        if_empty_n => start_for_retrieve_nfft_value_U0_empty_n,
        if_read => retrieve_nfft_value_U0_ap_ready);

    start_for_fft_stage_1_U0_U : component fft_HW_start_for_fft_stage_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_1_U0_din,
        if_full_n => start_for_fft_stage_1_U0_full_n,
        if_write => load_nfft_value_U0_start_write,
        if_dout => start_for_fft_stage_1_U0_dout,
        if_empty_n => start_for_fft_stage_1_U0_empty_n,
        if_read => fft_stage_1_U0_ap_ready);

    start_for_fft_stage_2_U0_U : component fft_HW_start_for_fft_stage_2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_2_U0_din,
        if_full_n => start_for_fft_stage_2_U0_full_n,
        if_write => fft_stage_1_U0_start_write,
        if_dout => start_for_fft_stage_2_U0_dout,
        if_empty_n => start_for_fft_stage_2_U0_empty_n,
        if_read => fft_stage_2_U0_ap_ready);

    start_for_fft_stage_3_U0_U : component fft_HW_start_for_fft_stage_3_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_3_U0_din,
        if_full_n => start_for_fft_stage_3_U0_full_n,
        if_write => fft_stage_2_U0_start_write,
        if_dout => start_for_fft_stage_3_U0_dout,
        if_empty_n => start_for_fft_stage_3_U0_empty_n,
        if_read => fft_stage_3_U0_ap_ready);

    start_for_fft_stage_4_U0_U : component fft_HW_start_for_fft_stage_4_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_4_U0_din,
        if_full_n => start_for_fft_stage_4_U0_full_n,
        if_write => fft_stage_3_U0_start_write,
        if_dout => start_for_fft_stage_4_U0_dout,
        if_empty_n => start_for_fft_stage_4_U0_empty_n,
        if_read => fft_stage_4_U0_ap_ready);

    start_for_fft_stage_5_U0_U : component fft_HW_start_for_fft_stage_5_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_5_U0_din,
        if_full_n => start_for_fft_stage_5_U0_full_n,
        if_write => fft_stage_4_U0_start_write,
        if_dout => start_for_fft_stage_5_U0_dout,
        if_empty_n => start_for_fft_stage_5_U0_empty_n,
        if_read => fft_stage_5_U0_ap_ready);

    start_for_fft_stage_6_U0_U : component fft_HW_start_for_fft_stage_6_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_6_U0_din,
        if_full_n => start_for_fft_stage_6_U0_full_n,
        if_write => fft_stage_5_U0_start_write,
        if_dout => start_for_fft_stage_6_U0_dout,
        if_empty_n => start_for_fft_stage_6_U0_empty_n,
        if_read => fft_stage_6_U0_ap_ready);

    start_for_fft_stage_7_U0_U : component fft_HW_start_for_fft_stage_7_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_7_U0_din,
        if_full_n => start_for_fft_stage_7_U0_full_n,
        if_write => fft_stage_6_U0_start_write,
        if_dout => start_for_fft_stage_7_U0_dout,
        if_empty_n => start_for_fft_stage_7_U0_empty_n,
        if_read => fft_stage_7_U0_ap_ready);

    start_for_fft_stage_8_U0_U : component fft_HW_start_for_fft_stage_8_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_8_U0_din,
        if_full_n => start_for_fft_stage_8_U0_full_n,
        if_write => fft_stage_7_U0_start_write,
        if_dout => start_for_fft_stage_8_U0_dout,
        if_empty_n => start_for_fft_stage_8_U0_empty_n,
        if_read => fft_stage_8_U0_ap_ready);

    start_for_fft_stage_9_U0_U : component fft_HW_start_for_fft_stage_9_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_9_U0_din,
        if_full_n => start_for_fft_stage_9_U0_full_n,
        if_write => fft_stage_8_U0_start_write,
        if_dout => start_for_fft_stage_9_U0_dout,
        if_empty_n => start_for_fft_stage_9_U0_empty_n,
        if_read => fft_stage_9_U0_ap_ready);

    start_for_fft_stage_10_U0_U : component fft_HW_start_for_fft_stage_10_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_stage_10_U0_din,
        if_full_n => start_for_fft_stage_10_U0_full_n,
        if_write => fft_stage_9_U0_start_write,
        if_dout => start_for_fft_stage_10_U0_dout,
        if_empty_n => start_for_fft_stage_10_U0_empty_n,
        if_read => fft_stage_10_U0_ap_ready);





    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_load_nfft_value_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_load_nfft_value_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_load_nfft_value_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_load_nfft_value_U0_ap_ready <= ap_sync_load_nfft_value_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= retrieve_nfft_value_U0_ap_done;
    ap_idle <= (retrieve_nfft_value_U0_ap_idle and load_nfft_value_U0_ap_idle and fft_stage_9_U0_ap_idle and fft_stage_8_U0_ap_idle and fft_stage_7_U0_ap_idle and fft_stage_6_U0_ap_idle and fft_stage_5_U0_ap_idle and fft_stage_4_U0_ap_idle and fft_stage_3_U0_ap_idle and fft_stage_2_U0_ap_idle and fft_stage_1_U0_ap_idle and fft_stage_10_U0_ap_idle and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_load_nfft_value_U0_ap_ready <= (load_nfft_value_U0_ap_ready or ap_sync_reg_load_nfft_value_U0_ap_ready);
    ap_sync_ready <= (ap_sync_load_nfft_value_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    fft_stage_10_U0_ap_continue <= ap_const_logic_1;
    fft_stage_10_U0_ap_start <= start_for_fft_stage_10_U0_empty_n;
    fft_stage_1_U0_ap_continue <= ap_const_logic_1;
    fft_stage_1_U0_ap_start <= start_for_fft_stage_1_U0_empty_n;
    fft_stage_2_U0_ap_continue <= ap_const_logic_1;
    fft_stage_2_U0_ap_start <= start_for_fft_stage_2_U0_empty_n;
    fft_stage_3_U0_ap_continue <= ap_const_logic_1;
    fft_stage_3_U0_ap_start <= start_for_fft_stage_3_U0_empty_n;
    fft_stage_4_U0_ap_continue <= ap_const_logic_1;
    fft_stage_4_U0_ap_start <= start_for_fft_stage_4_U0_empty_n;
    fft_stage_5_U0_ap_continue <= ap_const_logic_1;
    fft_stage_5_U0_ap_start <= start_for_fft_stage_5_U0_empty_n;
    fft_stage_6_U0_ap_continue <= ap_const_logic_1;
    fft_stage_6_U0_ap_start <= start_for_fft_stage_6_U0_empty_n;
    fft_stage_7_U0_ap_continue <= ap_const_logic_1;
    fft_stage_7_U0_ap_start <= start_for_fft_stage_7_U0_empty_n;
    fft_stage_8_U0_ap_continue <= ap_const_logic_1;
    fft_stage_8_U0_ap_start <= start_for_fft_stage_8_U0_empty_n;
    fft_stage_9_U0_ap_continue <= ap_const_logic_1;
    fft_stage_9_U0_ap_start <= start_for_fft_stage_9_U0_empty_n;
    load_nfft_value_U0_ap_continue <= ap_const_logic_1;
    load_nfft_value_U0_ap_start <= ((ap_sync_reg_load_nfft_value_U0_ap_ready xor ap_const_logic_1) and ap_start);
    m_axi_gmem_ARADDR <= load_nfft_value_U0_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= load_nfft_value_U0_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= load_nfft_value_U0_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= load_nfft_value_U0_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= load_nfft_value_U0_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= load_nfft_value_U0_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= load_nfft_value_U0_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= load_nfft_value_U0_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= load_nfft_value_U0_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= load_nfft_value_U0_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= load_nfft_value_U0_m_axi_gmem_ARUSER;
    m_axi_gmem_ARVALID <= load_nfft_value_U0_m_axi_gmem_ARVALID;
    m_axi_gmem_AWADDR <= retrieve_nfft_value_U0_m_axi_gmem_AWADDR;
    m_axi_gmem_AWBURST <= retrieve_nfft_value_U0_m_axi_gmem_AWBURST;
    m_axi_gmem_AWCACHE <= retrieve_nfft_value_U0_m_axi_gmem_AWCACHE;
    m_axi_gmem_AWID <= retrieve_nfft_value_U0_m_axi_gmem_AWID;
    m_axi_gmem_AWLEN <= retrieve_nfft_value_U0_m_axi_gmem_AWLEN;
    m_axi_gmem_AWLOCK <= retrieve_nfft_value_U0_m_axi_gmem_AWLOCK;
    m_axi_gmem_AWPROT <= retrieve_nfft_value_U0_m_axi_gmem_AWPROT;
    m_axi_gmem_AWQOS <= retrieve_nfft_value_U0_m_axi_gmem_AWQOS;
    m_axi_gmem_AWREGION <= retrieve_nfft_value_U0_m_axi_gmem_AWREGION;
    m_axi_gmem_AWSIZE <= retrieve_nfft_value_U0_m_axi_gmem_AWSIZE;
    m_axi_gmem_AWUSER <= retrieve_nfft_value_U0_m_axi_gmem_AWUSER;
    m_axi_gmem_AWVALID <= retrieve_nfft_value_U0_m_axi_gmem_AWVALID;
    m_axi_gmem_BREADY <= retrieve_nfft_value_U0_m_axi_gmem_BREADY;
    m_axi_gmem_RREADY <= load_nfft_value_U0_m_axi_gmem_RREADY;
    m_axi_gmem_WDATA <= retrieve_nfft_value_U0_m_axi_gmem_WDATA;
    m_axi_gmem_WID <= retrieve_nfft_value_U0_m_axi_gmem_WID;
    m_axi_gmem_WLAST <= retrieve_nfft_value_U0_m_axi_gmem_WLAST;
    m_axi_gmem_WSTRB <= retrieve_nfft_value_U0_m_axi_gmem_WSTRB;
    m_axi_gmem_WUSER <= retrieve_nfft_value_U0_m_axi_gmem_WUSER;
    m_axi_gmem_WVALID <= retrieve_nfft_value_U0_m_axi_gmem_WVALID;
    retrieve_nfft_value_U0_ap_continue <= ap_continue;
    retrieve_nfft_value_U0_ap_start <= start_for_retrieve_nfft_value_U0_empty_n;
    start_for_fft_stage_10_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_5_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_6_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_7_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_8_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_stage_9_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_retrieve_nfft_value_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
